include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "LibCOOC_h"
include "LibCOMI_h"
include "LibCOUI_h"
include "LibCOMU_h"

include "LibCOTF_h"

//--------------------------------------------------------------------------------------------------
// Library: ToolFix (COOP)
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libCOTF_InitLibraries () {
    libNtve_InitVariables();
    libLbty_InitVariables();
    libHots_InitVariables();
    libCOOC_InitVariables();
    libCOMI_InitVariables();
    libCOUI_InitVariables();
    libCOMU_InitVariables();
}

// Variable Initialization
bool libCOTF_InitVariables_completed = false;

void libCOTF_InitVariables () {
    int init_i;
    int init_j;

    if (libCOTF_InitVariables_completed) {
        return;
    }

    libCOTF_InitVariables_completed = true;

    for (init_i = 0; init_i <= 20; init_i += 1) {
        libCOTF_gv_uT_DevCommands[init_i] = libCOTF_ge_UT_DevCommandTypes_Gamealtering;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libCOTF_gv_uT_InitDialogButton[init_i] = c_invalidDialogControlId;
    }
    libCOTF_gv_uT_AIVisionCheckBox = c_invalidDialogControlId;
    libCOTF_gv_uT_AIVisionDialog = c_invalidDialogId;
    libCOTF_gv_uT_InfoDialog = c_invalidDialogId;
    libCOTF_gv_uT_InfoButton = c_invalidDialogControlId;
    libCOTF_gv_uT_SelInfoText = c_invalidDialogControlId;
    libCOTF_gv_uT_SelInfoDialog = c_invalidDialogId;
    libCOTF_gv_uT_SelInfo_PG = PlayerGroupEmpty();
    libCOTF_gv_uT_encompsDialogs = c_invalidDialogId;
    libCOTF_gv_uT_Bank_UnitFilter = UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCOTF_gv_uT_UI_Hidden = PlayerGroupEmpty();
    libCOTF_gv_uT_ButtonUsagePlayerGroup = PlayerGroupEmpty();
    for (init_i = 0; init_i <= libCOTF_gv_uT_HotkeyStoreLength; init_i += 1) {
        for (init_j = 0; init_j <= 15; init_j += 1) {
            libCOTF_gv_uT_HotkeyToStoreButton[init_i][init_j] = "";
        }
    }
    for (init_i = 0; init_i <= libCOTF_gv_uT_HotkeyStoreLength; init_i += 1) {
        for (init_j = 0; init_j <= 15; init_j += 1) {
            libCOTF_gv_uT_HotkeyToStoreValue[init_i][init_j] = "";
        }
    }
    libCOTF_gv_uT_AlarakCDRRange = 15.0;
    libCOTF_gv_uT_AlarakCDRPlayers = PlayerGroupEmpty();
    libCOTF_gv_uT_ArtSpawnColor = 1;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            libCOTF_gv_uT_Pie[init_i][init_j] = c_invalidDialogId;
        }
    }
    libCOTF_gv_graphsGeneral.lv_intervals = 6;
    libCOTF_gv_graphsGeneral.lv_container = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCOTF_gv_maxGraphs; init_i += 1) {
        libCOTF_gv_graphsData[init_i].lv_graph = c_invalidDialogControlId;
        libCOTF_gv_graphsData[init_i].lv_highFrame = c_invalidDialogControlId;
        libCOTF_gv_graphsData[init_i].lv_title = c_invalidDialogControlId;
    }
    libCOTF_gv_uT_Graph_ButtonDialog = c_invalidDialogId;
    libCOTF_gv_uT_Graph_Button = c_invalidDialogControlId;
    libCOTF_gv_uT_MissileCreators = UnitGroupEmpty();
    libCOTF_gv_uT_Horde_UG_Wave = UnitGroupEmpty();
    libCOTF_gv_uT_Horde_UG = UnitGroupEmpty();
    for (init_i = 0; init_i <= 6; init_i += 1) {
        libCOTF_gv_uT_MasteryBoxes[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        libCOTF_gv_uT_MasteryLabels[init_i] = c_invalidDialogControlId;
    }
    libCOTF_gv_uT_MasteryButton = c_invalidDialogControlId;
    libCOTF_gv_uT_MasteryDialog = c_invalidDialogId;
    libCOTF_gv_uT_LastAttackWave = UnitGroupEmpty();
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libCOTF_gv_uT_Camera_Rotation[init_i] = CameraInfoGetValue(CameraInfoDefault(), c_cameraValueYaw);
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libCOTF_gv_uT_Camera_AngleofAttack[init_i] = CameraInfoGetValue(CameraInfoDefault(), c_cameraValuePitch);
    }
    libCOTF_gv_uT_Dummies = UnitGroupEmpty();
    for (init_i = 0; init_i <= 20; init_i += 1) {
        for (init_j = 0; init_j <= 1; init_j += 1) {
            libCOTF_gv_uT_DummyTimer[init_i][init_j] = TimerCreate();
        }
    }
    libCOTF_gv_uT_DPS_UG = UnitGroupEmpty();
    libCOTF_gv_uT_DPS_UG_Summoned = UnitGroupEmpty();
    for (init_i = 0; init_i <= libCOTF_gv_uT_DPS_MaxUnits; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            libCOTF_gv_uT_DPS_Timer[init_i][init_j] = TimerCreate();
        }
    }
    libCOTF_gv_uT_PlayersWithNumbers = PlayerGroupEmpty();
    libCOTF_gv_uT_DL_LoggingPlayers = PlayerGroupEmpty();
    libCOTF_gv_uT_DL_LogDialog = c_invalidDialogId;
    libCOTF_gv_uT_DL_LogDialogItem = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libCOTF_gv_uT_DL_PlayerData[init_i] = 1;
    }
    libCOTF_gv_aF_CS_News = StringExternal("Param/Value/lib_COTF_049EE360");
    for (init_i = 0; init_i <= 1; init_i += 1) {
        libCOTF_gv_aF_CS_CutsceneDialog[init_i] = c_invalidDialogId;
    }
    libCOTF_gv_aF_CS_CommanderMiraDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libCOTF_gv_aF_CS_CommanderCutscenes[init_i] = c_cutsceneNone;
    }
    libCOTF_gv_aF_CS_NewsDialog = c_invalidDialogId;
    libCOTF_gv_aF_CS_PatchDialog = c_invalidDialogId;
    libCOTF_gv_aF_CS_NewsControlButton = c_invalidDialogControlId;
    libCOTF_gv_aF_CS_NewsDialogPanel = c_invalidDialogControlId;
    libCOTF_gv_aF_CS_AllyPrestigeButton = c_invalidDialogControlId;
    libCOTF_gv_aF_CS_AllyPrestigeDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            libCOTF_gv_aF_TopBarIcons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    libCOTF_gv_aF_TopBarIconsDialog = c_invalidDialogId;
    libCOTF_gv_aF_ScoreButton = c_invalidDialogControlId;
    libCOTF_gv_aF_Score_KillGraph = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libCOTF_gv_aF_Score_PieCharts[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        libCOTF_gv_aF_Score_FinalButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        libCOTF_gv_aF_Score_FinalButtonLabel[init_i] = c_invalidDialogControlId;
    }
    libCOTF_gv_aF_KillNumbers = c_invalidDialogId;
    libCOTF_gv_aF_SlimUI_PlayerGroup = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            libCOTF_gv_aF_TopbarButton[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        libCOTF_gv_pingResetTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        libCOTF_gv_pingSuppressionTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        libCOTF_gv_pingLockoutTimer[init_i] = TimerCreate();
    }
    libCOTF_gv_pingValidPlayers = PlayerGroupEmpty();
    libCOTF_gv_pingPanelMinimapButton = c_invalidDialogControlId;
    libCOTF_gv_meleeSurrender_PlayersSurrendering = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 16; init_i += 1) {
        libCOTF_gv_meleeSurrender_PlayersAnswered[init_i] = PlayerGroupEmpty();
    }
    libCOTF_gv_meleeSurrender_PlayersTried = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 32; init_i += 1) {
        libCOTF_gv_meleeSurrender_Dialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 32; init_i += 1) {
        libCOTF_gv_meleeSurrender_BtnYes[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 32; init_i += 1) {
        libCOTF_gv_meleeSurrender_BtnNo[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 32; init_i += 1) {
        libCOTF_gv_meleeSurrender_Title[init_i] = c_invalidDialogControlId;
    }
}

// Presets
// Functions
void libCOTF_gf_RunTriggerByNameEasy (string lp_triggerName, bool lp_check, bool lp_waitCheck) {
    // Variable Declarations
    trigger lv_trigger;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_trigger = TriggerCreate((lp_triggerName + "_Func"));

    // Implementation
    TriggerExecute(lv_trigger, lp_check, lp_waitCheck);
    TriggerDestroy(lv_trigger);
}

void libCOTF_gf_RunEventByName (string lp_triggerName, string lp_player) {
    // Variable Declarations
    trigger lv_trigger;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_trigger = TriggerCreate(lp_triggerName);

    // Implementation
    TriggerExecute(lv_trigger, false, false);
}

bool libCOTF_gf_UT_DevCommandsActive (int lp_pDevCommandType, int lp_pPlayer) {
    // Automatic Variable Declarations
    int autoB3ADF3AA_val;

    // Implementation
    autoB3ADF3AA_val = lp_pDevCommandType;
    if (autoB3ADF3AA_val == libCOTF_ge_UT_DevCommandTypes_Gamealtering) {
        if ((libCOTF_gv_uT_DevCommands[lp_pPlayer] == libCOTF_ge_UT_DevCommandTypes_Gamealtering)) {
            return true;
        }
        else {
            return false;
        }
    }
    else if (autoB3ADF3AA_val == libCOTF_ge_UT_DevCommandTypes_Visual) {
        if (((libCOTF_gv_uT_DevCommands[lp_pPlayer] == libCOTF_ge_UT_DevCommandTypes_Gamealtering) || (libCOTF_gv_uT_DevCommands[lp_pPlayer] == libCOTF_ge_UT_DevCommandTypes_Visual))) {
            return true;
        }
        else {
            return false;
        }
    }
    else if (autoB3ADF3AA_val == libCOTF_ge_UT_DevCommandTypes_No) {
        if ((libCOTF_gv_uT_DevCommands[lp_pPlayer] == libCOTF_ge_UT_DevCommandTypes_No)) {
            return true;
        }
        else {
            return false;
        }
    }
    else {
        return false;
    }
}

void libCOTF_gf_UT_Cheat () {
    // Automatic Variable Declarations
    // Implementation
    libCOTF_gv_uT_CheatUsed = true;
    TriggerSendEvent("UT_CheatUsed");
}

bool libCOTF_gf_UT_GL_ScoreUsed (string lp_pScore) {
    // Automatic Variable Declarations
    const int auto3973D280_ae = 100;
    int auto3973D280_var;

    // Implementation
    auto3973D280_var = 0;
    for ( ; auto3973D280_var <= auto3973D280_ae; auto3973D280_var += 1 ) {
        if ((lp_pScore == libCOTF_gv_uT_GL_ScoresUsed[auto3973D280_var])) {
            return true;
        }

    }
    return false;
}

string libCOTF_gf_UT_GL_PlayerMasteryTalent (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("MasteryUpgrades", lp_masteryUpgrade, "TalentData", 1);
}

text libCOTF_gf_UT_GL_MasteryButtonName (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOOC_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade) == null)) {
        return StringToText((lp_masteryUpgrade));
    }

    TextExpressionSetToken("Param/Expression/lib_COTF_E86465F4", "A", StringToText(CatalogFieldValueGet(c_gameCatalogButton, libCOTF_gf_UT_GL_PlayerMasteryTalent(lp_masteryUpgrade), "Name", c_playerAny)));
    return TextExpressionAssemble("Param/Expression/lib_COTF_E86465F4");
}

string libCOTF_gf_UT_GL_GetCommanderScore (int lp_pIndex, string lp_pCommander) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_pIndex == 1)) {
        return UserDataGetGameLink("PlayerCommanders", lp_pCommander, "ScoreStatisticCoop", 1);
    }
    else {
        return UserDataGetGameLink("PlayerCommanders", lp_pCommander, "ScoreStatisticSelf", 1);
    }
}

text libCOTF_gf_UT_GL_AddScoreValueToText (text lp_pText, string lp_pScore, int lp_pIndex) {
    // Variable Declarations
    text lv_vText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_pScore == "KorhalRiftDamage") || (lp_pScore == "DamageDealtToVoidShards") || (lp_pScore == "KaldirShuttleDamage") || (lp_pScore == "TarsonisTrainDamage") || (lp_pScore == "JarbanPointCaptureKills") || (lp_pScore == "PartAndParcelCollection") || (lp_pScore == "MeinhoffDayNightInfestedKills") || (lp_pScore == "CradleOfDeathDamageDealttoConstructs"))) {
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "A", lp_pText);
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_86B1835A", "B", IntToText(lp_pIndex));
        lv_vText = TextExpressionAssemble("Param/Expression/lib_COTF_86B1835A");
    }
    else if (((lp_pScore == "ZeratulDamage") || (lp_pScore == "AlarakDamage") || (lp_pScore == "FenixChampionDamage") || (lp_pScore == "DehakaDamage") || (lp_pScore == "VorazunCloakedDamage") || (lp_pScore == "SwannDrillDamage") || (lp_pScore == "FenixSuitDamage") || (lp_pScore == "ZagaraFrenzyDamage") || (lp_pScore == "RaynorHyperionDamage") || (lp_pScore == "StukovInfestedDamage") || (lp_pScore == "KerriganDamage") || (lp_pScore == "HornerMagMineDamage") || (lp_pScore == "NovaDamage") || (lp_pScore == "ArtanisSoADamage") || (lp_pScore == "AbathurMonsterDamage") || (lp_pScore == "VorazunBlackHoleDamage") || (lp_pScore == "ZagaraSuicideDamage") || (lp_pScore == "StukovMonstrosityDamage") || (lp_pScore == "StetmannGaryDamage") || (lp_pScore == "TychusReaperBombDamage") || (lp_pScore == "TychusGhostDominatedDamage") || (lp_pScore == "TychusOdinDamage") || (lp_pScore == "TychusFirebatOilDamage") || (lp_pScore == "TychusGrenadeDamage") || (lp_pScore == "TychusSpectrePulseDamage") || (lp_pScore == "TychusWarhoundTurretDamage") || (lp_pScore == "MengskRoyalGuardDamage") || (lp_pScore == "MengskTrooperDamage"))) {
        TextExpressionSetToken("Param/Expression/lib_COTF_549F6A65", "A", lp_pText);
        TextExpressionSetToken("Param/Expression/lib_COTF_549F6A65", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_549F6A65", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COTF_549F6A65", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_COTF_549F6A65", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_549F6A65", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COTF_549F6A65", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_549F6A65", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_549F6A65", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_COTF_549F6A65", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_549F6A65", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_549F6A65", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_549F6A65", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_549F6A65", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_549F6A65", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COTF_549F6A65", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_549F6A65", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_549F6A65", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COTF_549F6A65", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_549F6A65", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_549F6A65", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_549F6A65", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_549F6A65", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_549F6A65", "B", IntToText(lp_pIndex));
        lv_vText = TextExpressionAssemble("Param/Expression/lib_COTF_549F6A65");
    }
    else if ((lp_pScore == "Devouroffcooldown")) {
        TextExpressionSetToken("Param/Expression/lib_COTF_3D505B71", "A", lp_pText);
        TextExpressionSetToken("Param/Expression/lib_COTF_3D505B71", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_3D505B71", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COTF_3D505B71", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_3D505B71", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COTF_3D505B71", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_3D505B71", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_3D505B71", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_COTF_3D505B71", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_3D505B71", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_3D505B71", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_3D505B71", "B", IntToText(lp_pIndex));
        lv_vText = TextExpressionAssemble("Param/Expression/lib_COTF_3D505B71");
    }
    else if ((lp_pScore == "DamageDealtbyContaminatedStrike")) {
        TextExpressionSetToken("Param/Expression/lib_COTF_6289CA73", "A", lp_pText);
        TextExpressionSetToken("Param/Expression/lib_COTF_6289CA73", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_6289CA73", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COTF_6289CA73", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_6289CA73", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COTF_6289CA73", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_6289CA73", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_6289CA73", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_COTF_6289CA73", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_6289CA73", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_6289CA73", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_6289CA73", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_6289CA73", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_6289CA73", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COTF_6289CA73", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_6289CA73", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_6289CA73", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COTF_6289CA73", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_6289CA73", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_6289CA73", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_6289CA73", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_6289CA73", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_6289CA73", "B", IntToText(lp_pIndex));
        lv_vText = TextExpressionAssemble("Param/Expression/lib_COTF_6289CA73");
    }
    else if (true) {
        if ((libCOTF_gf_UT_GL_IsSharedMissionScore(lp_pScore) == true)) {
            TextExpressionSetToken("Param/Expression/lib_COTF_81443D7C", "A", lp_pText);
            TextExpressionSetToken("Param/Expression/lib_COTF_81443D7C", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COTF_81443D7C", "D", IntToText((lp_pIndex + 1)));
            TextExpressionSetToken("Param/Expression/lib_COTF_81443D7C", "C", StringToText((lp_pScore)));
            TextExpressionSetToken("Param/Expression/lib_COTF_81443D7C", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COTF_81443D7C", "D", IntToText((lp_pIndex + 1)));
            TextExpressionSetToken("Param/Expression/lib_COTF_81443D7C", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COTF_81443D7C", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COTF_81443D7C", "C", StringToText((lp_pScore)));
            TextExpressionSetToken("Param/Expression/lib_COTF_81443D7C", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COTF_81443D7C", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COTF_81443D7C", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COTF_81443D7C", "B", IntToText(lp_pIndex));
            lv_vText = TextExpressionAssemble("Param/Expression/lib_COTF_81443D7C");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_COTF_48FF072D", "A", lp_pText);
            TextExpressionSetToken("Param/Expression/lib_COTF_48FF072D", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COTF_48FF072D", "D", IntToText((lp_pIndex + 1)));
            TextExpressionSetToken("Param/Expression/lib_COTF_48FF072D", "C", StringToText((lp_pScore)));
            TextExpressionSetToken("Param/Expression/lib_COTF_48FF072D", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COTF_48FF072D", "D", IntToText((lp_pIndex + 1)));
            TextExpressionSetToken("Param/Expression/lib_COTF_48FF072D", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COTF_48FF072D", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COTF_48FF072D", "C", StringToText((lp_pScore)));
            TextExpressionSetToken("Param/Expression/lib_COTF_48FF072D", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COTF_48FF072D", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COTF_48FF072D", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COTF_48FF072D", "B", IntToText(lp_pIndex));
            lv_vText = TextExpressionAssemble("Param/Expression/lib_COTF_48FF072D");
        }
    }
    return lv_vText;
}

text libCOTF_gf_UT_GL_AddVariableValueToText (text lp_pText, text lp_pVariable, text lp_pVariableDescription, int lp_pIndex) {
    // Variable Declarations
    text lv_vText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_COTF_BAE899DE", "A", lp_pText);
    TextExpressionSetToken("Param/Expression/lib_COTF_BAE899DE", "B", IntToText(lp_pIndex));
    TextExpressionSetToken("Param/Expression/lib_COTF_BAE899DE", "D", IntToText((lp_pIndex + 1)));
    TextExpressionSetToken("Param/Expression/lib_COTF_BAE899DE", "C", lp_pVariableDescription);
    TextExpressionSetToken("Param/Expression/lib_COTF_BAE899DE", "B", IntToText(lp_pIndex));
    TextExpressionSetToken("Param/Expression/lib_COTF_BAE899DE", "D", IntToText((lp_pIndex + 1)));
    TextExpressionSetToken("Param/Expression/lib_COTF_BAE899DE", "B", IntToText(lp_pIndex));
    TextExpressionSetToken("Param/Expression/lib_COTF_BAE899DE", "B", IntToText(lp_pIndex));
    TextExpressionSetToken("Param/Expression/lib_COTF_BAE899DE", "E", lp_pVariable);
    TextExpressionSetToken("Param/Expression/lib_COTF_BAE899DE", "B", IntToText(lp_pIndex));
    TextExpressionSetToken("Param/Expression/lib_COTF_BAE899DE", "B", IntToText(lp_pIndex));
    TextExpressionSetToken("Param/Expression/lib_COTF_BAE899DE", "B", IntToText(lp_pIndex));
    TextExpressionSetToken("Param/Expression/lib_COTF_BAE899DE", "B", IntToText(lp_pIndex));
    lv_vText = TextExpressionAssemble("Param/Expression/lib_COTF_BAE899DE");
    return lv_vText;
}

bool libCOTF_gf_UT_GL_IsSharedMissionScore (string lp_pScore) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_pScore == "MSFortressLifeRemaining") || (lp_pScore == "MSHarvestingBotLifeRemaining") || (lp_pScore == "MSLockOverloadTime") || (lp_pScore == "MSScientistHealthRemaining") || (lp_pScore == "MSShuttleUptime") || (lp_pScore == "MSTempleLifeRemaining") || (lp_pScore == "ShakurasTempleLife") || (lp_pScore == "MSThrasherUptime") || (lp_pScore == "MSTrainDuration") || (lp_pScore == "SlaynPush") || (lp_pScore == "BelshirEscortHarvesterDamage") || (lp_pScore == "UlnarOverload") || (lp_pScore == "CharThrasherLife"))) {
        return true;
    }
    else {
        return false;
    }
}

void libCOTF_gf_UT_GL_GenerateNewLayout () {
    // Variable Declarations
    text lv_vText;
    int lv_vA;
    string lv_vMap;
    string lv_vMasteryUpgradeInstance;
    string lv_vCommanderInstance;
    int lv_vMasteryIndex;
    string lv_vCurrentScore;

    // Automatic Variable Declarations
    string auto78646330_userType;
    int auto78646330_i;
    int autoE03792AD_ai;
    int autoE03792AD_ae;
    int autoE03792AD_ac;
    const int autoA69B359C_ae = 6;
    int autoA69B359C_var;
    string auto019B3113_userType;
    int auto019B3113_i;
    int auto86717741_catalog;
    int auto86717741_i;
    const int auto93B76D2F_ae = 2;
    int auto93B76D2F_var;
    string auto07B6EECF_userType;
    int auto07B6EECF_i;
    string autoAFC73862_userType;
    int autoAFC73862_i;

    // Variable Initialization
    lv_vText = StringToText("");

    // Implementation
    BankLoad("ReplayUILayouts", 1);
    TextExpressionSetToken("Param/Expression/lib_COTF_9B227150", "A", lv_vText);
    lv_vText = TextExpressionAssemble("Param/Expression/lib_COTF_9B227150");
    auto78646330_userType = "PlayerCommanders";
    auto78646330_i = 1;
    for ( ; auto78646330_i <= UserDataInstanceCount(auto78646330_userType) ; auto78646330_i += 1 ) {
        lv_vCommanderInstance = UserDataInstance(auto78646330_userType, auto78646330_i);
        TextExpressionSetToken("Param/Expression/lib_COTF_4587DF3A", "C", lv_vText);
        TextExpressionSetToken("Param/Expression/lib_COTF_4587DF3A", "A", UserDataGetText("PlayerCommanders", lv_vCommanderInstance, "Name", 1));
        TextExpressionSetToken("Param/Expression/lib_COTF_4587DF3A", "B", IntToText(UserDataGetInt("PlayerCommanders", lv_vCommanderInstance, "UniqueIndex", 1)));
        TextExpressionSetToken("Param/Expression/lib_COTF_4587DF3A", "A", UserDataGetText("PlayerCommanders", lv_vCommanderInstance, "Name", 1));
        lv_vText = TextExpressionAssemble("Param/Expression/lib_COTF_4587DF3A");
        lv_vMasteryIndex = 1;
        if ((lv_vCommanderInstance == "TerranMengsk")) {
            autoA69B359C_var = 1;
            for ( ; autoA69B359C_var <= autoA69B359C_ae; autoA69B359C_var += 1 ) {
                TextExpressionSetToken("Param/Expression/lib_COTF_C51FA040", "A", lv_vText);
                TextExpressionSetToken("Param/Expression/lib_COTF_C51FA040", "C", IntToText(lv_vMasteryIndex));
                TextExpressionSetToken("Param/Expression/lib_COTF_C51FA040", "B", IntToText(autoA69B359C_var));
                lv_vText = TextExpressionAssemble("Param/Expression/lib_COTF_C51FA040");
                lv_vMasteryIndex += 1;
            }
        }
        else {
            autoE03792AD_ai = 0;
            autoE03792AD_ae = UserDataInstanceCount("MasteryUpgrades")+1;
            while (autoE03792AD_ai < autoE03792AD_ae) {
                autoE03792AD_ai = autoE03792AD_ai+1;
                autoE03792AD_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", autoE03792AD_ai), "Category", 1);
                if( lv_vCommanderInstance == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", autoE03792AD_ai),"Commander",1) ) {
                    lv_vMasteryUpgradeInstance = UserDataInstance("MasteryUpgrades", autoE03792AD_ai);
                    TextExpressionSetToken("Param/Expression/lib_COTF_F92DBCAC", "A", lv_vText);
                    TextExpressionSetToken("Param/Expression/lib_COTF_F92DBCAC", "C", IntToText(lv_vMasteryIndex));
                    TextExpressionSetToken("Param/Expression/lib_COTF_F92DBCAC", "B", libCOTF_gf_UT_GL_MasteryButtonName(lv_vMasteryUpgradeInstance));
                    lv_vText = TextExpressionAssemble("Param/Expression/lib_COTF_F92DBCAC");
                    lv_vMasteryIndex += 1;
                }    
            }
        }
        TextExpressionSetToken("Param/Expression/lib_COTF_8FF1E874", "A", lv_vText);
        lv_vText = TextExpressionAssemble("Param/Expression/lib_COTF_8FF1E874");
    }
    TextExpressionSetToken("Param/Expression/lib_COTF_B76FE966", "A", lv_vText);
    lv_vText = TextExpressionAssemble("Param/Expression/lib_COTF_B76FE966");
    auto019B3113_userType = "PlayerCommanders";
    auto019B3113_i = 1;
    for ( ; auto019B3113_i <= UserDataInstanceCount(auto019B3113_userType) ; auto019B3113_i += 1 ) {
        lv_vCommanderInstance = UserDataInstance(auto019B3113_userType, auto019B3113_i);
        if ((lv_vCommanderInstance != "TerranTychus")) {
            auto93B76D2F_var = 1;
            for ( ; auto93B76D2F_var <= auto93B76D2F_ae; auto93B76D2F_var += 1 ) {
                lv_vCurrentScore = libCOTF_gf_UT_GL_GetCommanderScore(auto93B76D2F_var, lv_vCommanderInstance);
                if ((lv_vCurrentScore != null) && (libCOTF_gf_UT_GL_ScoreUsed(lv_vCurrentScore) == false)) {
                    lv_vA += 1;
                    lv_vText = libCOTF_gf_UT_GL_AddScoreValueToText(lv_vText, lv_vCurrentScore, lv_vA);
                    libCOTF_gv_uT_GL_ScoresUsed[lv_vA] = lv_vCurrentScore;
                }

            }
            lv_vCurrentScore = "Devouroffcooldown";
            if ((lv_vCommanderInstance == "ZergDehaka") && (libCOTF_gf_UT_GL_ScoreUsed(lv_vCurrentScore) == false)) {
                lv_vA += 1;
                lv_vText = libCOTF_gf_UT_GL_AddScoreValueToText(lv_vText, lv_vCurrentScore, lv_vA);
                libCOTF_gv_uT_GL_ScoresUsed[lv_vA] = lv_vCurrentScore;
            }

            lv_vCurrentScore = "DamageDealtbyContaminatedStrike";
            if ((lv_vCommanderInstance == "TerranMengsk") && (libCOTF_gf_UT_GL_ScoreUsed(lv_vCurrentScore) == false)) {
                lv_vA += 1;
                lv_vText = libCOTF_gf_UT_GL_AddScoreValueToText(lv_vText, lv_vCurrentScore, lv_vA);
                libCOTF_gv_uT_GL_ScoresUsed[lv_vA] = lv_vCurrentScore;
            }

        }
        else {
            auto86717741_catalog = c_gameCatalogScoreValue;
            auto86717741_i = 1;
            for ( ; auto86717741_i <= CatalogEntryCount(c_gameCatalogScoreValue) ; auto86717741_i += 1 ) {
                lv_vCurrentScore = CatalogEntryGet(auto86717741_catalog, auto86717741_i);
                if ((StringSub((lv_vCurrentScore), 1, 6) == "Tychus")) {
                    if ((lv_vCurrentScore != null) && (libCOTF_gf_UT_GL_ScoreUsed(lv_vCurrentScore) == false)) {
                        lv_vA += 1;
                        lv_vText = libCOTF_gf_UT_GL_AddScoreValueToText(lv_vText, lv_vCurrentScore, lv_vA);
                        libCOTF_gv_uT_GL_ScoresUsed[lv_vA] = lv_vCurrentScore;
                    }

                }

            }
        }
    }
    auto07B6EECF_userType = "Maps";
    auto07B6EECF_i = 1;
    for ( ; auto07B6EECF_i <= UserDataInstanceCount(auto07B6EECF_userType) ; auto07B6EECF_i += 1 ) {
        lv_vMap = UserDataInstance(auto07B6EECF_userType, auto07B6EECF_i);
        lv_vCurrentScore = UserDataGetGameLink("Maps", lv_vMap, "ScoreStatistic", 1);
        if ((lv_vCurrentScore != null) && (libCOTF_gf_UT_GL_ScoreUsed(lv_vCurrentScore) == false) && (libCOTF_gf_UT_GL_IsSharedMissionScore(lv_vCurrentScore) == false)) {
            lv_vA += 1;
            lv_vText = libCOTF_gf_UT_GL_AddScoreValueToText(lv_vText, lv_vCurrentScore, lv_vA);
            libCOTF_gv_uT_GL_ScoresUsed[lv_vA] = lv_vCurrentScore;
        }

    }
    lv_vA += 1;
    TextExpressionSetToken("Param/Expression/lib_COTF_4728C6B3", "A", lv_vText);
    TextExpressionSetToken("Param/Expression/lib_COTF_4728C6B3", "B", IntToText(lv_vA));
    lv_vText = TextExpressionAssemble("Param/Expression/lib_COTF_4728C6B3");
    BankValueSetFromText(BankLastCreated(), "A", "PlayerScores", lv_vText);
    lv_vText = StringToText("");
    lv_vA = 0;
    autoAFC73862_userType = "Maps";
    autoAFC73862_i = 1;
    for ( ; autoAFC73862_i <= UserDataInstanceCount(autoAFC73862_userType) ; autoAFC73862_i += 1 ) {
        lv_vMap = UserDataInstance(autoAFC73862_userType, autoAFC73862_i);
        lv_vCurrentScore = UserDataGetGameLink("Maps", lv_vMap, "ScoreStatistic", 1);
        if ((lv_vCurrentScore != null) && (libCOTF_gf_UT_GL_ScoreUsed(lv_vCurrentScore) == false) && (libCOTF_gf_UT_GL_IsSharedMissionScore(lv_vCurrentScore) == true)) {
            lv_vA += 1;
            lv_vText = libCOTF_gf_UT_GL_AddScoreValueToText(lv_vText, lv_vCurrentScore, lv_vA);
            libCOTF_gv_uT_GL_ScoresUsed[lv_vA] = lv_vCurrentScore;
        }

    }
    lv_vA += 1;
    lv_vText = libCOTF_gf_UT_GL_AddVariableValueToText(lv_vText, StringExternal("Param/Value/lib_COTF_C332D139"), StringExternal("Param/Value/lib_COTF_FA88E2E9"), lv_vA);
    lv_vA += 1;
    lv_vText = libCOTF_gf_UT_GL_AddVariableValueToText(lv_vText, StringExternal("Param/Value/lib_COTF_A8A7FFE7"), StringExternal("Param/Value/lib_COTF_3391890D"), lv_vA);
    lv_vA += 1;
    lv_vText = libCOTF_gf_UT_GL_AddVariableValueToText(lv_vText, StringExternal("Param/Value/lib_COTF_8915030A"), StringExternal("Param/Value/lib_COTF_31069682"), lv_vA);
    lv_vA += 1;
    lv_vText = libCOTF_gf_UT_GL_AddVariableValueToText(lv_vText, StringExternal("Param/Value/lib_COTF_E823830F"), StringExternal("Param/Value/lib_COTF_FF685625"), lv_vA);
    lv_vA += 1;
    TextExpressionSetToken("Param/Expression/lib_COTF_AD9DABCF", "A", lv_vText);
    TextExpressionSetToken("Param/Expression/lib_COTF_AD9DABCF", "B", IntToText(lv_vA));
    lv_vText = TextExpressionAssemble("Param/Expression/lib_COTF_AD9DABCF");
    BankValueSetFromText(BankLastCreated(), "A", "SharedMissionMutatorScores", lv_vText);
    BankSave(BankLastCreated());
}

void libCOTF_gf_HistogramHorizontalCreate (color lp_pColor, structref<libCOTF_gs_HistogramData> lp_pData, bool lp_pShowCounts, bool lp_pBackground, int lp_pCenter, int lp_pVertical, bool lp_pPercent, int lp_pTotal) {
    // Variable Declarations
    const int lv_vPadding = 50;
    const int lv_vInnerSizeX = 1400;
    const int lv_vInnerSizeY = 1000;
    const int lv_vBarPadding = 1;
    int lv_vEntries;
    int lv_vBarSize;
    int lv_vIter;
    int lv_vMaxDataValue;
    fixed lv_vBarYCoef;
    int lv_vX_OffsetIter;
    int lv_vA;
    int lv_vCycle;
    int lv_vSum;

    // Automatic Variable Declarations
    const int autoE284DE37_ae = libCOTF_gv_maxHistogramEntries;
    const int autoE284DE37_ai = 1;
    const int autoCAA5C8E9_ae = libCOTF_gv_maxHistogramEntries;
    const int autoCAA5C8E9_ai = 1;

    // Variable Initialization
    lv_vSum = 100;

    // Implementation
    DialogCreate(100, 100, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    if ((lp_pBackground == true)) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    }

    lv_vSum = 0;
    lv_vIter = 1;
    for ( ; ( (autoE284DE37_ai >= 0 && lv_vIter <= autoE284DE37_ae) || (autoE284DE37_ai < 0 && lv_vIter >= autoE284DE37_ae) ) ; lv_vIter += autoE284DE37_ai ) {
        if ((lp_pData.lv_labels[lv_vIter] != null) && (lp_pData.lv_data[lv_vIter] >= 0)) {
            lv_vEntries += 1;
            lv_vSum += lp_pData.lv_data[lv_vEntries];
            if ((lp_pData.lv_data[lv_vIter] > lv_vMaxDataValue)) {
                lv_vMaxDataValue = lp_pData.lv_data[lv_vIter];
            }

        }

    }
    if ((lp_pTotal >= 1)) {
        lv_vSum = lp_pTotal;
    }

    if ((lv_vEntries >= 50)) {
        lv_vBarSize = ((lv_vInnerSizeX/lv_vEntries) - lv_vBarPadding);
    }
    else {
        lv_vBarSize = 26;
    }
    lv_vBarYCoef = ((IntToFixed(lv_vInnerSizeY) - 400)/IntToFixed(lv_vMaxDataValue));
    if ((lv_vEntries <= 10)) {
        lv_vBarYCoef /= 1.5;
    }

    lv_vIter = 1;
    for ( ; ( (autoCAA5C8E9_ai >= 0 && lv_vIter <= autoCAA5C8E9_ae) || (autoCAA5C8E9_ai < 0 && lv_vIter >= autoCAA5C8E9_ae) ) ; lv_vIter += autoCAA5C8E9_ai ) {
        if ((lp_pData.lv_data[lv_vIter] >= 0) && (lp_pData.lv_labels[lv_vIter] != null)) {
            lv_vA += 1;
            lv_vX_OffsetIter = ((lv_vBarSize+lv_vBarPadding)*(lv_vA)-((lv_vBarSize+lv_vBarPadding)*lv_vEntries/2));
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_vBarSize, FixedToInt((IntToFixed(lp_pData.lv_data[lv_vIter])*lv_vBarYCoef)), c_anchorBottom, (lv_vX_OffsetIter + lp_pCenter), (lv_vInnerSizeY/2 - 53 + lp_pVertical), StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, lp_pColor, c_triggerBlendModeNormal);
            TextExpressionSetToken("Param/Expression/lib_COTF_96400500", "A", lp_pData.lv_labels[lv_vIter]);
            TextExpressionSetToken("Param/Expression/lib_COTF_96400500", "B", IntToText(lp_pData.lv_data[lv_vIter]));
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_COTF_96400500"), PlayerGroupAll());
            if (lv_vCycle >= 2) {
                lv_vCycle = 1;
            }
            else {
                lv_vCycle = lv_vCycle + 1;
            }
            if ((lv_vCycle == 1)) {
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 15.0);
            }

            DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "HistogramTemplates/LabelPanelTemplate");
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, (lv_vX_OffsetIter + 125 + lp_pCenter), (lp_pVertical-320));
            DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "LabelTemplate");
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_pData.lv_labels[lv_vIter], PlayerGroupAll());
            if ((lp_pShowCounts == true)) {
                DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "HistogramTemplates/CountPanelTemplate");
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, (lv_vX_OffsetIter - 2 + lp_pCenter), FixedToInt((IntToFixed(lp_pData.lv_data[lv_vIter])*lv_vBarYCoef + 52 + IntToFixed(lp_pVertical))));
                DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "CountTemplate");
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HistogramCount", PlayerGroupAll());
                if ((lp_pPercent == true)) {
                    TextExpressionSetToken("Param/Expression/lib_COTF_EF379DBD", "A", FixedToText((IntToFixed(lp_pData.lv_data[lv_vIter])/IntToFixed((lv_vSum / 100))), 2));
                    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_COTF_EF379DBD"), PlayerGroupAll());
                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(78.43, 78.43, 78.43), PlayerGroupAll());
                }
                else {
                    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(lp_pData.lv_data[lv_vIter]), PlayerGroupAll());
                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(37.25, 37.25, 37.25), PlayerGroupAll());
                }
            }

        }

    }
}

void libCOTF_gf_HistogramVerticalCreate (color lp_pColor, structref<libCOTF_gs_HistogramData> lp_pData, bool lp_pShowCounts, bool lp_pBackground, int lp_pCenter, int lp_pTotal, bool lp_pPercent) {
    // Variable Declarations
    const int lv_vPadding = 50;
    const int lv_vInnerSizeY = 1000;
    const int lv_vInnerSizeX = 1200;
    const int lv_vBarPadding = 1;
    int lv_vEntries;
    int lv_vBarSize;
    int lv_vIter;
    int lv_vMaxDataValue;
    fixed lv_vBarXCoef;
    int lv_vY_OffsetIter;
    int lv_vA;
    int lv_vCycle;
    int lv_vSum;

    // Automatic Variable Declarations
    const int auto741E9714_ae = libCOTF_gv_maxHistogramEntries;
    const int auto741E9714_ai = 1;
    const int auto9B7AFB13_ae = libCOTF_gv_maxHistogramEntries;
    const int auto9B7AFB13_ai = 1;

    // Variable Initialization
    lv_vSum = 100;

    // Implementation
    DialogCreate(100, 100, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    if ((lp_pBackground == true)) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    }

    lv_vSum = 0;
    lv_vIter = 1;
    for ( ; ( (auto741E9714_ai >= 0 && lv_vIter <= auto741E9714_ae) || (auto741E9714_ai < 0 && lv_vIter >= auto741E9714_ae) ) ; lv_vIter += auto741E9714_ai ) {
        if ((lp_pData.lv_labels[lv_vIter] != null) && (lp_pData.lv_data[lv_vIter] >= 0)) {
            lv_vEntries += 1;
            lv_vSum += lp_pData.lv_data[lv_vEntries];
            if ((lp_pData.lv_data[lv_vIter] > lv_vMaxDataValue)) {
                lv_vMaxDataValue = lp_pData.lv_data[lv_vIter];
            }

        }

    }
    if ((lp_pTotal >= 1)) {
        lv_vSum = lp_pTotal;
    }

    if ((lv_vEntries >= 50)) {
        lv_vBarSize = ((lv_vInnerSizeY/lv_vEntries) - lv_vBarPadding);
    }
    else {
        lv_vBarSize = 26;
    }
    lv_vBarXCoef = ((IntToFixed(lv_vInnerSizeX) - 400)/IntToFixed(lv_vMaxDataValue));
    if ((lv_vEntries <= 10)) {
        lv_vBarXCoef /= 1.5;
    }

    lv_vIter = 1;
    for ( ; ( (auto9B7AFB13_ai >= 0 && lv_vIter <= auto9B7AFB13_ae) || (auto9B7AFB13_ai < 0 && lv_vIter >= auto9B7AFB13_ae) ) ; lv_vIter += auto9B7AFB13_ai ) {
        if ((lp_pData.lv_data[lv_vIter] >= 0) && (lp_pData.lv_labels[lv_vIter] != null)) {
            lv_vA += 1;
            lv_vY_OffsetIter = ((lv_vBarSize+lv_vBarPadding)*(lv_vA)-((lv_vBarSize+lv_vBarPadding)*lv_vEntries/2));
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), FixedToInt((IntToFixed(lp_pData.lv_data[lv_vIter])*lv_vBarXCoef)), (lv_vBarSize), c_anchorRight, (lv_vInnerSizeX/2 + lp_pCenter), lv_vY_OffsetIter, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, lp_pColor, c_triggerBlendModeNormal);
            TextExpressionSetToken("Param/Expression/lib_COTF_EB2ED7DA", "A", lp_pData.lv_labels[lv_vIter]);
            TextExpressionSetToken("Param/Expression/lib_COTF_EB2ED7DA", "B", IntToText(lp_pData.lv_data[lv_vIter]));
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_COTF_EB2ED7DA"), PlayerGroupAll());
            if (lv_vCycle >= 2) {
                lv_vCycle = 1;
            }
            else {
                lv_vCycle = lv_vCycle + 1;
            }
            if ((lv_vCycle == 1)) {
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
            }

            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorRight, (lv_vInnerSizeX/2 + lp_pCenter - 405), (lv_vY_OffsetIter), lp_pData.lv_labels[lv_vIter], ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HistogramLabel", PlayerGroupAll());
            if ((lp_pShowCounts == true)) {
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorRight, FixedToInt((IntToFixed(lp_pData.lv_data[lv_vIter])*lv_vBarXCoef + IntToFixed(lv_vInnerSizeX)/2 + lp_pCenter + 2)), (lv_vY_OffsetIter), StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HistogramCount", PlayerGroupAll());
                if ((lp_pPercent == true)) {
                    TextExpressionSetToken("Param/Expression/lib_COTF_6FB7CA74", "A", FixedToText((IntToFixed(lp_pData.lv_data[lv_vIter])/IntToFixed((lv_vSum / 100))), 2));
                    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_COTF_6FB7CA74"), PlayerGroupAll());
                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(78.43, 78.43, 78.43), PlayerGroupAll());
                }
                else {
                    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(lp_pData.lv_data[lv_vIter]), PlayerGroupAll());
                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(37.25, 37.25, 37.25), PlayerGroupAll());
                }
            }

        }

    }
}

void libCOTF_gf_UT_SignalMutators () {
    // Variable Declarations
    string lv_vMutator;

    // Automatic Variable Declarations
    string auto09B7860F_userType;
    int auto09B7860F_i;

    // Variable Initialization

    // Implementation
    auto09B7860F_userType = "Mutators";
    auto09B7860F_i = 1;
    for ( ; auto09B7860F_i <= UserDataInstanceCount(auto09B7860F_userType) ; auto09B7860F_i += 1 ) {
        lv_vMutator = UserDataInstance(auto09B7860F_userType, auto09B7860F_i);
        if ((libCOMU_gf_MutatorIsEnabled(lv_vMutator) == true)) {
            TechTreeUpgradeAddLevel(0, (("mutatorinfo_" + (lv_vMutator))), 1);
        }

    }
}

text libCOTF_gf_UT_RealSecondsIntoTimeFormat (fixed lp_pTimeSeconds) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_pTimeSeconds >= 3600.0)) {
        TextExpressionSetToken("Param/Expression/lib_COTF_86F50025", "C", IntToText(TruncI((lp_pTimeSeconds/3600))));
        TextExpressionSetToken("Param/Expression/lib_COTF_86F50025", "A", libCOTF_gf_UT_AddStringsInfronttext(2, "0", TruncI((ModF(lp_pTimeSeconds, 3600.0)/60))));
        TextExpressionSetToken("Param/Expression/lib_COTF_86F50025", "B", libCOTF_gf_UT_AddStringsInfronttext(2, "0", FixedToInt(ModF(lp_pTimeSeconds, 60.0))));
        return TextExpressionAssemble("Param/Expression/lib_COTF_86F50025");
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_COTF_9D4CE8B1", "A", IntToText(TruncI((lp_pTimeSeconds/60))));
        TextExpressionSetToken("Param/Expression/lib_COTF_9D4CE8B1", "B", libCOTF_gf_UT_AddStringsInfronttext(2, "0", FixedToInt(ModF(lp_pTimeSeconds, 60.0))));
        return TextExpressionAssemble("Param/Expression/lib_COTF_9D4CE8B1");
    }
}

unit libCOTF_gf_CM_PlayerGetGlobalCaster2 (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cM_GlobalCasterUnit[lp_player];
}

trigger auto_libCOTF_gf_UT_FixAISupply_Trigger = null;
int auto_libCOTF_gf_UT_FixAISupply_lp_pPlayer;

void libCOTF_gf_UT_FixAISupply (int lp_pPlayer) {
    auto_libCOTF_gf_UT_FixAISupply_lp_pPlayer = lp_pPlayer;

    if (auto_libCOTF_gf_UT_FixAISupply_Trigger == null) {
        auto_libCOTF_gf_UT_FixAISupply_Trigger = TriggerCreate("auto_libCOTF_gf_UT_FixAISupply_TriggerFunc");
    }

    TriggerExecute(auto_libCOTF_gf_UT_FixAISupply_Trigger, false, false);
}

bool auto_libCOTF_gf_UT_FixAISupply_TriggerFunc (bool testConds, bool runActions) {
    int lp_pPlayer = auto_libCOTF_gf_UT_FixAISupply_lp_pPlayer;

    // Variable Declarations
    int lv_vLimit;

    // Automatic Variable Declarations
    string auto801DBF82_val;

    // Variable Initialization

    // Implementation
    Wait(1.0, c_timeGame);
    if (((PlayerStatus(lp_pPlayer) == c_playerStatusActive) || (libCOMU_gf_MutatorIsEnabled("SharedSupply") == true))) {
        return true;
    }

    auto801DBF82_val = libCOOC_gf_ActiveCommanderForPlayer(lp_pPlayer);
    if (auto801DBF82_val == "TerranNova") {
        lv_vLimit = 100;
    }
    else if (auto801DBF82_val == "ZergDehaka") {
        lv_vLimit = 200;
    }
    else if (auto801DBF82_val == "TerranTychus") {
        lv_vLimit = 100;
    }
    else if (auto801DBF82_val == "ProtossZeratul") {
        lv_vLimit = 100;
    }
    else if (auto801DBF82_val == "ProtossArtanis") {
        if ((TechTreeUpgradeCount(lp_pPlayer, "ArtanisStartingSupply", c_techCountCompleteOnly) >= 1)) {
            lv_vLimit = 200;
        }

    }
    else {
        return true;
    }
    PlayerModifyPropertyInt(lp_pPlayer, c_playerPropSuppliesLimit, c_playerPropOperSetTo, lv_vLimit);
    PlayerModifyPropertyInt(lp_pPlayer, c_playerPropSuppliesMade, c_playerPropOperSetTo, lv_vLimit);
    return true;
}

trigger auto_libCOTF_gf_UT_FixConsoleSkins_Trigger = null;

void libCOTF_gf_UT_FixConsoleSkins () {
    if (auto_libCOTF_gf_UT_FixConsoleSkins_Trigger == null) {
        auto_libCOTF_gf_UT_FixConsoleSkins_Trigger = TriggerCreate("auto_libCOTF_gf_UT_FixConsoleSkins_TriggerFunc");
    }

    TriggerExecute(auto_libCOTF_gf_UT_FixConsoleSkins_Trigger, false, false);
}

bool auto_libCOTF_gf_UT_FixConsoleSkins_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoDFD182EA_g;
    int autoDFD182EA_var;

    // Implementation
    Wait(0.0, c_timeGame);
    autoDFD182EA_g = libCOTF_gf_UT_ActiveCommanderPlayers();
    autoDFD182EA_var = -1;
    while (true) {
        autoDFD182EA_var = PlayerGroupNextPlayer(autoDFD182EA_g, autoDFD182EA_var);
        if (autoDFD182EA_var < 0) { break; }
        PlayerSetConsoleSkin(autoDFD182EA_var, UserDataGetGameLink("PlayerCommanders", libCOOC_gf_ActiveCommanderForPlayer(autoDFD182EA_var), "DefaultConsoleSkin", 1));
    }
    return true;
}

void libCOTF_gf_UT_CommanderHide (int lp_pCommanderMax) {
    // Variable Declarations
    int lv_commanderIndex;
    int lv_commanderButtons;

    // Automatic Variable Declarations
    const int autoF0AF3BD2_ae = libCOUI_gv_cUC_COMMSELECTMAX;
    const int autoF0AF3BD2_ai = 1;

    // Variable Initialization
    lv_commanderButtons = c_invalidDialogControlId;

    // Implementation
    DialogControlHookup(libCOUI_gv_cU_CommanderPanel, c_triggerControlTypePanel, "CommanderButtons");
    lv_commanderButtons = DialogControlLastCreated();
    lv_commanderIndex = (lp_pCommanderMax + 1);
    for ( ; ( (autoF0AF3BD2_ai >= 0 && lv_commanderIndex <= autoF0AF3BD2_ae) || (autoF0AF3BD2_ai < 0 && lv_commanderIndex >= autoF0AF3BD2_ae) ) ; lv_commanderIndex += autoF0AF3BD2_ai ) {
        DialogControlHookup(lv_commanderButtons, c_triggerControlTypeButton, "CommanderButton" + IntToString(lv_commanderIndex));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(libCOUI_gv_cU_CommanderButton[lv_commanderIndex], c_triggerControlTypePortrait, "CommanderPortrait");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(libCOUI_gv_cU_CommanderButton[lv_commanderIndex], c_triggerControlTypeLabel, "CommanderName");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(libCOUI_gv_cU_CommanderButton[lv_commanderIndex], c_triggerControlTypeImage, "SelectionBorder");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
}

string libCOTF_gf_UT_CommanderLoadingImage (string lp_pCommander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetImagePath("PlayerCommanders", libCOOC_gf_CC_CommanderUserInstance(lp_pCommander), "LoadingImage", 1);
}

int libCOTF_gf_UT_OtherPlayer (int lp_pPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_pPlayer == 1)) {
        return 2;
    }
    else if ((lp_pPlayer == 2)) {
        return 1;
    }
    return lp_pPlayer;
}

string libCOTF_gf_UT_FormatInteger (int lp_pNumber, string lp_pDividingSymbol) {
    int init_i;

    // Variable Declarations
    int lv_vNumber;
    int[4] lv_vINT;
    string[4] lv_vSTRING;
    string lv_vSign;
    string lv_vDivingSymbol;
    int lv_vA;
    bool lv_vFirst;

    // Automatic Variable Declarations
    const int auto040F9E4F_ae = 3;
    const int auto040F9E4F_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_vSTRING[init_i] = "";
    }
    lv_vSign = "";
    lv_vDivingSymbol = "";
    lv_vFirst = true;

    // Implementation
    lv_vNumber = AbsI(lp_pNumber);
    if ((lp_pNumber != lv_vNumber)) {
        lv_vSign = "-";
    }

    lv_vINT[0] = (lv_vNumber / 1000000000);
    lv_vNumber -= (lv_vINT[0] * 1000000000);
    lv_vINT[1] = (lv_vNumber / 1000000);
    lv_vNumber -= (lv_vINT[1] * 1000000);
    lv_vINT[2] = (lv_vNumber / 1000);
    lv_vNumber -= (lv_vINT[2] * 1000);
    lv_vINT[3] = lv_vNumber;
    lv_vDivingSymbol = lp_pDividingSymbol;
    lv_vA = 0;
    for ( ; ( (auto040F9E4F_ai >= 0 && lv_vA <= auto040F9E4F_ae) || (auto040F9E4F_ai < 0 && lv_vA >= auto040F9E4F_ae) ) ; lv_vA += auto040F9E4F_ai ) {
        if ((lv_vA == 3)) {
            lv_vDivingSymbol = "";
        }

        if ((lv_vINT[lv_vA] != 0) && (lv_vFirst == true)) {
            lv_vFirst = false;
            lv_vSTRING[lv_vA] = (IntToString(lv_vINT[lv_vA]) + lv_vDivingSymbol);
        }
        else {
            if ((lv_vINT[lv_vA] >= 100)) {
                lv_vSTRING[lv_vA] = (IntToString(lv_vINT[lv_vA]) + lv_vDivingSymbol);
            }
            else {
                if ((lv_vINT[lv_vA] >= 10)) {
                    lv_vSTRING[lv_vA] = ("0" + IntToString(lv_vINT[lv_vA]) + lv_vDivingSymbol);
                }
                else {
                    if ((lv_vINT[lv_vA] == 0) && (lv_vFirst == true)) {
                        lv_vSTRING[lv_vA] = "";
                    }
                    else {
                        lv_vSTRING[lv_vA] = ("00" + IntToString(lv_vINT[lv_vA]) + lv_vDivingSymbol);
                    }
                }
            }
        }
    }
    return (lv_vSign + lv_vSTRING[0] + lv_vSTRING[1] + lv_vSTRING[2] + lv_vSTRING[3]);
}

text libCOTF_gf_UT_AddStringsInfronttext (int lp_pDigits, string lp_pString, int lp_pInputNumber) {
    // Variable Declarations
    string lv_vString;

    // Automatic Variable Declarations
    int auto8F2951C8_n;
    int auto8F2951C8_i;

    // Variable Initialization
    lv_vString = IntToString(lp_pInputNumber);

    // Implementation
    auto8F2951C8_n = (lp_pDigits - StringLength(lv_vString));
    for (auto8F2951C8_i = 1; auto8F2951C8_i <= auto8F2951C8_n; auto8F2951C8_i += 1) {
        lv_vString = (lp_pString + lv_vString);
    }
    return StringToText(lv_vString);
}

string libCOTF_gf_UT_AddStringsInfront (int lp_pDigits, string lp_pString, fixed lp_pInputReal, int lp_pPrecision) {
    // Variable Declarations
    string lv_vString;

    // Automatic Variable Declarations
    int autoEFF43CE2_n;
    int autoEFF43CE2_i;

    // Variable Initialization
    lv_vString = FixedToString(lp_pInputReal, lp_pPrecision);

    // Implementation
    autoEFF43CE2_n = (lp_pDigits - StringLength(lv_vString));
    for (autoEFF43CE2_i = 1; autoEFF43CE2_i <= autoEFF43CE2_n; autoEFF43CE2_i += 1) {
        lv_vString = (lp_pString + lv_vString);
    }
    return lv_vString;
}

int libCOTF_gf_UT_3StringsToInteger (string lp_pString) {
    // Variable Declarations
    string lv_v1;
    string lv_v2;
    string lv_v3;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_v1 = StringSub(lp_pString, 1, 1);
    lv_v2 = StringSub(lp_pString, 2, 2);
    lv_v3 = StringSub(lp_pString, 3, 3);

    // Implementation
    return (libCOTF_gf_UT_1StringToInteger(lv_v1)*10000 + libCOTF_gf_UT_1StringToInteger(lv_v2)*100 + libCOTF_gf_UT_1StringToInteger(lv_v3));
}

int libCOTF_gf_UT_1StringToInteger (string lp_pLetter) {
    // Automatic Variable Declarations
    string auto70A26ECF_val;

    // Implementation
    auto70A26ECF_val = lp_pLetter;
    if (auto70A26ECF_val == "a") {
        return 10;
    }
    else if (auto70A26ECF_val == "b") {
        return 11;
    }
    else if (auto70A26ECF_val == "c") {
        return 12;
    }
    else if (auto70A26ECF_val == "d") {
        return 13;
    }
    else if (auto70A26ECF_val == "e") {
        return 14;
    }
    else if (auto70A26ECF_val == "f") {
        return 15;
    }
    else if (auto70A26ECF_val == "g") {
        return 16;
    }
    else if (auto70A26ECF_val == "h") {
        return 17;
    }
    else if (auto70A26ECF_val == "i") {
        return 18;
    }
    else if (auto70A26ECF_val == "j") {
        return 19;
    }
    else if (auto70A26ECF_val == "k") {
        return 20;
    }
    else if (auto70A26ECF_val == "l") {
        return 21;
    }
    else if (auto70A26ECF_val == "m") {
        return 22;
    }
    else if (auto70A26ECF_val == "n") {
        return 23;
    }
    else if (auto70A26ECF_val == "o") {
        return 24;
    }
    else if (auto70A26ECF_val == "p") {
        return 25;
    }
    else if (auto70A26ECF_val == "q") {
        return 26;
    }
    else if (auto70A26ECF_val == "r") {
        return 27;
    }
    else if (auto70A26ECF_val == "s") {
        return 28;
    }
    else if (auto70A26ECF_val == "t") {
        return 29;
    }
    else if (auto70A26ECF_val == "u") {
        return 30;
    }
    else if (auto70A26ECF_val == "v") {
        return 31;
    }
    else if (auto70A26ECF_val == "w") {
        return 32;
    }
    else if (auto70A26ECF_val == "x") {
        return 33;
    }
    else if (auto70A26ECF_val == "y") {
        return 34;
    }
    else if (auto70A26ECF_val == "z") {
        return 35;
    }
    else {
        return StringToInt(lp_pLetter);
    }
}

void libCOTF_gf_UT_DialogCounting (int lp_pFrom, int lp_pTo, fixed lp_pTime, int lp_pDialogLabel, text lp_pTextBefore, text lp_pTextAfter, playergroup lp_pPlayers) {
    // Variable Declarations
    const fixed lv_vTimeInterval = 0.125;
    int lv_vDiff;
    int lv_vCurrent;
    int lv_vSteps;
    int lv_vChange;

    // Automatic Variable Declarations
    int auto381FB256_n;
    int auto381FB256_i;

    // Variable Initialization
    lv_vDiff = AbsI((lp_pFrom - lp_pTo));
    lv_vCurrent = lp_pFrom;
    lv_vSteps = FixedToInt((lp_pTime / lv_vTimeInterval));
    lv_vChange = (lv_vDiff / lv_vSteps);

    // Implementation
    if ((lp_pTo == lp_pFrom)) {
        return ;
    }

    if ((lp_pTo < lp_pFrom)) {
        lv_vChange *= -1;
    }

    SoundPlayForPlayer(SoundLink("UI_BNet_ProgressionCounter_Loop1", -1), c_maxPlayers, lp_pPlayers, 100.0, 0.0);
    auto381FB256_n = lv_vSteps;
    for (auto381FB256_i = 1; auto381FB256_i <= auto381FB256_n; auto381FB256_i += 1) {
        Wait(lv_vTimeInterval, c_timeGame);
        lv_vCurrent += lv_vChange;
        TextExpressionSetToken("Param/Expression/lib_COTF_C8278B35", "A", lp_pTextBefore);
        TextExpressionSetToken("Param/Expression/lib_COTF_C8278B35", "B", IntToText(lv_vCurrent));
        TextExpressionSetToken("Param/Expression/lib_COTF_C8278B35", "C", lp_pTextAfter);
        libNtve_gf_SetDialogItemText(lp_pDialogLabel, TextExpressionAssemble("Param/Expression/lib_COTF_C8278B35"), PlayerGroupAll());
    }
    SoundStop(SoundLastPlayed(), false);
    TextExpressionSetToken("Param/Expression/lib_COTF_5C6CAB9D", "A", lp_pTextBefore);
    TextExpressionSetToken("Param/Expression/lib_COTF_5C6CAB9D", "B", IntToText(lp_pTo));
    TextExpressionSetToken("Param/Expression/lib_COTF_5C6CAB9D", "C", lp_pTextAfter);
    libNtve_gf_SetDialogItemText(lp_pDialogLabel, TextExpressionAssemble("Param/Expression/lib_COTF_5C6CAB9D"), PlayerGroupAll());
}

playergroup libCOTF_gf_UT_ActiveCommanderPlayers () {
    // Variable Declarations
    playergroup lv_vPG;

    // Automatic Variable Declarations
    const int autoB586B254_ae = 2;
    int autoB586B254_var;

    // Variable Initialization
    lv_vPG = PlayerGroupEmpty();

    // Implementation
    autoB586B254_var = 1;
    for ( ; autoB586B254_var <= autoB586B254_ae; autoB586B254_var += 1 ) {
        if ((PlayerStatus(autoB586B254_var) == c_playerStatusActive)) {
            PlayerGroupAdd(lv_vPG, autoB586B254_var);
        }

    }
    return lv_vPG;
}

int libCOTF_gf_UT_SingleHexToInt (string lp_pString) {
    // Variable Declarations
    int lv_vOutput;

    // Automatic Variable Declarations
    string autoE2D215C7_val;

    // Variable Initialization

    // Implementation
    autoE2D215C7_val = lp_pString;
    if (autoE2D215C7_val == "A") {
        lv_vOutput += 10;
    }
    else if (autoE2D215C7_val == "a") {
        lv_vOutput += 10;
    }
    else if (autoE2D215C7_val == "B") {
        lv_vOutput += 11;
    }
    else if (autoE2D215C7_val == "b") {
        lv_vOutput += 11;
    }
    else if (autoE2D215C7_val == "C") {
        lv_vOutput += 12;
    }
    else if (autoE2D215C7_val == "c") {
        lv_vOutput += 12;
    }
    else if (autoE2D215C7_val == "D") {
        lv_vOutput += 13;
    }
    else if (autoE2D215C7_val == "d") {
        lv_vOutput += 13;
    }
    else if (autoE2D215C7_val == "E") {
        lv_vOutput += 14;
    }
    else if (autoE2D215C7_val == "e") {
        lv_vOutput += 14;
    }
    else if (autoE2D215C7_val == "F") {
        lv_vOutput += 15;
    }
    else if (autoE2D215C7_val == "f") {
        lv_vOutput += 15;
    }
    else {
        lv_vOutput += StringToInt(lp_pString);
    }
    return lv_vOutput;
}

int libCOTF_gf_UT_HexToInt (string lp_pString) {
    // Variable Declarations
    int lv_vOutput;
    int lv_vMult;
    int lv_vIter;

    // Automatic Variable Declarations
    const int auto1579B8C5_ae = 1;
    const int auto1579B8C5_ai = -1;

    // Variable Initialization
    lv_vMult = 1;

    // Implementation
    lv_vIter = StringLength(lp_pString);
    for ( ; ( (auto1579B8C5_ai >= 0 && lv_vIter <= auto1579B8C5_ae) || (auto1579B8C5_ai < 0 && lv_vIter >= auto1579B8C5_ae) ) ; lv_vIter += auto1579B8C5_ai ) {
        lv_vOutput += (libCOTF_gf_UT_SingleHexToInt(StringSub(lp_pString, lv_vIter, lv_vIter))*lv_vMult);
        lv_vMult *= 16;
    }
    return lv_vOutput;
}

color libCOTF_gf_UT_HexToColor (string lp_pString) {
    // Automatic Variable Declarations
    // Implementation
    return Color((libCOTF_gf_UT_HexToInt(StringSub(lp_pString, 2, 3))/2.55), (libCOTF_gf_UT_HexToInt(StringSub(lp_pString, 4, 5))/2.55), (libCOTF_gf_UT_HexToInt(StringSub(lp_pString, 6, 7))/2.55));
}

trigger auto_libCOTF_gf_UT_Rise_Trigger = null;
unit auto_libCOTF_gf_UT_Rise_lp_pUnit;

void libCOTF_gf_UT_Rise (unit lp_pUnit) {
    auto_libCOTF_gf_UT_Rise_lp_pUnit = lp_pUnit;

    if (auto_libCOTF_gf_UT_Rise_Trigger == null) {
        auto_libCOTF_gf_UT_Rise_Trigger = TriggerCreate("auto_libCOTF_gf_UT_Rise_TriggerFunc");
    }

    TriggerExecute(auto_libCOTF_gf_UT_Rise_Trigger, false, false);
}

bool auto_libCOTF_gf_UT_Rise_TriggerFunc (bool testConds, bool runActions) {
    unit lp_pUnit = auto_libCOTF_gf_UT_Rise_lp_pUnit;

    // Variable Declarations
    int lv_vB;

    // Automatic Variable Declarations
    const int auto2E47B6BA_n = 10;
    int auto2E47B6BA_i;

    // Variable Initialization
    lv_vB = 10;

    // Implementation
    for (auto2E47B6BA_i = 1; auto2E47B6BA_i <= auto2E47B6BA_n; auto2E47B6BA_i += 1) {
        lv_vB -= 1;
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "SetHeight -0." +IntToString(lv_vB));
        Wait(0.0625, c_timeGame);
    }
    return true;
}

bool libCOTF_gf_UT_AreMorphUnits (string lp_pUnitTypeA, string lp_pUnitTypeB) {
    // Automatic Variable Declarations
    // Implementation
    if ((((lp_pUnitTypeA == "SiegeTankSieged") && (lp_pUnitTypeB == "SiegeTank")) || ((lp_pUnitTypeB == "SiegeTankSieged") && (lp_pUnitTypeA == "SiegeTank")) || ((lp_pUnitTypeB == "SiegeTankSieged_BlackOps") && (lp_pUnitTypeA == "SiegeTank_BlackOps")) || ((lp_pUnitTypeA == "SiegeTankSieged_BlackOps") && (lp_pUnitTypeB == "SiegeTank_BlackOps")) || ((lp_pUnitTypeA == "InfestedSiegeBreaker") && (lp_pUnitTypeB == "InfestedSiegeBreakerSieged")) || ((lp_pUnitTypeB == "InfestedSiegeBreaker") && (lp_pUnitTypeA == "InfestedSiegeBreakerSieged")) || ((lp_pUnitTypeA == "ZeratulPhotonCannon") && (lp_pUnitTypeB == "ZeratulPhotonCannonProjection")) || ((lp_pUnitTypeB == "ZeratulPhotonCannon") && (lp_pUnitTypeA == "ZeratulPhotonCannonProjection")) || ((lp_pUnitTypeB == "ZeratulKhaydarinMonolith") && (lp_pUnitTypeA == "ZeratulKhaydarinMonolithProjection")) || ((lp_pUnitTypeA == "ZeratulKhaydarinMonolith") && (lp_pUnitTypeB == "ZeratulKhaydarinMonolithProjection")) || ((lp_pUnitTypeA == "SILiberator") && (lp_pUnitTypeB == "SILiberatorCloud")) || ((lp_pUnitTypeB == "SILiberator") && (lp_pUnitTypeA == "SILiberatorCloud")) || ((lp_pUnitTypeB == "SIInfestedBunker") && (lp_pUnitTypeA == "SIInfestedBunkerUprooted")) || ((lp_pUnitTypeA == "SIInfestedBunker") && (lp_pUnitTypeB == "SIInfestedBunkerUprooted")) || ((lp_pUnitTypeA == "Liberator_BlackOps") && (lp_pUnitTypeB == "LiberatorAG_BlackOps")) || ((lp_pUnitTypeB == "Liberator_BlackOps") && (lp_pUnitTypeA == "LiberatorAG_BlackOps")) || ((lp_pUnitTypeB == "Liberator") && (lp_pUnitTypeA == "LiberatorAG")) || ((lp_pUnitTypeA == "Liberator") && (lp_pUnitTypeB == "LiberatorAG")) || ((lp_pUnitTypeB == "AbathurSymbioteBrutalisk") && (lp_pUnitTypeA == "AbathurSymbioteLeviathan")) || ((lp_pUnitTypeA == "AbathurSymbioteBrutalisk") && (lp_pUnitTypeB == "AbathurSymbioteLeviathan")) || ((lp_pUnitTypeA == "GaryStetmann") && (lp_pUnitTypeB == "SuperGaryStetmann")) || ((lp_pUnitTypeB == "GaryStetmann") && (lp_pUnitTypeA == "SuperGaryStetmann")) || ((lp_pUnitTypeB == "BroodLordStetmann") && (lp_pUnitTypeA == "BroodlingEscortStetmann")) || ((lp_pUnitTypeA == "BroodLordStetmann") && (lp_pUnitTypeB == "BroodlingEscortStetmann")) || ((lp_pUnitTypeA == "FenixArbiter") && (lp_pUnitTypeB == "FenixCoop")) || ((lp_pUnitTypeB == "FenixArbiter") && (lp_pUnitTypeA == "FenixCoop")) || ((lp_pUnitTypeA == "FenixDragoon") && (lp_pUnitTypeB == "FenixCoop")) || ((lp_pUnitTypeB == "FenixDragoon") && (lp_pUnitTypeA == "FenixCoop")) || ((lp_pUnitTypeA == "FenixDragoon") && (lp_pUnitTypeB == "FenixArbiter")) || ((lp_pUnitTypeB == "FenixDragoon") && (lp_pUnitTypeA == "FenixArbiter")) || ((lp_pUnitTypeB == "HHReaper") && (lp_pUnitTypeA == "HHReaperFlying")) || ((lp_pUnitTypeA == "HHReaper") && (lp_pUnitTypeB == "HHReaperFlying")) || ((lp_pUnitTypeA == "Broodling") && (lp_pUnitTypeB == "KerriganInfestBroodling")) || ((lp_pUnitTypeA == "KerriganInfestBroodling") && (lp_pUnitTypeB == "Broodling")) || ((lp_pUnitTypeA == "BroodLord") && (lp_pUnitTypeB == "BroodlingEscort")) || ((lp_pUnitTypeA == "BroodlingEscort") && (lp_pUnitTypeB == "BroodLord")) || ((lp_pUnitTypeA == "SiegeTankMengskSieged") && (lp_pUnitTypeB == "SiegeTankMengsk")) || ((lp_pUnitTypeB == "SiegeTankMengskSieged") && (lp_pUnitTypeA == "SiegeTankMengsk")) || ((lp_pUnitTypeB == "VikingMengskAssault") && (lp_pUnitTypeA == "VikingMengskFighter")) || ((lp_pUnitTypeA == "VikingMengskAssault") && (lp_pUnitTypeB == "VikingMengskFighter")) || ((lp_pUnitTypeA == "ThorMengsk") && (lp_pUnitTypeB == "ThorMengskSieged")) || ((lp_pUnitTypeB == "ThorMengsk") && (lp_pUnitTypeA == "ThorMengskSieged")))) {
        return true;
    }
    else {
        return false;
    }
}

text libCOTF_gf_UT_NameOfUnitType (string lp_pUnitType) {
    // Variable Declarations
    text lv_vText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_vText = UnitTypeGetName(lp_pUnitType);
    if ((lp_pUnitType == "HHMagneticMineWeapon")) {
        lv_vText = UnitTypeGetName("HHMagneticMine");
    }
    else if ((lp_pUnitType == "HornerAirFleetStrafer")) {
        lv_vText = StringExternal("Button/Name/HornerAirFleet");
    }
    else if ((lp_pUnitType == "SILiberatorCloud")) {
        lv_vText = UnitTypeGetName("SILiberator");
    }
    else if ((lp_pUnitType == "SOAThermalLanceTargeter")) {
        lv_vText = StringExternal("Button/Name/SOAThermalLance");
    }
    else if ((lp_pUnitType == "BroodlingEscortStetmann")) {
        lv_vText = UnitTypeGetName("BroodLordStetmann");
    }
    else if ((lp_pUnitType == "BroodlingEscort")) {
        lv_vText = UnitTypeGetName("BroodLord");
    }
    return lv_vText;
}

string libCOTF_gf_UT_SeparatedSubstring (string lp_pString, int lp_pN, string lp_pSeparator) {
    // Variable Declarations
    const string lv_vSEP = "SEP#";
    string lv_vString;
    int lv_vA;

    // Automatic Variable Declarations
    int auto282F1D04_ae;
    const int auto282F1D04_ai = 1;

    // Variable Initialization
    lv_vString = lp_pString;

    // Implementation
    auto282F1D04_ae = lp_pN;
    lv_vA = 1;
    for ( ; ( (auto282F1D04_ai >= 0 && lv_vA <= auto282F1D04_ae) || (auto282F1D04_ai < 0 && lv_vA >= auto282F1D04_ae) ) ; lv_vA += auto282F1D04_ai ) {
        lv_vString = StringReplaceWord(lv_vString, lp_pSeparator, (lv_vSEP + IntToString(lv_vA)), 1, c_stringCase);
    }
    if ((lp_pN == 1) && (StringFind(lv_vString, (lv_vSEP + IntToString(lp_pN)), c_stringCase) > 0)) {
        return StringSub(lv_vString, 1, (StringFind(lv_vString, (lv_vSEP + "1"), c_stringCase)-1));
    }
    else if ((lp_pN == 1) && (StringFind(lv_vString, (lv_vSEP + IntToString(lp_pN)), c_stringCase) == -1)) {
        return lv_vString;
    }
    else if ((StringFind(lv_vString, (lv_vSEP + IntToString(lp_pN)), c_stringCase) == -1)) {
        return StringSub(lv_vString, (StringFind(lv_vString, (lv_vSEP + IntToString((lp_pN-1))), c_stringCase)+1+StringLength(lv_vSEP)), StringLength(lv_vString));
    }
    return StringSub(lv_vString, (StringFind(lv_vString, (lv_vSEP + IntToString((lp_pN-1))), c_stringCase)+1+StringLength(lv_vSEP)), (StringFind(lv_vString, (lv_vSEP + IntToString(lp_pN)), c_stringCase)-1));
}

string libCOTF_gf_UT_PointXYToString (point lp_pPoint, string lp_pDelimiter, int lp_pPrecision) {
    // Automatic Variable Declarations
    // Implementation
    return (FixedToString(PointGetX(lp_pPoint), lp_pPrecision) + lp_pDelimiter + FixedToString(PointGetY(lp_pPoint), lp_pPrecision));
}

point libCOTF_gf_UT_FindPointWithPathingTo (point lp_vInitPoint, point lp_vTargetPoint) {
    // Variable Declarations
    int lv_vRadius;
    int lv_vAngle;
    point lv_vPoint;

    // Automatic Variable Declarations
    const int auto5DF36856_ae = 200;
    const int auto5DF36856_ai = 3;
    const int autoAFD06A23_ae = 360;
    const int autoAFD06A23_ai = 30;

    // Variable Initialization

    // Implementation
    if ((PointPathingIsConnected(lp_vInitPoint, lp_vTargetPoint) == true)) {
        return lp_vInitPoint;
    }

    lv_vRadius = 1;
    for ( ; ( (auto5DF36856_ai >= 0 && lv_vRadius <= auto5DF36856_ae) || (auto5DF36856_ai < 0 && lv_vRadius >= auto5DF36856_ae) ) ; lv_vRadius += auto5DF36856_ai ) {
        lv_vAngle = 1;
        for ( ; ( (autoAFD06A23_ai >= 0 && lv_vAngle <= autoAFD06A23_ae) || (autoAFD06A23_ai < 0 && lv_vAngle >= autoAFD06A23_ae) ) ; lv_vAngle += autoAFD06A23_ai ) {
            lv_vPoint = PointWithOffsetPolar(lp_vInitPoint, lv_vRadius, lv_vAngle);
            if ((RegionContainsPoint(RegionPlayableMap(), lv_vPoint) == true) && (PathingType(lv_vPoint) == c_pathingGround) && (PointPathingIsConnected(lv_vPoint, lp_vTargetPoint) == true)) {
                return lv_vPoint;
            }

        }
    }
    return lp_vInitPoint;
}

string libCOTF_gf_UT_StageToString (int lp_pStage) {
    // Variable Declarations
    string lv_vStage;

    // Automatic Variable Declarations
    int auto6ED2AECB_val;

    // Variable Initialization
    lv_vStage = "";

    // Implementation
    auto6ED2AECB_val = lp_pStage;
    if (auto6ED2AECB_val == c_unitAbilStageAll) {
        lv_vStage = "Any";
    }
    else if (auto6ED2AECB_val == c_unitAbilStageQueue) {
        lv_vStage = "Queue";
    }
    else if (auto6ED2AECB_val == c_unitAbilStageExecute) {
        lv_vStage = "Execute";
    }
    else if (auto6ED2AECB_val == c_unitAbilStageCancel) {
        lv_vStage = "Cancel";
    }
    else if (auto6ED2AECB_val == c_unitAbilStagePreempt) {
        lv_vStage = "Preempt";
    }
    else if (auto6ED2AECB_val == c_unitAbilStageComplete) {
        lv_vStage = "Complete";
    }
    else if (auto6ED2AECB_val == c_unitAbilStagePause) {
        lv_vStage = "Pause";
    }
    else if (auto6ED2AECB_val == c_unitAbilStageUnpause) {
        lv_vStage = "Unpause";
    }
    else {
        lv_vStage = "-";
    }
    return lv_vStage;
}

trigger auto_libCOTF_gf_UT_AotDFix_Trigger = null;

void libCOTF_gf_UT_AotDFix () {
    if (auto_libCOTF_gf_UT_AotDFix_Trigger == null) {
        auto_libCOTF_gf_UT_AotDFix_Trigger = TriggerCreate("auto_libCOTF_gf_UT_AotDFix_TriggerFunc");
    }

    TriggerExecute(auto_libCOTF_gf_UT_AotDFix_Trigger, false, false);
}

bool auto_libCOTF_gf_UT_AotDFix_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMU_gf_MutatorIsEnabled("UberDarkness") == true)) {
        Wait(1.0, c_timeGame);
        if ((libCOOC_gf_CC_CurrentMap() == "AC_CradleOfDeath")) {
            CatalogFieldValueSet(c_gameCatalogUnit, "CODFlatbedTruck", "Sight", 1, "0");
            CatalogFieldValueSet(c_gameCatalogUnit, "CODFlatbedTruck", "Sight", 2, "0");
        }

        while (true) {
            Wait(0.1, c_timeGame);
            VisExploreArea(1, RegionEntireMap(), false, false);
            VisExploreArea(2, RegionEntireMap(), false, false);
        }
    }

    return true;
}

trigger auto_libCOTF_gf_UT_AI_VisionFix_Trigger = null;

void libCOTF_gf_UT_AI_VisionFix () {
    if (auto_libCOTF_gf_UT_AI_VisionFix_Trigger == null) {
        auto_libCOTF_gf_UT_AI_VisionFix_Trigger = TriggerCreate("auto_libCOTF_gf_UT_AI_VisionFix_TriggerFunc");
    }

    TriggerExecute(auto_libCOTF_gf_UT_AI_VisionFix_Trigger, false, false);
}

bool auto_libCOTF_gf_UT_AI_VisionFix_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    while (true) {
        Wait(30.0, c_timeGame);
        VisRevealArea(3, RegionEntireMap(), 0.1, false);
    }
    return true;
}

trigger auto_libCOTF_gf_UT_Dehaka_DevourCooldownScoreCheck_Trigger = null;

void libCOTF_gf_UT_Dehaka_DevourCooldownScoreCheck () {
    if (auto_libCOTF_gf_UT_Dehaka_DevourCooldownScoreCheck_Trigger == null) {
        auto_libCOTF_gf_UT_Dehaka_DevourCooldownScoreCheck_Trigger = TriggerCreate("auto_libCOTF_gf_UT_Dehaka_DevourCooldownScoreCheck_TriggerFunc");
    }

    TriggerExecute(auto_libCOTF_gf_UT_Dehaka_DevourCooldownScoreCheck_Trigger, false, false);
}

bool auto_libCOTF_gf_UT_Dehaka_DevourCooldownScoreCheck_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vDehaka;

    // Automatic Variable Declarations
    playergroup auto0A41FFF4_g;
    int auto0A41FFF4_var;

    // Variable Initialization

    // Implementation
    Wait(1.0, c_timeGame);
    auto0A41FFF4_g = libCOTF_gf_UT_ActiveCommanderPlayers();
    auto0A41FFF4_var = -1;
    while (true) {
        auto0A41FFF4_var = PlayerGroupNextPlayer(auto0A41FFF4_g, auto0A41FFF4_var);
        if (auto0A41FFF4_var < 0) { break; }
        if ((libCOOC_gf_ActiveCommanderForPlayer(auto0A41FFF4_var) == "ZergDehaka")) {
            while (!((GameGetMissionTime() > 0.0) && (UnitIsAlive(libCOTF_gf_AF_GetHeroUnit(auto0A41FFF4_var)) == true))) {
                Wait(0.5, c_timeGame);
            }
            lv_vDehaka = libCOTF_gf_AF_GetHeroUnit(auto0A41FFF4_var);
            while (true) {
                if ((UnitIsAlive(lv_vDehaka) == true) && (UnitAbilityGetCooldown(lv_vDehaka, "DehakaConsume", "Abil/DehakaConsume") <= 0.0)) {
                    PlayerScoreValueSetFromFixed(auto0A41FFF4_var, "Devouroffcooldown", (PlayerScoreValueGetAsFixed(auto0A41FFF4_var, "Devouroffcooldown")+0.5));
                }

                Wait(0.5, c_timeGame);
            }
        }

    }
    return true;
}

void libCOTF_gf_UT_SelInfo_Init () {
    // Variable Declarations
    int lv_width;
    int lv_height;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_width = 200;
    lv_height = 500;

    // Implementation
    if ((libCOTF_gv_uT_SelInfoText == c_invalidDialogControlId)) {
        DialogCreate(lv_width, lv_height, c_anchorRight, 0, 0, true);
        DialogSetImageVisible(DialogLastCreated(), false);
        libCOTF_gv_uT_SelInfoDialog = DialogLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_width, lv_height, c_anchorTopLeft, 0, 0, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "UT_SelInfo", PlayerGroupAll());
        libCOTF_gv_uT_SelInfoText = DialogControlLastCreated();
    }

}

void libCOTF_gf_UT_SelInfo_Update (int lp_pPlayer) {
    // Variable Declarations
    text lv_vText;
    fixed lv_vMinerals;
    fixed lv_vVespene;
    fixed lv_vSupply;
    fixed lv_vXP;
    fixed lv_vKills;
    fixed lv_vLife;
    fixed lv_vLifeMax;
    fixed lv_vShields;
    fixed lv_vShieldsMax;
    fixed lv_vEnegy;
    fixed lv_vEnegyMax;
    fixed lv_vBiomass;
    fixed lv_vEssence;
    string lv_vBeh;

    // Automatic Variable Declarations
    unitgroup auto4F62FD27_g;
    int auto4F62FD27_u;
    unit auto4F62FD27_var;
    int auto8F0B9B98_ae;
    int auto8F0B9B98_var;
    string auto6024A3D3_val;

    // Variable Initialization

    // Implementation
    if ((PlayerGroupHasPlayer(libCOTF_gv_uT_SelInfo_PG, lp_pPlayer) == false)) {
        return ;
    }

    auto4F62FD27_g = UnitGroupSelected(lp_pPlayer);
    auto4F62FD27_u = UnitGroupCount(auto4F62FD27_g, c_unitCountAll);
    for (;; auto4F62FD27_u -= 1) {
        auto4F62FD27_var = UnitGroupUnitFromEnd(auto4F62FD27_g, auto4F62FD27_u);
        if (auto4F62FD27_var == null) { break; }
        lv_vLife += UnitGetPropertyFixed(auto4F62FD27_var, c_unitPropLife, c_unitPropCurrent);
        lv_vLifeMax += UnitGetPropertyFixed(auto4F62FD27_var, c_unitPropLifeMax, c_unitPropCurrent);
        lv_vShields += UnitGetPropertyFixed(auto4F62FD27_var, c_unitPropShields, c_unitPropCurrent);
        lv_vShieldsMax += UnitGetPropertyFixed(auto4F62FD27_var, c_unitPropShieldsMax, c_unitPropCurrent);
        lv_vEnegy += UnitGetPropertyFixed(auto4F62FD27_var, c_unitPropEnergy, c_unitPropCurrent);
        lv_vEnegyMax += UnitGetPropertyFixed(auto4F62FD27_var, c_unitPropEnergyMax, c_unitPropCurrent);
        lv_vXP += UnitGetPropertyFixed(auto4F62FD27_var, c_unitPropXP, c_unitPropCurrent);
        lv_vKills += UnitGetPropertyFixed(auto4F62FD27_var, c_unitPropKills, c_unitPropCurrent);
        lv_vSupply += UnitGetPropertyFixed(auto4F62FD27_var, c_unitPropSuppliesUsed, c_unitPropCurrent);
        lv_vMinerals += UnitTypeGetCost(UnitGetType(auto4F62FD27_var), c_unitCostMinerals);
        lv_vVespene += UnitTypeGetCost(UnitGetType(auto4F62FD27_var), c_unitCostVespene);
        auto8F0B9B98_ae = UnitBehaviorCountAll(auto4F62FD27_var);
        auto8F0B9B98_var = 1;
        for ( ; auto8F0B9B98_var <= auto8F0B9B98_ae; auto8F0B9B98_var += 1 ) {
            lv_vBeh = UnitBehaviorGet(auto4F62FD27_var, auto8F0B9B98_var);
            auto6024A3D3_val = lv_vBeh;
            if (auto6024A3D3_val == "BiomassBuff1") {
                lv_vBiomass += (UnitBehaviorCount(auto4F62FD27_var, lv_vBeh) * 1);
            }
            else if (auto6024A3D3_val == "BiomassBuff10") {
                lv_vBiomass += (UnitBehaviorCount(auto4F62FD27_var, lv_vBeh) * 10);
            }
            else if (auto6024A3D3_val == "BiomassBuff100") {
                lv_vBiomass += (UnitBehaviorCount(auto4F62FD27_var, lv_vBeh) * 100);
            }
            else if (auto6024A3D3_val == "BiomassBuff100PlusLife") {
                lv_vBiomass += (UnitBehaviorCount(auto4F62FD27_var, lv_vBeh) * 100);
            }
            else if (auto6024A3D3_val == "BiomassBuff10PlusLife") {
                lv_vBiomass += (UnitBehaviorCount(auto4F62FD27_var, lv_vBeh) * 10);
            }
            else if (auto6024A3D3_val == "DehakaAttEssence") {
                lv_vEssence += (UnitBehaviorCount(auto4F62FD27_var, lv_vBeh) * 1);
            }
            else {
            }
        }
    }
    TextExpressionSetToken("Param/Expression/lib_COTF_2277D513", "A", FixedToText(lv_vMinerals, 0));
    TextExpressionSetToken("Param/Expression/lib_COTF_2277D513", "E", FixedToText(lv_vVespene, 0));
    TextExpressionSetToken("Param/Expression/lib_COTF_2277D513", "B", FixedToText(lv_vSupply, 0));
    TextExpressionSetToken("Param/Expression/lib_COTF_2277D513", "C", FixedToText(lv_vLife, 0));
    TextExpressionSetToken("Param/Expression/lib_COTF_2277D513", "D", FixedToText(lv_vLifeMax, 0));
    TextExpressionSetToken("Param/Expression/lib_COTF_2277D513", "I", FixedToText(lv_vShields, 0));
    TextExpressionSetToken("Param/Expression/lib_COTF_2277D513", "J", FixedToText(lv_vShieldsMax, 0));
    TextExpressionSetToken("Param/Expression/lib_COTF_2277D513", "K", FixedToText(lv_vEnegy, 0));
    TextExpressionSetToken("Param/Expression/lib_COTF_2277D513", "L", FixedToText(lv_vEnegyMax, 0));
    TextExpressionSetToken("Param/Expression/lib_COTF_2277D513", "F", FixedToText(lv_vBiomass, 0));
    TextExpressionSetToken("Param/Expression/lib_COTF_2277D513", "G", FixedToText(lv_vEssence, 0));
    TextExpressionSetToken("Param/Expression/lib_COTF_2277D513", "H", FixedToText((lv_vXP - lv_vEssence), 0));
    TextExpressionSetToken("Param/Expression/lib_COTF_2277D513", "M", FixedToText(lv_vKills, 0));
    lv_vText = TextExpressionAssemble("Param/Expression/lib_COTF_2277D513");
    libNtve_gf_SetDialogItemText(libCOTF_gv_uT_SelInfoText, lv_vText, PlayerGroupSingle(lp_pPlayer));
}

trigger auto_libCOTF_gf_CM_Mengsk_GlobalCasterEnergyRegen_Trigger = null;
unit auto_libCOTF_gf_CM_Mengsk_GlobalCasterEnergyRegen_lp_mengskGlobalCaster;

void libCOTF_gf_CM_Mengsk_GlobalCasterEnergyRegen (unit lp_mengskGlobalCaster) {
    auto_libCOTF_gf_CM_Mengsk_GlobalCasterEnergyRegen_lp_mengskGlobalCaster = lp_mengskGlobalCaster;

    if (auto_libCOTF_gf_CM_Mengsk_GlobalCasterEnergyRegen_Trigger == null) {
        auto_libCOTF_gf_CM_Mengsk_GlobalCasterEnergyRegen_Trigger = TriggerCreate("auto_libCOTF_gf_CM_Mengsk_GlobalCasterEnergyRegen_TriggerFunc");
    }

    TriggerExecute(auto_libCOTF_gf_CM_Mengsk_GlobalCasterEnergyRegen_Trigger, false, false);
}

bool auto_libCOTF_gf_CM_Mengsk_GlobalCasterEnergyRegen_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mengskGlobalCaster = auto_libCOTF_gf_CM_Mengsk_GlobalCasterEnergyRegen_lp_mengskGlobalCaster;

    // Variable Declarations
    unit lv_veteran;
    fixed lv_bonusenergyregenfactor;
    fixed lv_totalenergyregen;
    fixed lv_globalcasterenergy;
    int lv_mengskplayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bonusenergyregenfactor = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "TopbarMengskBonusRegenFactorDummy", "Amount", UnitGetOwner(lp_mengskGlobalCaster));
    lv_mengskplayer = UnitGetOwner(lp_mengskGlobalCaster);

    // Implementation
    while (true) {
        lv_totalenergyregen = MaxF((0.0 + (libCOMI_gv_cM_Mengsk_EnergyRegenRoyalGuard + libCOMI_gv_cM_Mengsk_EnergyRegenTrooper)), 0.01);
        Wait((lv_bonusenergyregenfactor / lv_totalenergyregen), c_timeGame);
        lv_globalcasterenergy = RoundI((UnitGetPropertyFixed(lp_mengskGlobalCaster, c_unitPropEnergy, c_unitPropCurrent) + 1));
        UnitSetPropertyFixed(lp_mengskGlobalCaster, c_unitPropEnergy, lv_globalcasterenergy);
        libCOMI_gf_CM_Mengsk_EnergyChanged(lv_mengskplayer);
    }
    return true;
}

void libCOTF_gf_UT_ChangeAllyPrestige () {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerStatus(2) != c_playerStatusActive)) {
        if (libCOTF_gv_uT_PrestigeIndex >= 3) {
            libCOTF_gv_uT_PrestigeIndex = 0;
        }
        else {
            libCOTF_gv_uT_PrestigeIndex = libCOTF_gv_uT_PrestigeIndex + 1;
        }
        libCOOC_gv_cCX_PlayerPrestigeIndex[2] = libCOTF_gv_uT_PrestigeIndex;
        libCOUI_gf_CU_CommanderUpdatePrestigeLabels(1);
        libCOUI_gf_CU_CommanderUpdatePrestigeLabels(2);
        TriggerEnable(libCOTF_gt_UT_CommanderClicked, true);
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_1DC34FF2"));
    }
}

bool libCOTF_gf_UT_Bank_UnitExcluded (unit lp_pUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetType(lp_pUnit) != "SoloDummy") && (UnitGetType(lp_pUnit) != "SoloDummyPreventDefeat") && (lp_pUnit != libCOTF_gf_CM_PlayerGetGlobalCaster(1)) && (lp_pUnit != libCOTF_gf_CM_PlayerGetGlobalCaster(2)) && (lp_pUnit != libCOTF_gf_AF_GetHeroUnit(1)) && (lp_pUnit != libCOTF_gf_AF_GetHeroUnit(2)) && (lp_pUnit != libCOTF_gf_AF_GetHeroUnit(2))) {
        return false;
    }
    else {
        return true;
    }
}

void libCOTF_gf_UT_Bank_SaveBank (int lp_pPlayer, string lp_pSaveName, string lp_pBankName) {
    // Variable Declarations
    int lv_vPlayer;
    int lv_vA;
    int lv_vB;
    string lv_vUpgrade;
    string lv_vUnitSection;
    string lv_vUpgradeSection;
    const int lv_vSecLength = 6;

    // Automatic Variable Declarations
    const int auto5FB3DFCC_ae = libCOTF_gv_uT_Bank_MaxPlayers;
    int auto5FB3DFCC_var;
    unitgroup autoBDD0F6C9_g;
    int autoBDD0F6C9_u;
    unit autoBDD0F6C9_var;

    // Variable Initialization
    lv_vUnitSection = ("Units_" + (libCOOC_gf_CC_CurrentMap()) + "_" + lp_pSaveName);
    lv_vUpgradeSection = ("Upgrades_" + (libCOOC_gf_CC_CurrentMap()) + "_" + lp_pSaveName);

    // Implementation
    BankLoad(lp_pBankName, lp_pPlayer);
    BankSectionRemove(BankLastCreated(), lv_vUnitSection);
    auto5FB3DFCC_var = 1;
    for ( ; auto5FB3DFCC_var <= auto5FB3DFCC_ae; auto5FB3DFCC_var += 1 ) {
        autoBDD0F6C9_g = UnitGroup(null, auto5FB3DFCC_var, RegionEntireMap(), libCOTF_gv_uT_Bank_UnitFilter, 0);
        autoBDD0F6C9_u = UnitGroupCount(autoBDD0F6C9_g, c_unitCountAll);
        for (;; autoBDD0F6C9_u -= 1) {
            autoBDD0F6C9_var = UnitGroupUnitFromEnd(autoBDD0F6C9_g, autoBDD0F6C9_u);
            if (autoBDD0F6C9_var == null) { break; }
            if ((libCOTF_gf_UT_Bank_UnitExcluded(autoBDD0F6C9_var) == false)) {
                BankValueSetFromString(BankLastCreated(), lv_vUnitSection, IntToString(lv_vA), (FixedToString(PointGetX(UnitGetPosition(autoBDD0F6C9_var)), c_fixedPrecisionAny) + "," + FixedToString(PointGetY(UnitGetPosition(autoBDD0F6C9_var)), c_fixedPrecisionAny) + "," + FixedToString(UnitGetFacing(autoBDD0F6C9_var), c_fixedPrecisionAny) + "," + FixedToString(UnitGetPropertyFixed(autoBDD0F6C9_var, c_unitPropLife, c_unitPropCurrent), c_fixedPrecisionAny) + "," + FixedToString(UnitGetPropertyFixed(autoBDD0F6C9_var, c_unitPropShields, c_unitPropCurrent), c_fixedPrecisionAny) + "," + FixedToString(UnitGetPropertyFixed(autoBDD0F6C9_var, c_unitPropEnergy, c_unitPropCurrent), c_fixedPrecisionAny) + "," + FixedToString(UnitGetPropertyFixed(autoBDD0F6C9_var, c_unitPropKills, c_unitPropCurrent), c_fixedPrecisionAny) + "," + IntToString(BoolToInt(libNtve_gf_UnitIsHidden(autoBDD0F6C9_var))) + "," + IntToString(UnitGetOwner(autoBDD0F6C9_var)) + "," + (UnitGetType(autoBDD0F6C9_var))));
                lv_vA += 1;
            }

        }
    }
    BankValueSetFromInt(BankLastCreated(), lv_vUnitSection, "MaxUnits", lv_vA);
    BankSave(BankLastCreated());
}

void libCOTF_gf_UT_Bank_RestoreBank (int lp_pPlayer, string lp_pSaveName, playergroup lp_pPlayerGroup, string lp_pBankName) {
    // Variable Declarations
    int lv_vA;
    int lv_vB;
    int lv_vMaxUnits;
    int lv_vMaxUpgrades;
    unitgroup lv_vUGRemoveTheseUnitsLater;
    unitgroup lv_vUGKeepTheseUnits;
    string lv_vUpgrade;
    string lv_vUnitSection;
    string lv_vUpgradeSection;
    string lv_vString;
    string lv_vUnitType;
    point lv_vPosition;
    int lv_vPlayer;
    unitgroup lv_vUGSameUnitsClose;
    unit lv_vUnit;

    // Automatic Variable Declarations
    int autoF892CB76_ae;
    const int autoF892CB76_ai = 1;
    playergroup auto9CA65285_g;
    int auto9CA65285_var;
    unitgroup autoD64927B9_g;
    int autoD64927B9_u;
    unit autoD64927B9_var;
    unitgroup auto991B3699_g;
    int auto991B3699_u;
    unit auto991B3699_var;

    // Variable Initialization
    lv_vUGRemoveTheseUnitsLater = UnitGroupEmpty();
    lv_vUGKeepTheseUnits = UnitGroupEmpty();
    lv_vUnitSection = ("Units_" + (libCOOC_gf_CC_CurrentMap()) + "_" + lp_pSaveName);
    lv_vUpgradeSection = ("Upgrades_" + (libCOOC_gf_CC_CurrentMap()) + "_" + lp_pSaveName);
    lv_vString = "";
    lv_vUGSameUnitsClose = UnitGroupEmpty();

    // Implementation
    BankLoad(lp_pBankName, lp_pPlayer);
    lv_vMaxUnits = BankValueGetAsInt(BankLastCreated(), lv_vUnitSection, "MaxUnits");
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SoloDummyPreventDefeat", 0, 1, PlayerStartLocation(1));
    UnitGroupAdd(lv_vUGRemoveTheseUnitsLater, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SoloDummyPreventDefeat", 0, 2, PlayerStartLocation(2));
    UnitGroupAdd(lv_vUGRemoveTheseUnitsLater, UnitLastCreated());
    autoF892CB76_ae = (lv_vMaxUnits-1);
    lv_vA = 0;
    for ( ; ( (autoF892CB76_ai >= 0 && lv_vA <= autoF892CB76_ae) || (autoF892CB76_ai < 0 && lv_vA >= autoF892CB76_ae) ) ; lv_vA += autoF892CB76_ai ) {
        lv_vString = BankValueGetAsString(BankLastCreated(), lv_vUnitSection, IntToString(lv_vA));
        lv_vUnitType = UnitTypeFromString(libCOTF_gf_UT_SeparatedSubstring(lv_vString, 10, ","));
        lv_vPosition = Point(StringToFixed(libCOTF_gf_UT_SeparatedSubstring(lv_vString, 1, ",")), StringToFixed(libCOTF_gf_UT_SeparatedSubstring(lv_vString, 2, ",")));
        lv_vPlayer = StringToInt(libCOTF_gf_UT_SeparatedSubstring(lv_vString, 9, ","));
        lv_vUGSameUnitsClose = UnitGroup(lv_vUnitType, lv_vPlayer, RegionCircle(lv_vPosition, 0.2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        if ((PlayerGroupHasPlayer(lp_pPlayerGroup, lv_vPlayer) == true) && (UnitGroupCount(lv_vUGSameUnitsClose, c_unitCountAlive) == 0)) {
            lv_vB += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_vUnitType, c_unitCreateIgnorePlacement, lv_vPlayer, lv_vPosition);
            UnitGroupAdd(lv_vUGKeepTheseUnits, UnitLastCreated());
            UnitSetFacing(UnitLastCreated(), StringToFixed(libCOTF_gf_UT_SeparatedSubstring(lv_vString, 3, ",")), 0.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, StringToFixed(libCOTF_gf_UT_SeparatedSubstring(lv_vString, 4, ",")));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShields, StringToFixed(libCOTF_gf_UT_SeparatedSubstring(lv_vString, 5, ",")));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergy, StringToFixed(libCOTF_gf_UT_SeparatedSubstring(lv_vString, 6, ",")));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropKills, StringToFixed(libCOTF_gf_UT_SeparatedSubstring(lv_vString, 7, ",")));
            if ((libCOTF_gf_UT_SeparatedSubstring(lv_vString, 8, ",") == "1")) {
                libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
            }

        }
        else if ((PlayerGroupHasPlayer(lp_pPlayerGroup, lv_vPlayer) == true) && (UnitGroupCount(lv_vUGSameUnitsClose, c_unitCountAlive) >= 1)) {
            lv_vUnit = UnitGroupRandomUnit(lv_vUGSameUnitsClose, c_unitCountAlive);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, StringToFixed(libCOTF_gf_UT_SeparatedSubstring(lv_vString, 4, ",")));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShields, StringToFixed(libCOTF_gf_UT_SeparatedSubstring(lv_vString, 5, ",")));
            UnitGroupAdd(lv_vUGKeepTheseUnits, lv_vUnit);
        }
    }
    auto9CA65285_g = lp_pPlayerGroup;
    auto9CA65285_var = -1;
    while (true) {
        auto9CA65285_var = PlayerGroupNextPlayer(auto9CA65285_g, auto9CA65285_var);
        if (auto9CA65285_var < 0) { break; }
        autoD64927B9_g = UnitGroup(null, auto9CA65285_var, RegionEntireMap(), libCOTF_gv_uT_Bank_UnitFilter, 0);
        autoD64927B9_u = UnitGroupCount(autoD64927B9_g, c_unitCountAll);
        for (;; autoD64927B9_u -= 1) {
            autoD64927B9_var = UnitGroupUnitFromEnd(autoD64927B9_g, autoD64927B9_u);
            if (autoD64927B9_var == null) { break; }
            if ((libCOTF_gf_UT_Bank_UnitExcluded(autoD64927B9_var) == false) && (UnitGroupHasUnit(lv_vUGKeepTheseUnits, autoD64927B9_var) == false)) {
                UnitRemove(autoD64927B9_var);
            }

        }
    }
    auto991B3699_g = lv_vUGRemoveTheseUnitsLater;
    auto991B3699_u = UnitGroupCount(auto991B3699_g, c_unitCountAll);
    for (;; auto991B3699_u -= 1) {
        auto991B3699_var = UnitGroupUnitFromEnd(auto991B3699_g, auto991B3699_u);
        if (auto991B3699_var == null) { break; }
        UnitRemove(auto991B3699_var);
    }
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), 1);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), 2);
    TextExpressionSetToken("Param/Expression/lib_COTF_00185FFB", "A", IntToText(lv_vB));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_00185FFB"));
}

trigger auto_libCOTF_gf_UT_CopyProperties_Trigger = null;
unit auto_libCOTF_gf_UT_CopyProperties_lp_pOriginalUnit;
unit auto_libCOTF_gf_UT_CopyProperties_lp_pNewUnit;

void libCOTF_gf_UT_CopyProperties (unit lp_pOriginalUnit, unit lp_pNewUnit) {
    auto_libCOTF_gf_UT_CopyProperties_lp_pOriginalUnit = lp_pOriginalUnit;
    auto_libCOTF_gf_UT_CopyProperties_lp_pNewUnit = lp_pNewUnit;

    if (auto_libCOTF_gf_UT_CopyProperties_Trigger == null) {
        auto_libCOTF_gf_UT_CopyProperties_Trigger = TriggerCreate("auto_libCOTF_gf_UT_CopyProperties_TriggerFunc");
    }

    TriggerExecute(auto_libCOTF_gf_UT_CopyProperties_Trigger, false, false);
}

bool auto_libCOTF_gf_UT_CopyProperties_TriggerFunc (bool testConds, bool runActions) {
    unit lp_pOriginalUnit = auto_libCOTF_gf_UT_CopyProperties_lp_pOriginalUnit;
    unit lp_pNewUnit = auto_libCOTF_gf_UT_CopyProperties_lp_pNewUnit;

    // Variable Declarations
    int lv_vPlayer;
    int lv_vControlGroup;

    // Automatic Variable Declarations
    const int auto0D868AD5_ae = 15;
    const int auto0D868AD5_ai = 1;
    const int auto528160BB_ae = 9;
    const int auto528160BB_ai = 1;

    // Variable Initialization

    // Implementation
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropLifeMax, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropLifeMax, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropShieldsMax, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropShieldsMax, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropEnergyMax, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropEnergyMax, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropEnergyRegen, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropEnergyRegen, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropLifeRegen, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropLifeRegen, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropLifePercent, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropLifePercent, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropEnergyPercent, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropEnergyPercent, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropEnergyPercent, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropEnergyPercent, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropXP, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropXP, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropShields, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropShields, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropKills, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropKills, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropResources, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropResources, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropMovementSpeed, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropMovementSpeed, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropBaseMovementSpeed, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropBaseMovementSpeed, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropLevel, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropLevel, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropHeight, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropHeight, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropCarriedVespene, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropCarriedVespene, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropCarriedMinerals, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropCarriedMinerals, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropCarriedTerrazine, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropCarriedTerrazine, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropCarriedCustom, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropCarriedCustom, c_unitPropCurrent));
    UnitIssueOrder(lp_pNewUnit, UnitOrder(lp_pOriginalUnit, 0), c_orderQueueReplace);
    UnitIssueOrder(lp_pNewUnit, UnitOrder(lp_pOriginalUnit, 1), c_orderQueueAddToEnd);
    UnitIssueOrder(lp_pNewUnit, UnitOrder(lp_pOriginalUnit, 2), c_orderQueueAddToEnd);
    lv_vPlayer = 1;
    for ( ; ( (auto0D868AD5_ai >= 0 && lv_vPlayer <= auto0D868AD5_ae) || (auto0D868AD5_ai < 0 && lv_vPlayer >= auto0D868AD5_ae) ) ; lv_vPlayer += auto0D868AD5_ai ) {
        if ((UnitIsSelected(lp_pOriginalUnit, lv_vPlayer) == true)) {
            UnitSelect(lp_pNewUnit, lv_vPlayer, true);
        }

        lv_vControlGroup = 0;
        for ( ; ( (auto528160BB_ai >= 0 && lv_vControlGroup <= auto528160BB_ae) || (auto528160BB_ai < 0 && lv_vControlGroup >= auto528160BB_ae) ) ; lv_vControlGroup += auto528160BB_ai ) {
            if ((UnitGroupHasUnit(UnitControlGroup(lv_vPlayer, lv_vControlGroup), lp_pOriginalUnit) == true)) {
                UnitControlGroupAddUnit(lv_vPlayer, lv_vControlGroup, lp_pNewUnit);
            }

        }
    }
    return true;
}

void libCOTF_gf_UT_VoidRiftDebugSpawn (int lp_forPlayer, fixed lp_pTime) {
    // Variable Declarations
    int lv_riftPlayer;
    int lv_spawnAttempt;
    point lv_riftLocation;
    fixed lv_maxDistance;

    // Automatic Variable Declarations
    const int autoDD94F2D3_ae = 1000;
    const int autoDD94F2D3_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_forPlayer == 2)) {
        lv_riftPlayer = 4;
    }
    else {
        lv_riftPlayer = 3;
    }
    if (((lp_pTime * 60.0) < 480.0)) {
        lv_maxDistance = 80.0;
    }
    else if (true) {
        lv_maxDistance = 500.0;
    }
    lv_spawnAttempt = 1;
    for ( ; ( (autoDD94F2D3_ai >= 0 && lv_spawnAttempt <= autoDD94F2D3_ae) || (autoDD94F2D3_ai < 0 && lv_spawnAttempt >= autoDD94F2D3_ae) ) ; lv_spawnAttempt += autoDD94F2D3_ai ) {
        lv_riftLocation = RegionRandomPoint(RegionPlayableMap());
        if (((DistanceBetweenPoints(lv_riftLocation, PlayerStartLocation(1)) <= 30.0) || (DistanceBetweenPoints(lv_riftLocation, PlayerStartLocation(2)) <= 30.0) || (DistanceBetweenPoints(lv_riftLocation, PlayerStartLocation(1)) > lv_maxDistance) || (libCOOC_gf_CC_SpawnAllowedAtPoint(lv_riftLocation) == false) || (UnitCountAlliance(1, c_unitAllianceEnemy, RegionCircle(lv_riftLocation, 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 3) || (UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(lv_riftLocation, 10.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("ShapeSphere", c_playerAny, RegionCircle(lv_riftLocation, 0.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (PointPathingIsConnected(lv_riftLocation, PlayerStartLocation(1)) == false) || (UnitGroupCount(UnitGroup("MutatorVoidRift", c_playerAny, RegionCircle(lv_riftLocation, 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || ((libCOOC_gf_CC_CurrentMap() == "AC_UlnarLocks") && ((lp_pTime * 60.0) < 300.0) && (AIPathingCostMap(lv_riftLocation, PlayerStartLocation(lp_forPlayer)) > 70)))) {
            lv_riftLocation = null;
            continue;
        }
        else {
            break;
        }
    }
    if ((lv_riftLocation == null)) {
        return ;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShapeSphere", 0, 0, lv_riftLocation);
    UnitSetTeamColorIndex(UnitLastCreated(), 3);
}

void libCOTF_gf_UT_UpdateUnitInfo (unit lp_pUnit) {
    // Variable Declarations
    string lv_vBeh;
    text lv_vBehNumber;
    text lv_vText;
    int lv_vTextTagNormal;
    int lv_vTextTagHidden;
    text lv_vDuration;

    // Automatic Variable Declarations
    unit auto75929C83_u;
    int auto75929C83_i;

    // Variable Initialization
    lv_vTextTagNormal = libCOTF_gf_TextTagForUnit(lp_pUnit, libCOTF_gv_uT_TextTagPositionNormal);
    lv_vTextTagHidden = libCOTF_gf_TextTagForUnit(lp_pUnit, libCOTF_gv_uT_TextTagPositionHidden);

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_COTF_BC135021", "A", StringToText((UnitGetType(lp_pUnit))));
    TextExpressionSetToken("Param/Expression/lib_COTF_BC135021", "B", IntToText(UnitGetOwner(lp_pUnit)));
    TextExpressionSetToken("Param/Expression/lib_COTF_4C3CE427", "A", TextWithColor(TextExpressionAssemble("Param/Expression/lib_COTF_BC135021"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lp_pUnit), false))));
    TextExpressionSetToken("Param/Expression/lib_COTF_4C3CE427", "B", FixedToText(PointGetX(UnitGetPosition(lp_pUnit)), 1));
    TextExpressionSetToken("Param/Expression/lib_COTF_4C3CE427", "C", FixedToText(PointGetY(UnitGetPosition(lp_pUnit)), 1));
    lv_vText = TextExpressionAssemble("Param/Expression/lib_COTF_4C3CE427");
    if ((UnitFilterMatch(lp_pUnit, 1, UnitFilter(0, (1 << (c_targetFilterHidden - 32)), 0, 0)) == true)) {
        TextExpressionSetToken("Param/Expression/lib_COTF_C7D082A9", "B", lv_vText);
        lv_vText = TextExpressionAssemble("Param/Expression/lib_COTF_C7D082A9");
    }

    auto75929C83_u = lp_pUnit;
    auto75929C83_i = 1;
    for ( ; auto75929C83_i <= UnitBehaviorCountAll(auto75929C83_u) ; auto75929C83_i += BoolToInt(lv_vBeh == UnitBehaviorGet(auto75929C83_u, auto75929C83_i)) ) {
        lv_vBeh = UnitBehaviorGet(auto75929C83_u, auto75929C83_i);
        if ((UnitBehaviorCount(lp_pUnit, lv_vBeh) > 1)) {
            TextExpressionSetToken("Param/Expression/lib_COTF_B66C57A2", "A", IntToText(UnitBehaviorCount(lp_pUnit, lv_vBeh)));
            lv_vBehNumber = TextExpressionAssemble("Param/Expression/lib_COTF_B66C57A2");
        }
        else {
            lv_vBehNumber = StringToText("");
        }
        if ((UnitBehaviorDuration(lp_pUnit, lv_vBeh) > 0.0) && (UnitBehaviorDuration(lp_pUnit, lv_vBeh) < 32000.0)) {
            TextExpressionSetToken("Param/Expression/lib_COTF_B3CF3270", "A", FixedToText(UnitBehaviorDuration(lp_pUnit, lv_vBeh), 0));
            lv_vDuration = TextExpressionAssemble("Param/Expression/lib_COTF_B3CF3270");
        }
        else {
            lv_vDuration = StringToText("");
        }
        if ((UnitBehaviorEnabled(lp_pUnit, lv_vBeh) == false)) {
            TextExpressionSetToken("Param/Expression/lib_COTF_C46A32A8", "B", lv_vText);
            TextExpressionSetToken("Param/Expression/lib_COTF_C46A32A8", "A", StringToText((lv_vBeh)));
            TextExpressionSetToken("Param/Expression/lib_COTF_C46A32A8", "C", lv_vBehNumber);
            TextExpressionSetToken("Param/Expression/lib_COTF_C46A32A8", "D", lv_vDuration);
            lv_vText = TextExpressionAssemble("Param/Expression/lib_COTF_C46A32A8");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_COTF_62A5D9D1", "B", lv_vText);
            TextExpressionSetToken("Param/Expression/lib_COTF_62A5D9D1", "A", StringToText((lv_vBeh)));
            TextExpressionSetToken("Param/Expression/lib_COTF_62A5D9D1", "C", lv_vBehNumber);
            TextExpressionSetToken("Param/Expression/lib_COTF_62A5D9D1", "D", lv_vDuration);
            lv_vText = TextExpressionAssemble("Param/Expression/lib_COTF_62A5D9D1");
        }
    }
    if ((UnitFilterMatch(lp_pUnit, 1, UnitFilter(0, (1 << (c_targetFilterHidden - 32)), 0, 0)) == false)) {
        TextTagShow(lv_vTextTagHidden, PlayerGroupAll(), false);
        if ((lv_vTextTagNormal == c_textTagNone)) {
            TextTagCreate(lv_vText, 24, UnitGetPosition(lp_pUnit), 2.0, true, false, PlayerGroupAll());
            TextTagSetBackgroundImage(TextTagLastCreated(), "50Black.dds", false);
            TextTagShowBackground(TextTagLastCreated(), true);
            TextTagSetFontSize(TextTagLastCreated(), 16);
            TextTagSetAlignment(TextTagLastCreated(), c_alignLeft, c_alignCenter);
            TextTagSetBackgroundBorderSize(TextTagLastCreated(), 0.1, 0.1);
            TextTagSetTextShadow(TextTagLastCreated(), true);
            libHots_gf_StoreTextTagForUnit(lp_pUnit, libCOTF_gv_uT_TextTagPositionNormal, TextTagLastCreated());
            TextTagAttachToUnit(TextTagLastCreated(), lp_pUnit, 2.0);
        }
        else {
            TextTagShow(lv_vTextTagNormal, PlayerGroupAll(), true);
            TextTagSetText(lv_vTextTagNormal, lv_vText);
        }
    }
    else {
        TextTagShow(lv_vTextTagNormal, PlayerGroupAll(), false);
        if ((lv_vTextTagHidden == c_textTagNone)) {
            TextTagCreate(lv_vText, 24, UnitGetPosition(lp_pUnit), 2.0, true, false, PlayerGroupAll());
            TextTagSetBackgroundImage(TextTagLastCreated(), "50Black.dds", false);
            TextTagShowBackground(TextTagLastCreated(), true);
            TextTagSetFontSize(TextTagLastCreated(), 16);
            TextTagSetAlignment(TextTagLastCreated(), c_alignLeft, c_alignCenter);
            TextTagSetBackgroundBorderSize(TextTagLastCreated(), 0.1, 0.1);
            TextTagSetTextShadow(TextTagLastCreated(), true);
            libHots_gf_StoreTextTagForUnit(lp_pUnit, libCOTF_gv_uT_TextTagPositionHidden, TextTagLastCreated());
        }
        else {
            TextTagShow(lv_vTextTagHidden, PlayerGroupAll(), true);
            TextTagSetText(lv_vTextTagHidden, lv_vText);
            TextTagSetPosition(lv_vTextTagHidden, UnitGetPosition(lp_pUnit), 2.0);
        }
    }
}

void libCOTF_gf_UT_RemoveUnitInfo (unit lp_pUnit) {
    // Automatic Variable Declarations
    // Implementation
    TextTagShow(libCOTF_gf_TextTagForUnit(lp_pUnit, libCOTF_gv_uT_TextTagPositionNormal), PlayerGroupAll(), false);
    TextTagShow(libCOTF_gf_TextTagForUnit(lp_pUnit, libCOTF_gv_uT_TextTagPositionHidden), PlayerGroupAll(), false);
}

trigger auto_libCOTF_gf_StartswitchCreepFix_Trigger = null;
point auto_libCOTF_gf_StartswitchCreepFix_lp_pPoint;
fixed auto_libCOTF_gf_StartswitchCreepFix_lp_pRadius;

void libCOTF_gf_StartswitchCreepFix (point lp_pPoint, fixed lp_pRadius) {
    auto_libCOTF_gf_StartswitchCreepFix_lp_pPoint = lp_pPoint;
    auto_libCOTF_gf_StartswitchCreepFix_lp_pRadius = lp_pRadius;

    if (auto_libCOTF_gf_StartswitchCreepFix_Trigger == null) {
        auto_libCOTF_gf_StartswitchCreepFix_Trigger = TriggerCreate("auto_libCOTF_gf_StartswitchCreepFix_TriggerFunc");
    }

    TriggerExecute(auto_libCOTF_gf_StartswitchCreepFix_Trigger, false, false);
}

bool auto_libCOTF_gf_StartswitchCreepFix_TriggerFunc (bool testConds, bool runActions) {
    point lp_pPoint = auto_libCOTF_gf_StartswitchCreepFix_lp_pPoint;
    fixed lp_pRadius = auto_libCOTF_gf_StartswitchCreepFix_lp_pRadius;

    // Automatic Variable Declarations
    const int auto4C74CDB1_n = 30;
    int auto4C74CDB1_i;

    // Implementation
    for (auto4C74CDB1_i = 1; auto4C74CDB1_i <= auto4C74CDB1_n; auto4C74CDB1_i += 1) {
        Wait(0.1, c_timeGame);
        CreepModify(lp_pPoint, lp_pRadius, false, false);
        if ((CreepIsPresent(PointWithOffset(lp_pPoint, -3.0, 0.0)) == false)) {
            break;
        }

    }
    return true;
}

bool libCOTF_gf_UT_HotkeyStore (bank lp_pBank, int lp_pPlayer) {
    // Variable Declarations
    int lv_vIdx;
    bool lv_vStored;

    // Automatic Variable Declarations
    const int autoA6C7323E_ae = libCOTF_gv_uT_HotkeyStoreLength;
    const int autoA6C7323E_ai = 1;

    // Variable Initialization

    // Implementation
    lv_vIdx = 0;
    for ( ; ( (autoA6C7323E_ai >= 0 && lv_vIdx <= autoA6C7323E_ae) || (autoA6C7323E_ai < 0 && lv_vIdx >= autoA6C7323E_ae) ) ; lv_vIdx += autoA6C7323E_ai ) {
        if ((libCOTF_gv_uT_HotkeyToStoreButton[lv_vIdx][lp_pPlayer] != "")) {
            BankValueSetFromString(lp_pBank, "ModifiedHotkeys", libCOTF_gv_uT_HotkeyToStoreButton[lv_vIdx][lp_pPlayer], libCOTF_gv_uT_HotkeyToStoreValue[lv_vIdx][lp_pPlayer]);
            libCOTF_gv_uT_HotkeyToStoreButton[lv_vIdx][lp_pPlayer] = "";
            libCOTF_gv_uT_HotkeyToStoreValue[lv_vIdx][lp_pPlayer] = "";
            lv_vStored = true;
        }

    }
    return lv_vStored;
}

void libCOTF_gf_UT_HotkeyLoad (bank lp_pBank, int lp_pPlayer) {
    // Variable Declarations
    string lv_vButtonName;
    string lv_vHotkeyValue;

    // Automatic Variable Declarations
    int auto41D8C5EC_ae;
    int auto41D8C5EC_var;

    // Variable Initialization
    lv_vButtonName = "";
    lv_vHotkeyValue = "";

    // Implementation
    auto41D8C5EC_ae = BankKeyCount(lp_pBank, "ModifiedHotkeys");
    auto41D8C5EC_var = 1;
    for ( ; auto41D8C5EC_var <= auto41D8C5EC_ae; auto41D8C5EC_var += 1 ) {
        lv_vButtonName = BankKeyName(lp_pBank, "ModifiedHotkeys", (auto41D8C5EC_var-1));
        lv_vHotkeyValue = BankValueGetAsString(lp_pBank, "ModifiedHotkeys", lv_vButtonName);
        TextExpressionSetToken("Param/Expression/lib_COTF_9D56BF4A", "A", StringToText(lv_vButtonName));
        TextExpressionSetToken("Param/Expression/lib_COTF_9D56BF4A", "B", StringToText(lv_vHotkeyValue));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COTF_9D56BF4A"), false);
        CatalogFieldValueSet(c_gameCatalogButton, (lv_vButtonName), "Hotkey", lp_pPlayer, ("Letter/" + lv_vHotkeyValue));
    }
}

int libCOTF_gf_UT_DiffForPlayer (int lp_player) {
    // Automatic Variable Declarations
    int autoADFA2564_val;

    // Implementation
    autoADFA2564_val = libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player);
    if (autoADFA2564_val == 1) {
        return 1;
    }
    else if (autoADFA2564_val == 2) {
        return 2;
    }
    else if (autoADFA2564_val == 3) {
        return 3;
    }
    else if (autoADFA2564_val == 4) {
        return 4;
    }
    else if (autoADFA2564_val == 4) {
        return 5;
    }
    else if (autoADFA2564_val == 4) {
        return 6;
    }
    else {
        return -1;
    }
}

void libCOTF_gf_UT_RefreshTopBarZeratul (int lp_pPlayer) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetAnimationState(libCOUI_gv_cU_GPPanel[lp_pPlayer], PlayerGroupAll(), "CurrentArtifact", IntToString((libCOMI_gv_cM_ZeratulProphecyArtifactNumber + 0)));
    if ((PlayerGetCooldown(lp_pPlayer, "Abil/ProphecyVision") <= 0.0) && (TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactTier3", c_techCountCompleteOnly) == 0)) {
        DialogControlSetAnimationState(libCOUI_gv_cU_GPPanel[lp_pPlayer], PlayerGroupAll(), "ProphecyState", "Ready");
    }

    if (((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier0A", c_techCountCompleteOnly) >= 1) || (TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier0B", c_techCountCompleteOnly) >= 1) || (TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier0C", c_techCountCompleteOnly) >= 1))) {
        DialogControlSetAnimationState(libCOUI_gv_cU_ZeratulSelectionButtonContainers[0], PlayerGroupAll(), "ArtifactState", "Used");
    }
    else {
        DialogControlSetAnimationState(libCOUI_gv_cU_ZeratulSelectionButtonContainers[0], PlayerGroupAll(), "ArtifactState", "Collected");
    }
    if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactTier1", c_techCountCompleteOnly) >= 1)) {
        if (((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1A", c_techCountCompleteOnly) >= 1) || (TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1B", c_techCountCompleteOnly) >= 1) || (TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1C", c_techCountCompleteOnly) >= 1))) {
            DialogControlSetAnimationState(libCOUI_gv_cU_ZeratulSelectionButtonContainers[1], PlayerGroupAll(), "ArtifactState", "Used");
        }
        else {
            DialogControlSetAnimationState(libCOUI_gv_cU_ZeratulSelectionButtonContainers[1], PlayerGroupAll(), "ArtifactState", "Collected");
        }
    }
    else {
        DialogControlSetAnimationState(libCOUI_gv_cU_ZeratulSelectionButtonContainers[1], PlayerGroupAll(), "ArtifactState", "NotCollected");
    }
    if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactTier2", c_techCountCompleteOnly) >= 1)) {
        if (((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier2A", c_techCountCompleteOnly) >= 1) || (TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier2B", c_techCountCompleteOnly) >= 1) || (TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier2C", c_techCountCompleteOnly) >= 1))) {
            DialogControlSetAnimationState(libCOUI_gv_cU_ZeratulSelectionButtonContainers[2], PlayerGroupAll(), "ArtifactState", "Used");
        }
        else {
            DialogControlSetAnimationState(libCOUI_gv_cU_ZeratulSelectionButtonContainers[2], PlayerGroupAll(), "ArtifactState", "Collected");
        }
    }
    else {
        DialogControlSetAnimationState(libCOUI_gv_cU_ZeratulSelectionButtonContainers[2], PlayerGroupAll(), "ArtifactState", "NotCollected");
    }
    if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactTier3", c_techCountCompleteOnly) >= 1)) {
        if (((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier3A", c_techCountCompleteOnly) >= 1) || (TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier3B", c_techCountCompleteOnly) >= 1) || (TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier3C", c_techCountCompleteOnly) >= 1))) {
            DialogControlSetAnimationState(libCOUI_gv_cU_ZeratulSelectionButtonContainers[3], PlayerGroupAll(), "ArtifactState", "Used");
        }
        else {
            DialogControlSetAnimationState(libCOUI_gv_cU_ZeratulSelectionButtonContainers[3], PlayerGroupAll(), "ArtifactState", "Collected");
        }
    }
    else {
        DialogControlSetAnimationState(libCOUI_gv_cU_ZeratulSelectionButtonContainers[3], PlayerGroupAll(), "ArtifactState", "NotCollected");
    }
}

void libCOTF_gf_UT_RefreshTopBarTychus (int lp_pPlayer) {
    // Variable Declarations
    int lv_vA;
    fixed lv_vCharges;
    unit lv_vUnit;
    string lv_vUnitType;
    string lv_vSquadInstance;
    unitgroup lv_vUG;
    int lv_vSquadIndex;

    // Automatic Variable Declarations
    string autoDB717206_userType;
    int autoDB717206_i;
    const int auto72D227C1_ae = 4;
    int auto72D227C1_var;
    unitgroup autoBDFAD36D_g;
    int autoBDFAD36D_u;
    unit autoBDFAD36D_var;

    // Variable Initialization
    lv_vCharges = UnitAbilityChargeInfo(UnitGroupUnit(UnitGroup("TychusResearchCenterUnlocked", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), AbilityCommand("TychusBarracksTrain", 0), c_unitAbilChargeCountLeft);
    lv_vUnit = UnitGroupRandomUnit(UnitGroupSelected(1), c_unitCountAlive);
    lv_vUG = UnitGroupEmpty();

    // Implementation
    autoDB717206_userType = libCOMI_gv_cM_Tychus_UserTypeHeroList;
    autoDB717206_i = 1;
    for ( ; autoDB717206_i <= UserDataInstanceCount(autoDB717206_userType) ; autoDB717206_i += 1 ) {
        lv_vSquadInstance = UserDataInstance(autoDB717206_userType, autoDB717206_i);
        lv_vSquadIndex = UserDataGetInt("CoopTechTychusSquad", lv_vSquadInstance, "Squad Slot", 1);
        lv_vUnitType = UserDataGetUnit(libCOMI_gv_cM_Tychus_UserTypeHeroList, lv_vSquadInstance, "Unit Type", 1);
        lv_vUG = UnitGroup(lv_vUnitType, lp_pPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), 0), 0);
        lv_vUnit = UnitGroupUnit(lv_vUG, 1);
        if (((lv_vSquadIndex >= 1) || (lv_vUnitType == "TychusCoop"))) {
            if ((lv_vUnitType == "TychusCoop")) {
                lv_vSquadIndex = 0;
            }

            TriggerDebugOutput(1, UnitGetName(lv_vUnit), true);
            libCOUI_gf_SetTychusSquadMember(lv_vUnit, lv_vSquadIndex, lv_vSquadInstance);
            lv_vA += 1;
            if ((UnitIsAlive(lv_vUnit) == false)) {
                DialogControlSetAnimationState(libCOUI_gv_cU_TychusSquadUnitFrames[lv_vSquadIndex], PlayerGroupAll(), "DeathState", "Dead");
            }

            DialogControlSetAnimationState(libCOUI_gv_cU_TychusSquadUnitFrames[UserDataGetInt("CoopTechTychusSquad", lv_vSquadInstance, "Squad Slot", 1)], PlayerGroupAll(), "EquipmentState", IntToString(UserDataGetInt("CoopTechTychusSquad", lv_vSquadInstance, "EquipCount", 1)));
        }

    }
    auto72D227C1_var = lv_vA;
    for ( ; auto72D227C1_var <= auto72D227C1_ae; auto72D227C1_var += 1 ) {
        if ((lv_vCharges >= 1)) {
            DialogControlSetAnimationState(libCOUI_gv_cU_TychusSquadUnitFrames[auto72D227C1_var], PlayerGroupAll(), "AvailabilityState", "Available");
            lv_vCharges -= 1.0;
        }

    }
    lv_vA = 0;
    autoBDFAD36D_g = UnitGroup("TychusMedivacPlatform", lp_pPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBDFAD36D_u = UnitGroupCount(autoBDFAD36D_g, c_unitCountAll);
    for (;; autoBDFAD36D_u -= 1) {
        autoBDFAD36D_var = UnitGroupUnitFromEnd(autoBDFAD36D_g, autoBDFAD36D_u);
        if (autoBDFAD36D_var == null) { break; }
        if ((UnitAbilityGetCooldown(autoBDFAD36D_var, "TychusMedicTransportLoadUnits", "Abil/TychusMedicTransportLoadUnits") <= 0.0)) {
            lv_vA += 1;
        }

    }
    libCOUI_gv_cU_TychusMedivacCurrentCharges = lv_vA;
    DialogControlSetAnimationState(libCOUI_gv_cU_TychusSquadContainer, PlayerGroupAll(), "AbilityCurrentChargesState", IntToString(libCOUI_gv_cU_TychusMedivacCurrentCharges));
}

void libCOTF_gf_CM_ZeratulProphecyArtifactBadRegion_Set () {
    // Automatic Variable Declarations
    unitgroup autoB180519A_g;
    int autoB180519A_u;
    unit autoB180519A_var;

    // Implementation
    libCOTF_gv_cM_ZeratulProphecyArtifactBadRegion = null;
    autoB180519A_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), (1 << (c_targetFilterInvulnerable - 32)), 0, (1 << (c_targetFilterDead - 32))), 0);
    autoB180519A_u = UnitGroupCount(autoB180519A_g, c_unitCountAll);
    for (;; autoB180519A_u -= 1) {
        autoB180519A_var = UnitGroupUnitFromEnd(autoB180519A_g, autoB180519A_u);
        if (autoB180519A_var == null) { break; }
        if ((libCOTF_gv_cM_ZeratulProphecyArtifactBadRegion == null)) {
            libCOTF_gv_cM_ZeratulProphecyArtifactBadRegion = RegionCircle(UnitGetPosition(autoB180519A_var), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, UnitGetType(autoB180519A_var), "Radius", UnitGetOwner(autoB180519A_var)));
        }
        else {
            RegionAddRegion(libCOTF_gv_cM_ZeratulProphecyArtifactBadRegion, RegionCircle(UnitGetPosition(autoB180519A_var), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, UnitGetType(autoB180519A_var), "Radius", UnitGetOwner(autoB180519A_var))));
        }
    }
}

point libCOTF_gf_UT_Zeratul_FindArtifactPlacementPointNewDebug (int lp_artifactNumber) {
    // Variable Declarations
    string lv_artifactPlacementData;
    int lv_artifactIndex;
    point lv_artifactOrigin;
    fixed lv_minSearchRadius;
    fixed lv_maxSearchRadius;
    fixed lv_maxWalkingDistance;
    bool lv_checkPathing;
    point lv_pathingCheckPoint;
    fixed lv_nearbyUnitHealth;
    fixed lv_nearbyUnitHealthLimit;
    fixed lv_zeratulSearchRadius;
    bool lv_pointIsPassableAndNotNearZeratul;
    fixed lv_distanceBetweenPoints;
    fixed lv_angleDelta;
    fixed lv_angleIter;
    point lv_pointIter;
    fixed lv_radiusIter;
    int lv_validPointsCount;
    point lv_pickedPoint;
    unit lv_dEBUG_lastPicked;

    // Automatic Variable Declarations
    fixed autoC88E557C_ae;
    fixed autoC88E557C_ai;
    const fixed auto46454271_ae = 360.0;
    fixed auto46454271_ai;
    unitgroup auto5179C43B_g;
    int auto5179C43B_u;
    unit auto5179C43B_var;

    // Variable Initialization
    lv_artifactPlacementData = libCOMI_gf_CM_Zeratul_GetArtifactPlacementDataInstance();
    lv_artifactIndex = libCOMI_gf_CM_Zeratul_GetArtifactDifficultyIndex(lp_artifactNumber, lv_artifactPlacementData);
    lv_artifactOrigin = libCOMI_gf_CM_Zeratul_GetArtifactPlacementOrigin(lv_artifactPlacementData);
    lv_minSearchRadius = UserDataGetFixed("CoopTechZeratulArtifactPlacement", lv_artifactPlacementData, "minSearchRadius", lv_artifactIndex);
    lv_maxSearchRadius = UserDataGetFixed("CoopTechZeratulArtifactPlacement", lv_artifactPlacementData, "maxSearchRadius", lv_artifactIndex);
    lv_maxWalkingDistance = UserDataGetFixed("CoopTechZeratulArtifactPlacement", lv_artifactPlacementData, "maxWalkingDistance", lv_artifactIndex);
    lv_checkPathing = (UserDataGetInt("CoopTechZeratulArtifactPlacement", lv_artifactPlacementData, "checkPathing", lv_artifactIndex) != 0);
    lv_pathingCheckPoint = UnitTypePlacementFromPoint("ZeratulCoop", libCOMI_gv_cM_ZeratulPlayer, lv_artifactOrigin, 500.0);
    lv_nearbyUnitHealthLimit = UserDataGetFixed("CoopTechZeratulArtifactPlacement", lv_artifactPlacementData, "maxNearbyHealth", lv_artifactIndex);
    lv_zeratulSearchRadius = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "ProphecyArtifactRevealSearch", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny);
    lv_distanceBetweenPoints = UserDataGetFixed("CoopTechZeratulArtifactPlacement", lv_artifactPlacementData, "distanceBetweenPoints", 1);

    // Implementation
    libCOTF_gf_CM_ZeratulProphecyArtifactBadRegion_Set();
    autoC88E557C_ae = lv_minSearchRadius;
    autoC88E557C_ai = (0.0 - lv_distanceBetweenPoints);
    lv_radiusIter = lv_maxSearchRadius;
    for ( ; ( (autoC88E557C_ai >= 0 && lv_radiusIter <= autoC88E557C_ae) || (autoC88E557C_ai < 0 && lv_radiusIter >= autoC88E557C_ae) ) ; lv_radiusIter += autoC88E557C_ai ) {
        lv_angleDelta = (ASin(((lv_distanceBetweenPoints / 2.0) / lv_radiusIter)) * 2.0);
        auto46454271_ai = lv_angleDelta;
        lv_angleIter = RandomFixed(0.0, lv_angleDelta);
        for ( ; ( (auto46454271_ai >= 0 && lv_angleIter <= auto46454271_ae) || (auto46454271_ai < 0 && lv_angleIter >= auto46454271_ae) ) ; lv_angleIter += auto46454271_ai ) {
            lv_pointIter = PointWithOffsetPolar(lv_artifactOrigin, lv_radiusIter, lv_angleIter);
            lv_pointIsPassableAndNotNearZeratul = ((PointPathingPassable(lv_pointIter) == true) && (!(UnitIsAlive(libCOMI_gv_cM_HeroUnit[libCOMI_gv_cM_ZeratulPlayer])) || (DistanceBetweenPoints(UnitGetPosition(libCOMI_gv_cM_HeroUnit[libCOMI_gv_cM_ZeratulPlayer]), lv_pointIter) > lv_zeratulSearchRadius)) && (RegionContainsPoint(libCOTF_gv_cM_ZeratulProphecyArtifactBadRegion, lv_pointIter) == false));
            if ((lv_pointIsPassableAndNotNearZeratul == true) && ((lv_checkPathing == false) || (PointPathingIsConnected(lv_pathingCheckPoint, lv_pointIter) == true)) && ((lv_maxWalkingDistance == 0.0) || (PointPathingCost(lv_pathingCheckPoint, lv_pointIter) <= FixedToInt(lv_maxWalkingDistance)))) {
                if ((lv_nearbyUnitHealthLimit > 0.0)) {
                    lv_nearbyUnitHealth = 0;
                    auto5179C43B_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMI_gv_cM_ZeratulPlayer, c_unitAllianceEnemy, RegionCircle(lv_pointIter, 10.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    auto5179C43B_u = UnitGroupCount(auto5179C43B_g, c_unitCountAll);
                    for (;; auto5179C43B_u -= 1) {
                        auto5179C43B_var = UnitGroupUnitFromEnd(auto5179C43B_g, auto5179C43B_u);
                        if (auto5179C43B_var == null) { break; }
                        if (((UnitFilterMatch(auto5179C43B_var, UnitGetOwner(auto5179C43B_var), UnitFilter(0, 0, (1 << c_targetFilterStructure), 0)) == true) || (UnitGetType(auto5179C43B_var) == "PhotonCannon") || (UnitGetType(auto5179C43B_var) == "SpineCrawler") || (UnitGetType(auto5179C43B_var) == "Bunker"))) {
                            lv_nearbyUnitHealth += UnitGetPropertyFixed(auto5179C43B_var, c_unitPropLife, c_unitPropCurrent);
                            lv_nearbyUnitHealth += UnitGetPropertyFixed(auto5179C43B_var, c_unitPropShields, c_unitPropCurrent);
                        }

                    }
                }

                if (((lv_nearbyUnitHealthLimit <= 0.0) || (lv_nearbyUnitHealth <= lv_nearbyUnitHealthLimit))) {
                    lv_validPointsCount += 1;
                    if ((UnitGroupCount(UnitGroup("ShapeSphere", c_playerAny, RegionCircle(lv_pointIter, 0.2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShapeSphere", 0, libCOTF_gv_uT_ArtSpawnPlayer, lv_pointIter);
                        UnitSetTeamColorIndex(UnitLastCreated(), libCOTF_gv_uT_ArtSpawnColor);
                    }

                    if ((RandomFixed(0.0, 1.0) <= (1.0 / lv_validPointsCount))) {
                        lv_pickedPoint = lv_pointIter;
                    }

                }

            }
        }
    }
    if ((lv_validPointsCount == 0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COTF_E98DDF2A"), true);
        return UnitTypePlacementFromPoint("ZeratulArtifactPickup1", libCOMI_gv_cM_ZeratulPlayer, lv_artifactOrigin, 0.0);
    }

    return lv_pickedPoint;
}

int libCOTF_gf_UT_TotalDamageHeal (int lp_pPlayer, int lp_pDamageHeal) {
    // Variable Declarations
    int lv_vTotalDamageHeal;
    int lv_vDamageHeal;

    // Automatic Variable Declarations
    const int auto3CFB5F00_ae = libCOTF_gv_uT_DL_MaxUnits;
    int auto3CFB5F00_var;

    // Variable Initialization

    // Implementation
    if ((lp_pDamageHeal == libCOTF_ge_DamageHeal_Damage)) {
        lv_vDamageHeal = 0;
    }
    else {
        lv_vDamageHeal = 1;
    }
    auto3CFB5F00_var = 1;
    for ( ; auto3CFB5F00_var <= auto3CFB5F00_ae; auto3CFB5F00_var += 1 ) {
        if ((libCOTF_gv_uT_DL_Data[auto3CFB5F00_var][lv_vDamageHeal][lp_pPlayer].lv_unitType != null)) {
            lv_vTotalDamageHeal += libCOTF_gf_UT_DL_SumHealingDamage(auto3CFB5F00_var, lv_vDamageHeal, lp_pPlayer);
        }

    }
    return lv_vTotalDamageHeal;
}

string libCOTF_gf_UT_CommanderScoreSelfStatistic (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "ScoreStatisticSelf", 1);
}

string libCOTF_gf_UT_CommanderScoreCoopStatistic (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "ScoreStatisticCoop", 1);
}

string libCOTF_gf_UT_MapScoreStatistic (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Maps", libCOOC_gf_CC_MapUserDataInstance(lp_map), "ScoreStatistic", 1);
}

void libCOTF_gf_UT_CreatePieChartfromDamageLog (int lp_pPlayer, int lp_pOffsetX, int lp_pOffsetY, int lp_pAnchor, int lp_pColorShift) {
    // Variable Declarations
    const int lv_vMaxChartUnits = 15;
    const int lv_vMinimumPromile = 10;
    text lv_vTotalDamageName;
    int lv_vIndex;
    int lv_vTotalDamage;
    int[lv_vMaxChartUnits + 1] lv_vTempDamage;
    text[lv_vMaxChartUnits + 1] lv_vTempUnitTypeName;
    text lv_vTitle;

    // Automatic Variable Declarations
    const int auto9F93513B_ae = libCOTF_gv_uT_DL_MaxUnits;
    int auto9F93513B_var;
    const int auto33681AA6_ae = libCOTF_gv_uT_DL_MaxUnits;
    int auto33681AA6_var;

    // Variable Initialization
    lv_vTotalDamageName = StringExternal("Param/Value/lib_COTF_5B40C5BB");
    lv_vTotalDamage = 1;

    // Implementation
    lv_vTotalDamage = 0;
    auto9F93513B_var = 1;
    for ( ; auto9F93513B_var <= auto9F93513B_ae; auto9F93513B_var += 1 ) {
        if ((libCOTF_gv_uT_DL_Data[auto9F93513B_var][0][lp_pPlayer].lv_unitType != null)) {
            lv_vTotalDamage += libCOTF_gf_UT_DL_SumHealingDamage(auto9F93513B_var, 0, lp_pPlayer);
        }

    }
    if ((lv_vTotalDamage <= 1)) {
        return ;
    }

    auto33681AA6_var = 1;
    for ( ; auto33681AA6_var <= auto33681AA6_ae; auto33681AA6_var += 1 ) {
        if ((libCOTF_gv_uT_DL_Data[auto33681AA6_var][0][lp_pPlayer].lv_unitType != null) && (lv_vMinimumPromile <= (libCOTF_gf_UT_DL_SumHealingDamage(auto33681AA6_var, 0, lp_pPlayer) / (lv_vTotalDamage/1000)))) {
            lv_vIndex += 1;
            lv_vTempDamage[lv_vIndex] = libCOTF_gf_UT_DL_SumHealingDamage(auto33681AA6_var, 0, lp_pPlayer);
            lv_vTempUnitTypeName[lv_vIndex] = libCOTF_gf_UT_NameOfUnitType(libCOTF_gv_uT_DL_Data[auto33681AA6_var][0][lp_pPlayer].lv_unitType);
            if ((lv_vIndex == lv_vMaxChartUnits)) {
                break;
            }

        }

    }
    if ((PlayerStatus(lp_pPlayer) != c_playerStatusUnused)) {
        lv_vTitle = PlayerName(lp_pPlayer);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_COTF_09053BD1", "A", IntToText(lp_pPlayer));
        lv_vTitle = TextExpressionAssemble("Param/Expression/lib_COTF_09053BD1");
    }
    TextExpressionSetToken("Param/Expression/lib_COTF_2E69CA22", "B", lv_vTotalDamageName);
    TextExpressionSetToken("Param/Expression/lib_COTF_2E69CA22", "A", StringToText(libCOTF_gf_UT_FormatInteger(lv_vTotalDamage, " ")));
    libCOTF_gf_UT_CreatePieChart(lp_pOffsetX, lp_pOffsetY, lp_pAnchor, lp_pColorShift, lv_vTitle, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_pPlayer, false)), TextExpressionAssemble("Param/Expression/lib_COTF_2E69CA22"), lp_pPlayer, lv_vTempUnitTypeName[1], lv_vTempDamage[1], lv_vTempUnitTypeName[2], lv_vTempDamage[2], lv_vTempUnitTypeName[3], lv_vTempDamage[3], lv_vTempUnitTypeName[4], lv_vTempDamage[4], lv_vTempUnitTypeName[5], lv_vTempDamage[5], lv_vTempUnitTypeName[6], lv_vTempDamage[6], lv_vTempUnitTypeName[7], lv_vTempDamage[7], lv_vTempUnitTypeName[8], lv_vTempDamage[8], lv_vTempUnitTypeName[9], lv_vTempDamage[9], lv_vTempUnitTypeName[10], lv_vTempDamage[10], lv_vTempUnitTypeName[11], lv_vTempDamage[11], lv_vTempUnitTypeName[12], lv_vTempDamage[12], lv_vTempUnitTypeName[13], lv_vTempDamage[13], lv_vTempUnitTypeName[14], lv_vTempDamage[14], lv_vTempUnitTypeName[15], lv_vTempDamage[15]);
}

void libCOTF_gf_UT_CreatePieChart (int lp_pOffsetX, int lp_pOffsetY, int lp_pAnchor, int lp_pColorShift, text lp_pTitle, color lp_pTitleColor, text lp_pSubTitle, int lp_pPlayer, text lp_pLabel1, int lp_pDamage1, text lp_pLabel2, int lp_pDamage2, text lp_pLabel3, int lp_pDamage3, text lp_pLabel4, int lp_pDamage4, text lp_pLabel5, int lp_pDamage5, text lp_pLabel6, int lp_pDamage6, text lp_pLabel7, int lp_pDamage7, text lp_pLabel8, int lp_pDamage8, text lp_pLabel9, int lp_pDamage9, text lp_pLabel10, int lp_pDamage10, text lp_pLabel11, int lp_pDamage11, text lp_pLabel12, int lp_pDamage12, text lp_pLabel13, int lp_pDamage13, text lp_pLabel14, int lp_pDamage14, text lp_pLabel15, int lp_pDamage15) {
    // Variable Declarations
    const int lv_cMAXUNITS = 15;
    const int lv_cPARTS = 360;
    const fixed lv_cHALF = 72.0;
    int[lv_cMAXUNITS + 1] lv_vDamage;
    text[lv_cMAXUNITS + 1] lv_vLabel;
    int lv_vSum;
    int lv_vActiveUnits;
    int lv_vCurrentUnit;
    int lv_vUnitPhase;
    int lv_vMin;
    int lv_vMax;
    color lv_vColor;
    int lv_vSlice;
    int lv_vAngle;
    const fixed lv_cPercentDistance = 1.5;
    const fixed lv_cNameDistance = 3.3;
    fixed lv_vPercent;
    int[lv_cMAXUNITS + 1] lv_vLabelX;
    int[lv_cMAXUNITS + 1] lv_vLabelY;
    int[lv_cMAXUNITS + 1] lv_vPercentX;
    int[lv_cMAXUNITS + 1] lv_vPercentY;
    fixed lv_vSpread;
    fixed lv_vPercentDistanceIter;
    text lv_vAdditionalScore;

    // Automatic Variable Declarations
    const int autoE90BA885_ae = lv_cMAXUNITS;
    int autoE90BA885_var;
    const int autoE5F30F88_ae = lv_cMAXUNITS;
    const int autoE5F30F88_ai = 1;
    int autoEDC7E7A7_ae;
    const int autoEDC7E7A7_ai = 1;
    const int autoF4C7B02D_n = 200;
    int autoF4C7B02D_i;
    int autoA7CE0A4A_ae;
    int autoA7CE0A4A_var;
    int autoD20B8B01_val;
    const int autoCADDF133_ae = 50;
    int autoCADDF133_var;
    const int autoDDC12529_n = 200;
    int autoDDC12529_i;
    int auto2EE9F250_ae;
    int auto2EE9F250_var;

    // Variable Initialization
    lv_vSum = 10;
    lv_vMax = -1;
    lv_vColor = Color(0,0,0);
    lv_vPercentDistanceIter = 1.5;

    // Implementation
    lv_vDamage[1] = lp_pDamage1;
    lv_vDamage[2] = lp_pDamage2;
    lv_vDamage[3] = lp_pDamage3;
    lv_vDamage[4] = lp_pDamage4;
    lv_vDamage[5] = lp_pDamage5;
    lv_vDamage[6] = lp_pDamage6;
    lv_vDamage[7] = lp_pDamage7;
    lv_vDamage[8] = lp_pDamage8;
    lv_vDamage[9] = lp_pDamage9;
    lv_vDamage[10] = lp_pDamage10;
    lv_vDamage[11] = lp_pDamage11;
    lv_vDamage[12] = lp_pDamage12;
    lv_vDamage[13] = lp_pDamage13;
    lv_vDamage[14] = lp_pDamage14;
    lv_vDamage[15] = lp_pDamage15;
    lv_vLabel[1] = lp_pLabel1;
    lv_vLabel[2] = lp_pLabel2;
    lv_vLabel[3] = lp_pLabel3;
    lv_vLabel[4] = lp_pLabel4;
    lv_vLabel[5] = lp_pLabel5;
    lv_vLabel[6] = lp_pLabel6;
    lv_vLabel[7] = lp_pLabel7;
    lv_vLabel[8] = lp_pLabel8;
    lv_vLabel[9] = lp_pLabel9;
    lv_vLabel[10] = lp_pLabel10;
    lv_vLabel[11] = lp_pLabel11;
    lv_vLabel[12] = lp_pLabel12;
    lv_vLabel[13] = lp_pLabel13;
    lv_vLabel[14] = lp_pLabel14;
    lv_vLabel[15] = lp_pLabel15;
    lv_vLabel[15] = lp_pLabel15;
    lv_vSum = 0;
    autoE90BA885_var = 1;
    for ( ; autoE90BA885_var <= autoE90BA885_ae; autoE90BA885_var += 1 ) {
        if ((lv_vDamage[autoE90BA885_var] > 0)) {
            lv_vSum += lv_vDamage[autoE90BA885_var];
            lv_vActiveUnits += 1;
        }

    }
    if ((lv_vSum <= 10)) {
        return ;
    }

    DialogCreate(800, 800, lp_pAnchor, lp_pOffsetX, lp_pOffsetY, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 555);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 600, 100, c_anchorTop, 0, 0, lp_pTitle, ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AF_PieTitle", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lp_pTitleColor, PlayerGroupAll());
    if ((libCOOC_gf_ActiveCommanderForPlayer(lp_pPlayer) == "ZergDehaka")) {
        TextExpressionSetToken("Param/Expression/lib_COTF_91F69A36", "A", libCOTF_gf_UT_RealSecondsIntoTimeFormat(PlayerScoreValueGetAsFixed(lp_pPlayer, "Devouroffcooldown")));
        lv_vAdditionalScore = TextExpressionAssemble("Param/Expression/lib_COTF_91F69A36");
    }

    if ((libCOOC_gf_ActiveCommanderForPlayer(lp_pPlayer) == "TerranMengsk")) {
        TextExpressionSetToken("Param/Expression/lib_COTF_9CF786E9", "A", FixedToText(PlayerScoreValueGetAsFixed(lp_pPlayer, "DamageDealtbyContaminatedStrike"), 0));
        TextExpressionSetToken("Param/Expression/lib_COTF_9CF786E9", "B", FixedToText((100*PlayerScoreValueGetAsFixed(lp_pPlayer, "DamageDealtbyContaminatedStrike")/libCOTF_gf_UT_TotalDamageHeal(lp_pPlayer, libCOTF_ge_DamageHeal_Damage)), 0));
        lv_vAdditionalScore = TextExpressionAssemble("Param/Expression/lib_COTF_9CF786E9");
    }

    TextExpressionSetToken("Param/Expression/lib_COTF_DE0E199C", "A", null);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 80, c_anchorTop, 0, 0, TextExpressionAssemble("Param/Expression/lib_COTF_DE0E199C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    TextExpressionSetToken("Param/Expression/lib_COTF_DD9E0DE8", "A", IntToText(PlayerScoreValueGetAsInt(lp_pPlayer, "UnitsKilledCount")));
    TextExpressionSetToken("Param/Expression/lib_COTF_DD9E0DE8", "B", IntToText(PlayerScoreValueGetAsInt(lp_pPlayer, "UnitsTrainedCount")));
    TextExpressionSetToken("Param/Expression/lib_COTF_DD9E0DE8", "D", IntToText(PlayerScoreValueGetAsInt(lp_pPlayer, "UnitsLostCount")));
    TextExpressionSetToken("Param/Expression/lib_COTF_DD9E0DE8", "C", FixedToText((IntToFixed(libCOTF_gf_UT_TotalDamageHeal(2, libCOTF_ge_DamageHeal_Heal)) - PlayerScoreValueGetAsFixed(lp_pPlayer, "ShieldsHealedTotal")), 0));
    TextExpressionSetToken("Param/Expression/lib_COTF_DD9E0DE8", "E", IntToText(PlayerScoreValueGetAsInt(lp_pPlayer, "ShieldsHealedTotal")));
    TextExpressionSetToken("Param/Expression/lib_COTF_DD9E0DE8", "I", IntToText(PlayerScoreValueGetAsInt(lp_pPlayer, "EnergySpentTotal")));
    TextExpressionSetToken("Param/Expression/lib_COTF_DD9E0DE8", "F", IntToText(PlayerScoreValueGetAsInt(lp_pPlayer, "MineralsCollected")));
    TextExpressionSetToken("Param/Expression/lib_COTF_DD9E0DE8", "G", IntToText(PlayerScoreValueGetAsInt(lp_pPlayer, "VespeneCollected")));
    TextExpressionSetToken("Param/Expression/lib_COTF_DD9E0DE8", "H", IntToText((PlayerScoreValueGetAsInt(lp_pPlayer, "MineralsSpent") + PlayerScoreValueGetAsInt(lp_pPlayer, "VespeneSpent"))));
    TextExpressionSetToken("Param/Expression/lib_COTF_DD9E0DE8", "J", StringExternal(("ScoreValue/Name/" + (libCOTF_gf_UT_CommanderScoreSelfStatistic(libCOOC_gf_ActiveCommanderForPlayer(lp_pPlayer))))));
    TextExpressionSetToken("Param/Expression/lib_COTF_DD9E0DE8", "K", IntToText(PlayerScoreValueGetAsInt(lp_pPlayer, libCOTF_gf_UT_CommanderScoreSelfStatistic(libCOOC_gf_ActiveCommanderForPlayer(lp_pPlayer)))));
    TextExpressionSetToken("Param/Expression/lib_COTF_DD9E0DE8", "L", StringExternal(("ScoreValue/Name/" + (libCOTF_gf_UT_CommanderScoreCoopStatistic(libCOOC_gf_ActiveCommanderForPlayer(lp_pPlayer))))));
    TextExpressionSetToken("Param/Expression/lib_COTF_DD9E0DE8", "M", IntToText(PlayerScoreValueGetAsInt(lp_pPlayer, libCOTF_gf_UT_CommanderScoreCoopStatistic(libCOOC_gf_ActiveCommanderForPlayer(lp_pPlayer)))));
    TextExpressionSetToken("Param/Expression/lib_COTF_DD9E0DE8", "N", StringExternal(("ScoreValue/Name/" + (libCOTF_gf_UT_MapScoreStatistic(libCOOC_gf_CC_CurrentMap())))));
    TextExpressionSetToken("Param/Expression/lib_COTF_DD9E0DE8", "O", IntToText(PlayerScoreValueGetAsInt(lp_pPlayer, libCOTF_gf_UT_MapScoreStatistic(libCOOC_gf_CC_CurrentMap()))));
    TextExpressionSetToken("Param/Expression/lib_COTF_DD9E0DE8", "P", lv_vAdditionalScore);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_COTF_DD9E0DE8"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 600, 100, c_anchorTop, 0, 32, lp_pSubTitle, ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AF_PieSubtitle", PlayerGroupAll());
    lv_vUnitPhase = 1;
    for ( ; ( (autoE5F30F88_ai >= 0 && lv_vUnitPhase <= autoE5F30F88_ae) || (autoE5F30F88_ai < 0 && lv_vUnitPhase >= autoE5F30F88_ae) ) ; lv_vUnitPhase += autoE5F30F88_ai ) {
        if ((lv_vDamage[lv_vUnitPhase] > 0)) {
            lv_vPercent = (IntToFixed((lv_vDamage[lv_vUnitPhase] / ((lv_vSum / 1000)))) / 10);
            lv_vColor = libCOTF_gf_UT_NewColor((lp_pColorShift + lv_vUnitPhase));
            lv_vCurrentUnit += 1;
            lv_vMin = (lv_vMax + 1);
            if ((lv_vCurrentUnit == lv_vActiveUnits)) {
                lv_vMax = (lv_cPARTS - 2);
            }
            else {
                lv_vMax = (lv_vMin - 1 + (lv_cPARTS * (lv_vDamage[lv_vUnitPhase]  / ((lv_vSum / 1000)))) / 1000);
            }
            autoEDC7E7A7_ae = lv_vMax;
            lv_vSlice = lv_vMin;
            for ( ; ( (autoEDC7E7A7_ai >= 0 && lv_vSlice <= autoEDC7E7A7_ae) || (autoEDC7E7A7_ai < 0 && lv_vSlice >= autoEDC7E7A7_ae) ) ; lv_vSlice += autoEDC7E7A7_ai ) {
                lv_vAngle = RoundI((IntToFixed(lv_vSlice) * (360 / IntToFixed(lv_cPARTS))));
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 10, 144, c_anchorTopLeft, 0, 0, StringToText(""), "AF_slice.dds", c_triggerImageTypeNormal, false, lv_vColor, c_triggerBlendModeNormal);
                libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), lv_vAngle, PlayerGroupAll());
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, FixedToInt((lv_cHALF * Sin(IntToFixed(lv_vAngle)))), FixedToInt((- lv_cHALF * Cos(IntToFixed(lv_vAngle)))));
            }
            lv_vAngle = RoundI(((IntToFixed(((lv_vMin + lv_vMax ) /2)) + 0.5) * (360 / IntToFixed(lv_cPARTS))));
            lv_vLabelY[lv_vUnitPhase] = FixedToInt((-lv_cNameDistance* lv_cHALF * Cos(IntToFixed(lv_vAngle))));
            lv_vLabelX[lv_vUnitPhase] = FixedToInt((lv_cNameDistance * lv_cHALF * Sin(IntToFixed(lv_vAngle))));
            lv_vSpread = 10.0;
            for (autoF4C7B02D_i = 1; autoF4C7B02D_i <= autoF4C7B02D_n; autoF4C7B02D_i += 1) {
                lv_vSpread += 0.3;
                autoA7CE0A4A_ae = (lv_vUnitPhase - 1);
                autoA7CE0A4A_var = 1;
                for ( ; autoA7CE0A4A_var <= autoA7CE0A4A_ae; autoA7CE0A4A_var += 1 ) {
                    if ((libCOTF_gf_UT_LabelsTooClose(lv_vLabelX[autoA7CE0A4A_var], lv_vLabelY[autoA7CE0A4A_var], lv_vLabelX[lv_vUnitPhase], lv_vLabelY[lv_vUnitPhase]) == true)) {
                        lv_vLabelY[lv_vUnitPhase] = FixedToInt((-lv_cNameDistance* lv_cHALF * Cos(IntToFixed(lv_vAngle))));
                        autoD20B8B01_val = RandomInt(1, 2);
                        if (autoD20B8B01_val == 1) {
                            lv_vLabelY[lv_vUnitPhase] += FixedToInt((lv_vSpread * RandomFixed(0.5, 1.0)));
                        }
                        else {
                            lv_vLabelY[lv_vUnitPhase] -= FixedToInt((lv_vSpread * RandomFixed(0.5, 1.0)));
                        }
                        break;
                    }

                }
            }
            lv_vPercent = libNtve_gf_ArithmeticRealClamp(lv_vPercent, 0.0, 100.0);
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 220, 30, c_anchorCenter, 0, 0, lv_vLabel[lv_vUnitPhase], ColorWithAlpha(0,0,0,0), false, 2.0);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_vLabelX[lv_vUnitPhase], lv_vLabelY[lv_vUnitPhase]);
            libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 514, PlayerGroupAll());
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AF_PieName", PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_vColor, PlayerGroupAll());
            libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
            TextExpressionSetToken("Param/Expression/lib_COTF_0791E810", "A", lv_vLabel[lv_vUnitPhase]);
            TextExpressionSetToken("Param/Expression/lib_COTF_0791E810", "B", FixedToText(lv_vPercent, 1));
            TextExpressionSetToken("Param/Expression/lib_COTF_0791E810", "C", StringToText(libCOTF_gf_UT_FormatInteger(lv_vDamage[lv_vUnitPhase], " ")));
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_COTF_0791E810"), PlayerGroupAll());
            lv_vPercentX[lv_vUnitPhase] = FixedToInt((lv_cPercentDistance * lv_cHALF * Sin(IntToFixed(lv_vAngle))));
            lv_vPercentY[lv_vUnitPhase] = FixedToInt((-lv_cPercentDistance* lv_cHALF * Cos(IntToFixed(lv_vAngle))));
            lv_vSpread = 0.1;
            autoCADDF133_var = 1;
            for ( ; autoCADDF133_var <= autoCADDF133_ae; autoCADDF133_var += 1 ) {
            }
            for (autoDDC12529_i = 1; autoDDC12529_i <= autoDDC12529_n; autoDDC12529_i += 1) {
                auto2EE9F250_ae = (lv_vUnitPhase - 1);
                auto2EE9F250_var = 1;
                for ( ; auto2EE9F250_var <= auto2EE9F250_ae; auto2EE9F250_var += 1 ) {
                    if ((libCOTF_gf_UT_PercentsTooClose(lv_vPercentX[auto2EE9F250_var], lv_vPercentY[auto2EE9F250_var], lv_vPercentX[lv_vUnitPhase], lv_vPercentY[lv_vUnitPhase]) == false)) {
                    }
                    else {
                        lv_vSpread += 0.02;
                        if ((RandomInt(0, 1) == 1)) {
                            lv_vPercentDistanceIter = (lv_cPercentDistance + RandomFixed(0.1, lv_vSpread));
                        }
                        else {
                            lv_vPercentDistanceIter = (lv_cPercentDistance - RandomFixed(0.1, lv_vSpread));
                        }
                        lv_vPercentDistanceIter = libNtve_gf_ArithmeticRealClamp(lv_vPercentDistanceIter, 0.35, 1.8);
                        lv_vPercentX[lv_vUnitPhase] = FixedToInt((lv_vPercentDistanceIter * lv_cHALF * Sin(IntToFixed(lv_vAngle))));
                        lv_vPercentY[lv_vUnitPhase] = FixedToInt((-lv_vPercentDistanceIter* lv_cHALF * Cos(IntToFixed(lv_vAngle))));
                        break;
                    }
                }
            }
            TextExpressionSetToken("Param/Expression/lib_COTF_D980C3A7", "A", FixedToText(lv_vPercent, 1));
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 30, c_anchorCenter, 0, 0, TextExpressionAssemble("Param/Expression/lib_COTF_D980C3A7"), ColorWithAlpha(0,0,0,0), false, 2.0);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_vPercentX[lv_vUnitPhase], lv_vPercentY[lv_vUnitPhase]);
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_vColor, PlayerGroupAll());
            libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 514, PlayerGroupAll());
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AF_PiePercent", PlayerGroupAll());
            TextExpressionSetToken("Param/Expression/lib_COTF_44B08CFA", "A", FixedToText(lv_vPercent, 1));
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 30, c_anchorCenter, 0, 0, TextExpressionAssemble("Param/Expression/lib_COTF_44B08CFA"), ColorWithAlpha(0,0,0,0), false, 2.0);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_vPercentX[lv_vUnitPhase], lv_vPercentY[lv_vUnitPhase]);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
            libNtve_gf_SetDialogItemBlendMode(DialogControlLastCreated(), c_triggerBlendModeLighten, PlayerGroupAll());
            libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 514, PlayerGroupAll());
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AF_PiePercent", PlayerGroupAll());
        }

    }
}

color libCOTF_gf_UT_NewColor (int lp_pColorNumber) {
    int init_i;

    // Variable Declarations
    color[31] lv_vColor;
    int lv_vINT;
    int lv_vA;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 30; init_i += 1) {
        lv_vColor[init_i] = Color(0,0,0);
    }
    lv_vINT = ModI(lp_pColorNumber, 16);

    // Implementation
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#198100");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#4DC32C");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#BEF43D");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#387E73");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#33C199");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#87FF9D");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#2469BA");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#75CFFA");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#BD5DFD");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#891BB0");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#F16391");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#FEADC0");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#C6281C");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#F95A00");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#FF9E32");
    lv_vA += 1;
    lv_vColor[0] = libCOTF_gf_UT_HexToColor("#FFE07A");
    return lv_vColor[lv_vINT];
}

color libCOTF_gf_UT_NewColorOld (int lp_pColorNumber) {
    int init_i;

    // Variable Declarations
    color[21] lv_vColor;
    int lv_vINT;
    int lv_vA;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 20; init_i += 1) {
        lv_vColor[init_i] = Color(0,0,0);
    }
    lv_vINT = ModI(lp_pColorNumber, 13);

    // Implementation
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(0.39, 68.63, 27.84);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(34.12, 80.78, 0.00);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(84.71, 86.67, 0.00);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(93.33, 47.84, 6.67);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(82.35, 5.10, 5.10);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(65.88, 5.88, 32.94);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(77.25, 7.06, 65.10);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(51.76, 9.02, 65.88);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(58.04, 36.08, 87.06);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(12.16, 23.92, 79.61);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(14.12, 45.88, 77.65);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(11.37, 63.53, 80.39);
    lv_vA += 1;
    lv_vColor[0] = Color(20.39, 71.37, 50.98);
    return lv_vColor[lv_vINT];
}

color libCOTF_gf_UT_NewColorMuted (int lp_pColorNumber) {
    int init_i;

    // Variable Declarations
    color[23] lv_vColor;
    int lv_vINT;
    int lv_vA;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 22; init_i += 1) {
        lv_vColor[init_i] = Color(0,0,0);
    }
    lv_vINT = ModI(lp_pColorNumber, 22);

    // Implementation
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#B2B8AC");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#4D8D77");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#81C99D");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#A8A47F");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#DEB267");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#EAD270");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#DF8D4D");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#F19670");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#E16552");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#BF3A3A");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#C86E81");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#9A456E");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#C2568B");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#65387D");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#8944C4");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#714595");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#E485AB");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#E0598B");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#92AFBD");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#5698C4");
    lv_vA += 1;
    lv_vColor[lv_vA] = libCOTF_gf_UT_HexToColor("#A7C798");
    return lv_vColor[lv_vINT];
}

bool libCOTF_gf_UT_LabelsTooClose (int lp_pIterX, int lp_pIterY, int lp_pBaseX, int lp_pBaseY) {
    // Automatic Variable Declarations
    // Implementation
    if ((((lp_pIterY - lp_pBaseY) >= -18) && ((lp_pIterY - lp_pBaseY) <= 18)) && (((lp_pBaseX - lp_pIterX) >= -150) && ((lp_pBaseX - lp_pIterX) <= 150))) {
        return true;
    }
    else {
        return false;
    }
}

bool libCOTF_gf_UT_PercentsTooClose (int lp_pIterX, int lp_pIterY, int lp_pBaseX, int lp_pBaseY) {
    // Automatic Variable Declarations
    // Implementation
    if ((((lp_pIterY - lp_pBaseY) >= -15) && ((lp_pIterY - lp_pBaseY) <= 15)) && (((lp_pBaseX - lp_pIterX) >= -50) && ((lp_pBaseX - lp_pIterX) <= 50))) {
        return true;
    }
    else {
        return false;
    }
}

void libCOTF_gf_UT_Graph_DefineGraph (int lp_iD, text lp_title, string lp_string, string lp_scoreType, int lp_style, fixed lp_minimumValue, fixed lp_rangeBase, fixed lp_rangeIncrement) {
    // Variable Declarations
    int lv_graph;
    int lv_bar;
    int lv_timeLabel;
    int lv_valueLabel;
    int lv_count;
    text lv_vPlayer2Name;

    // Automatic Variable Declarations
    const int auto33639862_ae = 0;
    const int auto33639862_ai = 1;

    // Variable Initialization
    lv_graph = lp_iD;

    // Implementation
    libCOTF_gv_graphsGeneral.lv_totalGraphs += 1;
    libCOTF_gv_graphsData[lv_graph].lv_scoreType = lp_scoreType;
    libCOTF_gv_graphsData[lv_graph].lv_style = lp_style;
    libCOTF_gv_graphsData[lv_graph].lv_minimumValue = lp_minimumValue;
    libCOTF_gv_graphsData[lv_graph].lv_rangeBase = lp_rangeBase;
    libCOTF_gv_graphsData[lv_graph].lv_rangeIncrement = lp_rangeIncrement;
    DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/GraphContainer/" + lp_string));
    libCOTF_gv_graphsData[lv_graph].lv_highFrame = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeGraphFrame, ("UIContainer/FullscreenUpperContainer/GraphContainer/" + lp_string + "/Graph/GraphFrame"));
    libCOTF_gv_graphsData[lv_graph].lv_graph = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/GraphContainer/" + lp_string + "/Graph/Title"));
    libCOTF_gv_graphsData[lv_graph].lv_title = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/GraphContainer/PlayerColorLeft"));
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/GraphContainer/PlayerColorRight"));
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(2, false)), PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/GraphContainer/" + lp_string + "/Graph/Player1Name"));
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), PlayerName(1), PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/GraphContainer/" + lp_string + "/Graph/Player2Name"));
    if ((PlayerStatus(2) != c_playerStatusUnused)) {
        lv_vPlayer2Name = PlayerName(2);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_COTF_B23DA9A2", "A", IntToText(2));
        lv_vPlayer2Name = TextExpressionAssemble("Param/Expression/lib_COTF_B23DA9A2");
    }
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lv_vPlayer2Name, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libCOTF_gv_graphsData[lv_graph].lv_title, lp_title, PlayerGroupAll());
    lv_count = (0 - libCOTF_gv_graphsTotalNodes);
    for ( ; ( (auto33639862_ai >= 0 && lv_count <= auto33639862_ae) || (auto33639862_ai < 0 && lv_count >= auto33639862_ae) ) ; lv_count += auto33639862_ai ) {
        DialogControlAddDataPoint(libCOTF_gv_graphsData[lv_graph].lv_graph, PlayerGroupAll(), lv_count, 0.0, 1);
        DialogControlAddDataPoint(libCOTF_gv_graphsData[lv_graph].lv_graph, PlayerGroupAll(), lv_count, 0.0, 2);
    }
}

void libCOTF_gf_UT_Graph_UpdateDataDifferential (int lp_graph) {
    // Variable Declarations
    int lv_bar;
    int lv_difference;
    int lv_count;
    int[3] lv_teamTotal;
    int[3] lv_teamAverage;
    int lv_maxValue;
    fixed lv_differential;

    // Automatic Variable Declarations
    int auto1E528198_ae;
    const int auto1E528198_ai = 1;

    // Variable Initialization

    // Implementation
    auto1E528198_ae = libCOTF_gv_graphsGeneral.lv_intervals;
    lv_count = 1;
    for ( ; ( (auto1E528198_ai >= 0 && lv_count <= auto1E528198_ae) || (auto1E528198_ai < 0 && lv_count >= auto1E528198_ae) ) ; lv_count += auto1E528198_ai ) {
        lv_teamTotal[libCOTF_gv_graphsGeneral.lv_teamLeft] = ((lv_teamTotal[libCOTF_gv_graphsGeneral.lv_teamLeft]+libCOTF_gv_graphsData[lp_graph].lv_tempValues[libCOTF_gv_graphsGeneral.lv_teamLeft][lv_count]));
        lv_teamTotal[libCOTF_gv_graphsGeneral.lv_teamRight] = ((lv_teamTotal[libCOTF_gv_graphsGeneral.lv_teamRight]+libCOTF_gv_graphsData[lp_graph].lv_tempValues[libCOTF_gv_graphsGeneral.lv_teamRight][lv_count]));
    }
    lv_teamAverage[libCOTF_gv_graphsGeneral.lv_teamLeft] = (lv_teamTotal[libCOTF_gv_graphsGeneral.lv_teamLeft]/libCOTF_gv_graphsGeneral.lv_intervals);
    lv_teamAverage[libCOTF_gv_graphsGeneral.lv_teamRight] = (lv_teamTotal[libCOTF_gv_graphsGeneral.lv_teamRight]/libCOTF_gv_graphsGeneral.lv_intervals);
    lv_difference = ((lv_teamAverage[libCOTF_gv_graphsGeneral.lv_teamLeft]-lv_teamAverage[libCOTF_gv_graphsGeneral.lv_teamRight]));
    if ((lv_difference == 0)) {
        libCOTF_gv_graphsData[lp_graph].lv_team = 0;
        libCOTF_gv_graphsData[lp_graph].lv_value[0] = 0;
    }
    else if ((lv_difference > 0)) {
        libCOTF_gv_graphsData[lp_graph].lv_team = libCOTF_gv_graphsGeneral.lv_teamLeft;
        libCOTF_gv_graphsData[lp_graph].lv_value[0] = (lv_teamAverage[libCOTF_gv_graphsGeneral.lv_teamLeft]-lv_teamAverage[libCOTF_gv_graphsGeneral.lv_teamRight]);
    }
    else if ((lv_difference < 0)) {
        libCOTF_gv_graphsData[lp_graph].lv_team = libCOTF_gv_graphsGeneral.lv_teamRight;
        libCOTF_gv_graphsData[lp_graph].lv_value[0] = (lv_teamAverage[libCOTF_gv_graphsGeneral.lv_teamRight]-lv_teamAverage[libCOTF_gv_graphsGeneral.lv_teamLeft]);
    }
    if ((libCOTF_gv_graphsData[lp_graph].lv_team == libCOTF_gv_graphsGeneral.lv_teamLeft)) {
        DialogControlAddDataPoint(libCOTF_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libCOTF_gv_graphsGeneral.lv_currentNode, libCOTF_gv_graphsData[lp_graph].lv_value[0], 1);
        DialogControlAddDataPoint(libCOTF_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libCOTF_gv_graphsGeneral.lv_currentNode, (0 - libCOTF_gv_graphsData[lp_graph].lv_value[0]), 2);
    }
    else {
        DialogControlAddDataPoint(libCOTF_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libCOTF_gv_graphsGeneral.lv_currentNode, (0 - libCOTF_gv_graphsData[lp_graph].lv_value[0]), 1);
        DialogControlAddDataPoint(libCOTF_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libCOTF_gv_graphsGeneral.lv_currentNode, libCOTF_gv_graphsData[lp_graph].lv_value[0], 2);
    }
    if ((DialogControlGetMinYValue(libCOTF_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll()) <= (0.0 - DialogControlGetMaxYValue(libCOTF_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll())))) {
        lv_differential = AbsF(DialogControlGetMinYValue(libCOTF_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll()));
    }
    else {
        lv_differential = DialogControlGetMaxYValue(libCOTF_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll());
    }
    if ((lv_differential < libCOTF_gv_graphsData[lp_graph].lv_minimumValue)) {
        lv_differential = libCOTF_gv_graphsData[lp_graph].lv_rangeBase;
    }
    else {
        lv_differential = (lv_differential * 1.15);
        lv_differential = (Ceiling((lv_differential / libCOTF_gv_graphsData[lp_graph].lv_rangeIncrement)) * libCOTF_gv_graphsData[lp_graph].lv_rangeIncrement);
    }
    DialogControlSetMaxYVisible(libCOTF_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), lv_differential);
    DialogControlSetMinYVisible(libCOTF_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), (0.0 - lv_differential));
    DialogControlSetMinXVisible(libCOTF_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), (libCOTF_gv_graphsGeneral.lv_currentNode - libCOTF_gv_graphsTotalNodes));
    DialogControlSetMaxXVisible(libCOTF_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libCOTF_gv_graphsGeneral.lv_currentNode);
}

void libCOTF_gf_UT_Graph_UpdateDataComparative (int lp_graph) {
    // Variable Declarations
    int lv_bar;
    int lv_difference;
    int lv_count;
    int[3] lv_teamTotal;
    int[3] lv_teamAverage;
    fixed lv_maxValue;

    // Automatic Variable Declarations
    int autoD1B0B03C_ae;
    const int autoD1B0B03C_ai = 1;

    // Variable Initialization

    // Implementation
    autoD1B0B03C_ae = libCOTF_gv_graphsGeneral.lv_intervals;
    lv_count = 1;
    for ( ; ( (autoD1B0B03C_ai >= 0 && lv_count <= autoD1B0B03C_ae) || (autoD1B0B03C_ai < 0 && lv_count >= autoD1B0B03C_ae) ) ; lv_count += autoD1B0B03C_ai ) {
        lv_teamTotal[libCOTF_gv_graphsGeneral.lv_teamLeft] = ((lv_teamTotal[libCOTF_gv_graphsGeneral.lv_teamLeft]+libCOTF_gv_graphsData[lp_graph].lv_tempValues[libCOTF_gv_graphsGeneral.lv_teamLeft][lv_count]));
        lv_teamTotal[libCOTF_gv_graphsGeneral.lv_teamRight] = ((lv_teamTotal[libCOTF_gv_graphsGeneral.lv_teamRight]+libCOTF_gv_graphsData[lp_graph].lv_tempValues[libCOTF_gv_graphsGeneral.lv_teamRight][lv_count]));
    }
    libCOTF_gv_graphsData[lp_graph].lv_value[libCOTF_gv_graphsGeneral.lv_teamLeft] = (lv_teamTotal[libCOTF_gv_graphsGeneral.lv_teamLeft]/libCOTF_gv_graphsGeneral.lv_intervals);
    libCOTF_gv_graphsData[lp_graph].lv_value[libCOTF_gv_graphsGeneral.lv_teamRight] = (lv_teamTotal[libCOTF_gv_graphsGeneral.lv_teamRight]/libCOTF_gv_graphsGeneral.lv_intervals);
    DialogControlAddDataPoint(libCOTF_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libCOTF_gv_graphsGeneral.lv_currentNode, libCOTF_gv_graphsData[lp_graph].lv_value[libCOTF_gv_graphsGeneral.lv_teamLeft], 1);
    DialogControlAddDataPoint(libCOTF_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libCOTF_gv_graphsGeneral.lv_currentNode, libCOTF_gv_graphsData[lp_graph].lv_value[libCOTF_gv_graphsGeneral.lv_teamRight], 2);
    DialogControlSetMinXVisible(libCOTF_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), (libCOTF_gv_graphsGeneral.lv_currentNode - libCOTF_gv_graphsTotalNodes));
    DialogControlSetMaxXVisible(libCOTF_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libCOTF_gv_graphsGeneral.lv_currentNode);
    DialogControlSetMinYVisible(libCOTF_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), 0.0);
    if ((DialogControlGetMaxYValue(libCOTF_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll()) <= libCOTF_gv_graphsData[lp_graph].lv_minimumValue)) {
        DialogControlSetMaxYVisible(libCOTF_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libCOTF_gv_graphsData[lp_graph].lv_rangeBase);
    }
    else {
        lv_maxValue = (DialogControlGetMaxYValue(libCOTF_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll()) * 1.15);
        lv_maxValue = (Ceiling((lv_maxValue / libCOTF_gv_graphsData[lp_graph].lv_rangeIncrement)) * libCOTF_gv_graphsData[lp_graph].lv_rangeIncrement);
        DialogControlSetMaxYVisible(libCOTF_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), lv_maxValue);
    }
}

void libCOTF_gf_UT_Graph_HideAllGraphsExcept (int lp_pGraph, int lp_pPlayer) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    const int autoD7BA60E0_ae = libCOTF_gv_maxGraphs;
    const int autoD7BA60E0_ai = 1;

    // Variable Initialization

    // Implementation
    lv_a = 1;
    for ( ; ( (autoD7BA60E0_ai >= 0 && lv_a <= autoD7BA60E0_ae) || (autoD7BA60E0_ai < 0 && lv_a >= autoD7BA60E0_ae) ) ; lv_a += autoD7BA60E0_ai ) {
        if ((lp_pGraph != lv_a)) {
            DialogControlSetVisible(libCOTF_gv_graphsData[lv_a].lv_highFrame, PlayerGroupSingle(lp_pPlayer), false);
        }
        else {
            DialogControlSetVisible(libCOTF_gv_graphsData[lv_a].lv_highFrame, PlayerGroupSingle(lp_pPlayer), true);
        }
    }
}

void libCOTF_gf_UT_Horde_Multiply (unit lp_pUnit, fixed lp_pCoef) {
    // Variable Declarations
    int lv_vAmount;
    point lv_vIndexPoint;

    // Automatic Variable Declarations
    const int auto5F492086_ae = 1000;
    int auto5F492086_var;

    // Variable Initialization

    // Implementation
    if ((UnitGroupHasUnit(libCOTF_gv_uT_Horde_UG, lp_pUnit) == true)) {
        return ;
    }

    if ((PointPathingIsConnected(UnitGetPosition(lp_pUnit), PlayerStartLocation(1)) == false)) {
        auto5F492086_var = 2;
        for ( ; auto5F492086_var <= auto5F492086_ae; auto5F492086_var += 1 ) {
            lv_vIndexPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_pUnit), (auto5F492086_var * 2), PlayerStartLocation(1));
            if ((PathingType(lv_vIndexPoint) == c_pathingGround) && (PointPathingIsConnected(lv_vIndexPoint, PlayerStartLocation(1)) == true)) {
                break;
            }

        }
    }
    else {
        lv_vIndexPoint = UnitGetPosition(lp_pUnit);
    }
    lv_vAmount = (TruncI(lp_pCoef) - 1);
    if ((lv_vAmount >= 1)) {
        UnitCreate(lv_vAmount, UnitGetType(lp_pUnit), 0, 3, lv_vIndexPoint, UnitGetFacing(lp_pUnit));
        UnitGroupAddUnitGroup(libCOTF_gv_uT_Horde_UG, UnitLastCreatedGroup());
    }

    if ((RandomFixed(0.0, 1.0) <= (lp_pCoef - Trunc(lp_pCoef)))) {
        UnitCreate(1, UnitGetType(lp_pUnit), 0, 3, lv_vIndexPoint, UnitGetFacing(lp_pUnit));
        UnitGroupAdd(libCOTF_gv_uT_Horde_UG, UnitLastCreated());
    }

}

void libCOTF_gf_UT_MasteryPointsUpdate (int lp_pTargetPlayer) {
    // Variable Declarations
    string lv_indexMasteryUpgrade;
    int lv_vIndex;
    int lv_vTotalMastery;

    // Automatic Variable Declarations
    int autoC4DAAC0B_ai;
    int autoC4DAAC0B_ae;
    int autoC4DAAC0B_ac;

    // Variable Initialization

    // Implementation
    autoC4DAAC0B_ai = 0;
    autoC4DAAC0B_ae = UserDataInstanceCount("MasteryUpgrades")+1;
    while (autoC4DAAC0B_ai < autoC4DAAC0B_ae) {
        autoC4DAAC0B_ai = autoC4DAAC0B_ai+1;
        autoC4DAAC0B_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", autoC4DAAC0B_ai), "Category", 1);
        if( libCOOC_gf_ActiveCommanderForPlayer(lp_pTargetPlayer) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", autoC4DAAC0B_ai),"Commander",1) ) {
            lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", autoC4DAAC0B_ai);
            lv_vIndex += 1;
            libCOTF_gf_UT_PlayerMasteryUpgradeLevelSet(lp_pTargetPlayer, lv_indexMasteryUpgrade, StringToInt(libNtve_gf_DialogItemEditValue(libCOTF_gv_uT_MasteryBoxes[lv_vIndex], 1)));
            lv_vTotalMastery += StringToInt(libNtve_gf_DialogItemEditValue(libCOTF_gv_uT_MasteryBoxes[lv_vIndex], 1));
        }    
    }
    if ((GameGetMissionTime() >= 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_C747F08F"));
        libCOTF_gf_UT_ApplyMasteryTech(lp_pTargetPlayer);
    }
    else {
        if ((PlayerStatus(2) != c_playerStatusActive)) {
            DialogControlHookup(libCOUI_gv_cU_CommanderPanel, c_triggerControlTypeLabel, "CompositionInfoAlly/Level/MasteryLevelLabel");
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(lv_vTotalMastery), PlayerGroupAll());
        }

    }
}

void libCOTF_gf_UT_MasteryChoiceCreateUpdate (int lp_vTargetPlayer) {
    // Variable Declarations
    string lv_indexMasteryUpgrade;
    int lv_vIndex;
    int lv_vXButtonOffset;
    int lv_vYButtonOffset;

    // Automatic Variable Declarations
    int autoCAC25DAF_ai;
    int autoCAC25DAF_ae;
    int autoCAC25DAF_ac;
    int autoA1F46D1E_ai;
    int autoA1F46D1E_ae;
    int autoA1F46D1E_ac;

    // Variable Initialization
    lv_vXButtonOffset = 45;
    lv_vYButtonOffset = 45;

    // Implementation
    if ((libCOTF_gv_uT_MasteryDialog == c_invalidDialogId)) {
        TriggerEnable(libCOTF_gt_UT_MasteryButtonClicked, true);
        DialogCreate(600, 460, c_anchorRight, 250, -75, true);
        libCOTF_gv_uT_MasteryDialog = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogSetRenderPriority(DialogLastCreated(), 1050);
        DialogSetFullscreen(DialogLastCreated(), true);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 610, 420, c_anchorCenter, 0, 38, StringToText(""), "Assets\\Textures\\ui_ingame_resourcesharing_frame_message_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
        TextExpressionSetToken("Param/Expression/lib_COTF_012E354E", "A", IntToText(libCOTF_gv_uT_MasteryTargetPlayer));
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 910, 38, c_anchorCenter, 194, -142, TextExpressionAssemble("Param/Expression/lib_COTF_012E354E"), ColorWithAlpha(0,0,0,0), false, 2.0);
        autoA1F46D1E_ai = 0;
        autoA1F46D1E_ae = UserDataInstanceCount("MasteryUpgrades")+1;
        while (autoA1F46D1E_ai < autoA1F46D1E_ae) {
            autoA1F46D1E_ai = autoA1F46D1E_ai+1;
            autoA1F46D1E_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", autoA1F46D1E_ai), "Category", 1);
            if( libCOOC_gf_ActiveCommanderForPlayer(lp_vTargetPlayer) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", autoA1F46D1E_ai),"Commander",1) ) {
                lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", autoA1F46D1E_ai);
                lv_vIndex += 1;
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 50, c_anchorCenter, -10, (-125 + (50 * lv_vIndex)), libCOTF_gf_UT_PlayerMasteryName(lv_indexMasteryUpgrade), ColorWithAlpha(0,0,0,0), false, 2.0);
                libCOTF_gv_uT_MasteryLabels[lv_vIndex] = DialogControlLastCreated();
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), libCOOC_gf_CC_PlayerMasteryTooltip(lv_indexMasteryUpgrade), PlayerGroupAll());
                DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 80, 65);
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 200, (50*lv_vIndex -140));
                DialogControlCreateInPanel(DialogControlLastCreated(), c_triggerControlTypeEditBox);
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 80, 50);
                libCOTF_gv_uT_MasteryBoxes[lv_vIndex] = DialogControlLastCreated();
                libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), IntToString(libCOTF_gf_UT_PlayerMasteryUpgradeLevel(lp_vTargetPlayer, lv_indexMasteryUpgrade)), PlayerGroupAll());
            }    
        }
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, 50, c_anchorCenter, 0, 210, StringToText(""), StringExternal("Param/Value/lib_COTF_4A056E2F"), "");
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ButtonFont", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\protoss-border-button-game.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\protoss-border-button-game.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
        libCOTF_gv_uT_MasteryButton = DialogControlLastCreated();
    }
    else {
        autoCAC25DAF_ai = 0;
        autoCAC25DAF_ae = UserDataInstanceCount("MasteryUpgrades")+1;
        while (autoCAC25DAF_ai < autoCAC25DAF_ae) {
            autoCAC25DAF_ai = autoCAC25DAF_ai+1;
            autoCAC25DAF_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", autoCAC25DAF_ai), "Category", 1);
            if( libCOOC_gf_ActiveCommanderForPlayer(lp_vTargetPlayer) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", autoCAC25DAF_ai),"Commander",1) ) {
                lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", autoCAC25DAF_ai);
                lv_vIndex += 1;
                libNtve_gf_SetDialogItemText(libCOTF_gv_uT_MasteryLabels[lv_vIndex], libCOTF_gf_UT_PlayerMasteryName(lv_indexMasteryUpgrade), PlayerGroupAll());
                libNtve_gf_SetDialogItemTooltip(libCOTF_gv_uT_MasteryLabels[lv_vIndex], libCOOC_gf_CC_PlayerMasteryTooltip(lv_indexMasteryUpgrade), PlayerGroupAll());
                libNtve_gf_SetDialogItemEditorValue(libCOTF_gv_uT_MasteryBoxes[lv_vIndex], IntToString(libCOTF_gf_UT_PlayerMasteryUpgradeLevel(lp_vTargetPlayer, lv_indexMasteryUpgrade)), PlayerGroupAll());
            }    
        }
    }
}

void libCOTF_gf_UT_ApplyMasteryTech (int lp_player) {
    // Variable Declarations
    string lv_indexMasteryUpgrade;

    // Automatic Variable Declarations
    int auto1EF02F7F_ai;
    int auto1EF02F7F_ae;
    int auto1EF02F7F_ac;

    // Variable Initialization

    // Implementation
    auto1EF02F7F_ai = 0;
    auto1EF02F7F_ae = UserDataInstanceCount("MasteryUpgrades")+1;
    while (auto1EF02F7F_ai < auto1EF02F7F_ae) {
        auto1EF02F7F_ai = auto1EF02F7F_ai+1;
        auto1EF02F7F_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", auto1EF02F7F_ai), "Category", 1);
        if( libCOOC_gf_ActiveCommanderForPlayer(lp_player) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", auto1EF02F7F_ai),"Commander",1) ) {
            lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", auto1EF02F7F_ai);
            if ((libCOOC_gf_CC_PlayerMasteryUpgradeData(lv_indexMasteryUpgrade) != null)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, libCOOC_gf_CC_PlayerMasteryUpgradeData(lv_indexMasteryUpgrade), libCOOC_gf_CC_PlayerMasteryUpgradeLevel(lp_player, lv_indexMasteryUpgrade));
            }

        }    
    }
}

void libCOTF_gf_UT_PlayerMasteryUpgradeLevelSet (int lp_player, string lp_masteryUpgrade, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    libCOOC_gv_cCX_PlayerMasteryPointsSpent[lp_player][libCOOC_gf_CC_CommanderInternalIndex(libCOOC_gf_CC_PlayerMasteryCommander(lp_masteryUpgrade))][libCOOC_gf_CC_PlayerMasteryInternalIndex(lp_masteryUpgrade)] = lp_level;
    libCOOC_gf_CC_ScoreValueSet(lp_player, (("MasteryPoints" + IntToString(libCOOC_gf_CC_PlayerMasteryInternalIndex(lp_masteryUpgrade)))), lp_level);
}

int libCOTF_gf_UT_PlayerMasteryUpgradeLevel (int lp_player, string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return libCOOC_gv_cCX_PlayerMasteryPointsSpent[lp_player][libCOOC_gf_CC_CommanderInternalIndex(libCOOC_gf_CC_PlayerMasteryCommander(lp_masteryUpgrade))][libCOOC_gf_CC_PlayerMasteryInternalIndex(lp_masteryUpgrade)];
}

text libCOTF_gf_UT_PlayerMasteryName (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOOC_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade) == null)) {
        return StringToText((lp_masteryUpgrade));
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogButton, CatalogFieldValueGet(c_gameCatalogTalent, libCOOC_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade), "Face", c_playerAny), "Name", 1));
}

void libCOTF_gf_UT_Cooldown (int lp_pPlayer) {
    // Automatic Variable Declarations
    unitgroup auto0380C676_g;
    int auto0380C676_u;
    unit auto0380C676_var;
    string autoD95BAA9C_val;

    // Implementation
    UnitSetPropertyFixed(libCOTF_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), c_unitPropEnergyPercent, 100.0);
    if ((libCOOC_gf_ActiveCommanderForPlayer(lp_pPlayer) == "TerranMengsk")) {
        libCOMI_gf_CM_Mengsk_EnergyChanged(lp_pPlayer);
    }

    CatalogFieldValueSet(c_gameCatalogAbil, "TychusStarportTrain", "InfoArray[" + IntToString(0) + "].Time", lp_pPlayer, "0");
    libCOMI_gf_ApplyTychusMaxChargesPerk(lp_pPlayer);
    libNtve_gf_PlayerRemoveChargeUsed(lp_pPlayer, "Abil/TychusTrain");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/TychusCalldownOdinTargeted");
    PlayerAddChargeUsed(lp_pPlayer, "Abil/DeployPowerTowerStetmann", -3.0);
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/ZeratulTopBarUltimateWarpTrain");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/ZeratulMapWideStasis");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/AlarakEmpower");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "ZagaraVoidCoopInfestedPods");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/BansheeAirstrike");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/VoidCoopSummonHyperion");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/DehakaNydusDestroyerTopBar");
    libNtve_gf_PlayerRemoveChargeUsed(lp_pPlayer, "Abil/DehakaNydusDestroyerTopBar");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/DehakaDakrunTopBar");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/DehakaMurvarTopBar");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/DehakaGlevigTopBar");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/HHSummonMercenarySpaceStation");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/HornerAirFleetActivate");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/StukovSummonApocalisk");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/StukovSummonAleksander");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/KerriganVoidCoopCrushingGripWave");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/KerriganVoidCoopEconDrop");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/SpecialDelivery");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/ZagaraVoidCoopMassRoachDrop");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/ZagaraVoidCoopMassFrenzy");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "SOASummonFenix");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "SOASummonFenixDragoon");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "SOASummonFenixArbiter");
    PlayerAddChargeRegenRemaining(lp_pPlayer, "Abil/HHTrainTopBar", -60.0);
    PlayerAddChargeRegenRemaining(lp_pPlayer, "Abil/HHStarportTrainWraith", -300.0);
    PlayerAddChargeRegenRemaining(lp_pPlayer, "Abil/TychusReaperBomb", -300.0);
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/DrakkenLaserDrillBFG");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/DrakkenLaserDrillNuke");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/SpecialDelivery");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/AlarakACSummonDeathfleetTarget");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/TychusCalldownOdin");
    libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[lp_pPlayer], "SOADarkPylon", "Abil/SOADarkPylon");
    libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[lp_pPlayer], "SOAShadowGuardCalldown", "Abil/SOAShadowGuardCalldown");
    libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[lp_pPlayer], "SOATimeFreeze", "Abil/SOATimeFreeze");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, libCOOC_gf_CC_CommanderHeroReviveLink(libCOOC_gf_ActiveCommanderForPlayer(lp_pPlayer)));
    auto0380C676_g = UnitGroup(null, lp_pPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0380C676_u = UnitGroupCount(auto0380C676_g, c_unitCountAll);
    for (;; auto0380C676_u -= 1) {
        auto0380C676_var = UnitGroupUnitFromEnd(auto0380C676_g, auto0380C676_u);
        if (auto0380C676_var == null) { break; }
        UnitClearCooldowns(auto0380C676_var, true);
        if ((UnitGetProgressComplete(auto0380C676_var, 1) < 99.0)) {
            UnitSetProgressComplete(auto0380C676_var, 1, 99);
        }

        UnitAbilityReset(auto0380C676_var, AbilityCommand("AlarakStructureOvercharge", 0), c_spendLocationAll);
        UnitAbilityReset(auto0380C676_var, AbilityCommand("AlarakACSummonDeathfleetTarget", 0), c_spendLocationAll);
        UnitAbilityReset(auto0380C676_var, AbilityCommand("SoASuperShield", 0), c_spendLocationAll);
        UnitAbilityReset(auto0380C676_var, AbilityCommand("SOAStrafeAttackActivate", 0), c_spendLocationAll);
        UnitAbilityReset(auto0380C676_var, AbilityCommand("SOAOrbitalStrikeActivate", 0), c_spendLocationAll);
        UnitAbilityReset(auto0380C676_var, AbilityCommand("SOAPylonPower", 0), c_spendLocationAll);
        UnitAbilityReset(auto0380C676_var, AbilityCommand("NovaGriffinBombingRunActivate", 0), c_spendLocationAll);
        UnitAbilityReset(auto0380C676_var, AbilityCommand("NovaGriffinTransportLoadUnits", 0), c_spendLocationAll);
        UnitAbilityReset(auto0380C676_var, AbilityCommand("NovaDefensiveMatrixDrone", 0), c_spendLocationAll);
        UnitAbilityReset(auto0380C676_var, AbilityCommand("SIStukovInfestStructure", 0), c_spendLocationAll);
        UnitAbilityReset(auto0380C676_var, AbilityCommand("SIStukovInfestStructureUpgraded", 0), c_spendLocationAll);
        UnitAbilityReset(auto0380C676_var, AbilityCommand("NovaDefensiveMatrixDrone", 0), c_spendLocationAll);
        UnitAbilityReset(auto0380C676_var, AbilityCommand("AbathurMend", 0), c_spendLocationAll);
        UnitAbilityReset(auto0380C676_var, AbilityCommand("SpawnToxicNest", 0), c_spendLocationAll);
        UnitAbilityReset(auto0380C676_var, AbilityCommand("NovaCoopCasterNuke", 0), c_spendLocationAll);
        UnitAbilityReset(auto0380C676_var, AbilityCommand("HHStarportTrainHorner", 0), c_spendLocationAll);
        UnitAbilityReset(auto0380C676_var, AbilityCommand("HHStarportTrainHorner", 2), c_spendLocationAll);
        UnitAbilityReset(auto0380C676_var, AbilityCommand("HHStarportTrainHorner", 3), c_spendLocationAll);
        UnitAbilityReset(auto0380C676_var, AbilityCommand("HHStarportTrainHorner", 1), c_spendLocationAll);
        UnitAbilityReset(auto0380C676_var, AbilityCommand("StarportTrainNova", 0), c_spendLocationAll);
        UnitAbilityReset(auto0380C676_var, AbilityCommand("FactoryTrainNova", 0), c_spendLocationAll);
        UnitAbilityReset(auto0380C676_var, AbilityCommand("BarracksTrainNova", 2), c_spendLocationAll);
        UnitAbilityReset(auto0380C676_var, AbilityCommand("StarportTrainNova", 1), c_spendLocationAll);
        UnitAbilityReset(auto0380C676_var, AbilityCommand("StarportTrainNova", 2), c_spendLocationAll);
        UnitAbilityReset(auto0380C676_var, AbilityCommand("BarracksTrainNova", 1), c_spendLocationAll);
        UnitAbilityReset(auto0380C676_var, AbilityCommand("FactoryTrainNova", 2), c_spendLocationAll);
        UnitAbilityReset(auto0380C676_var, AbilityCommand("FactoryTrainNova", 1), c_spendLocationAll);
        UnitAbilityReset(auto0380C676_var, AbilityCommand("BarracksTrainNova", 0), c_spendLocationAll);
        UnitBehaviorSetDurationRemaining(auto0380C676_var, "DrakkenLaserDrillDisablePulseCannon", 0.5);
        UnitBehaviorSetDurationRemaining(auto0380C676_var, "DrakkenLaserDrillDisableConcentratedBeam", 0.5);
        UnitAbilityReset(auto0380C676_var, AbilityCommand("StargateWarpTrain", 12), c_spendLocationAll);
        UnitAbilityReset(auto0380C676_var, AbilityCommand("RoboticsFacilityWarpTrain", 3), c_spendLocationAll);
        UnitAbilityReset(auto0380C676_var, AbilityCommand("WarpGateTrain", 0), c_spendLocationAll);
        UnitBehaviorSetDurationRemaining(auto0380C676_var, "StargateMorph", 0.5);
        UnitBehaviorSetDurationRemaining(auto0380C676_var, "StargateWarpMorph", 0.5);
        UnitBehaviorSetDurationRemaining(auto0380C676_var, "StargateWarpMorphInstant", 0.5);
        UnitBehaviorSetDurationRemaining(auto0380C676_var, "StargateWarpMorphInstant", 0.5);
        autoD95BAA9C_val = UnitGetType(auto0380C676_var);
        if (autoD95BAA9C_val == "UnfinishedDrakkenLaserDrillCoop") {
            libNtve_gf_ReplaceUnit(auto0380C676_var, "DrakkenLaserDrillCoop", libNtve_ge_ReplaceUnitOptions_NewUnitssMax);
            libCOMI_gv_cM_LaserDrillUnit[1] = libNtve_gf_LastReplacedUnit();
            libCOMI_gv_cM_LaserDrillUnitGroup[1] = libNtve_gf_ConvertUnitToUnitGroup(libNtve_gf_LastReplacedUnit());
            libCOMI_gv_cM_LaserDrillUnit[2] = libNtve_gf_LastReplacedUnit();
            libCOMI_gv_cM_LaserDrillUnitGroup[2] = libNtve_gf_ConvertUnitToUnitGroup(libNtve_gf_LastReplacedUnit());
        }
        else if (autoD95BAA9C_val == "SoACasterArtanis") {
            UnitSetPropertyFixed(auto0380C676_var, c_unitPropEnergyPercent, 100.0);
        }
        else if (autoD95BAA9C_val == "SoACasterKarax") {
            UnitSetPropertyFixed(auto0380C676_var, c_unitPropEnergyPercent, 100.0);
        }
        else if (autoD95BAA9C_val == "SoACasterVorazun") {
            UnitSetPropertyFixed(auto0380C676_var, c_unitPropEnergyPercent, 100.0);
        }
        else if (autoD95BAA9C_val == "DehakaBarracks") {
            UnitAbilityReset(auto0380C676_var, AbilityCommand("DehakaBarracksTrainEgg", 0), c_spendLocationAll);
        }
        else if (autoD95BAA9C_val == "SIStarport") {
            UnitAbilityReset(auto0380C676_var, AbilityCommand("SIStarportTrain", 0), c_spendLocationAll);
        }
        else if (autoD95BAA9C_val == "SIFactory") {
            UnitAbilityReset(auto0380C676_var, AbilityCommand("SIFactoryTrain", 2), c_spendLocationAll);
        }
        else if (autoD95BAA9C_val == "SIBarracks") {
            UnitAbilityReset(auto0380C676_var, AbilityCommand("SIBarracksTrain", 0), c_spendLocationAll);
        }
        else if (autoD95BAA9C_val == "SICommandCenter") {
            UnitAbilityReset(auto0380C676_var, AbilityCommand("SICommandCenterTrain", 0), c_spendLocationAll);
        }
        else if (autoD95BAA9C_val == "DehakaHatchery") {
            UnitAbilityReset(auto0380C676_var, AbilityCommand("DehakaHatcheryTrainEgg", 0), c_spendLocationAll);
        }
        else if (autoD95BAA9C_val == "TychusReaper") {
            UnitAbilityReset(auto0380C676_var, AbilityCommand("TychusReaperBomb", 0), c_spendLocationAll);
        }
        else if (autoD95BAA9C_val == "TychusWarhound") {
            UnitAbilityReset(auto0380C676_var, AbilityCommand("TychusWarhoundBuildAutoTurret", 0), c_spendLocationAll);
        }
        else if (autoD95BAA9C_val == "TychusMarauder") {
            UnitAbilityReset(auto0380C676_var, AbilityCommand("TychusMarauderBuildHealingWard", 0), c_spendLocationAll);
        }
        else if (autoD95BAA9C_val == "TychusGhost") {
            UnitAbilityReset(auto0380C676_var, AbilityCommand("TychusGhostDominate", 0), c_spendLocationAll);
        }
        else if (autoD95BAA9C_val == "TychusSpectre") {
            UnitAbilityReset(auto0380C676_var, AbilityCommand("TychusSpectreUltrasonicPulse", 0), c_spendLocationAll);
        }
        else if (autoD95BAA9C_val == "ZeratulCoop") {
            UnitAbilityReset(auto0380C676_var, AbilityCommand("ProphecyVision", 0), c_spendLocationAll);
            libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/ProphecyVision");
            UnitAbilityReset(auto0380C676_var, AbilityCommand("ZeratulTeleport", 0), c_spendLocationAll);
            libCOMI_gv_cM_ZeratulArtifact_1_Hint_3_Timing = 0.0;
            libCOMI_gv_cM_ZeratulArtifact_2_Hint_3_Timing = 0.0;
            libCOMI_gv_cM_ZeratulArtifact_3_Hint_3_Timing = 0.0;
        }
        else {
        }
    }
}

void libCOTF_gf_UT_DL_DialogCreate () {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOTF_gv_uT_DL_LogDialog == c_invalidDialogId)) {
        DialogCreate(960, 1000, c_anchorTopLeft, 0, 250, true);
        DialogSetImageVisible(DialogLastCreated(), false);
        libCOTF_gv_uT_DL_LogDialog = DialogLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 960, 500, c_anchorTop, 20, 50, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
        libCOTF_gv_uT_DL_LogDialogItem = DialogControlLastCreated();
    }

}

void libCOTF_gf_UT_DL_DialogUpdate (int lp_pPlayerData, int lp_pPlayerShow) {
    // Variable Declarations
    text lv_vText;
    int lv_vTotalDamage;
    fixed lv_vTotalHeal;
    int lv_vLines;
    fixed lv_vPercent;

    // Automatic Variable Declarations
    const int auto2BB98518_ae = libCOTF_gv_uT_DL_MaxUnits;
    int auto2BB98518_var;
    const int auto422C33F8_ae = libCOTF_gv_uT_DL_MaxUnits;
    int auto422C33F8_var;
    const int autoBB1FADCD_ae = libCOTF_gv_uT_DL_MaxUnits;
    int autoBB1FADCD_var;

    // Variable Initialization
    lv_vText = StringExternal("Param/Value/lib_COTF_401AACC4");
    lv_vTotalHeal = 1.0;
    lv_vLines = 1;

    // Implementation
    auto2BB98518_var = 1;
    for ( ; auto2BB98518_var <= auto2BB98518_ae; auto2BB98518_var += 1 ) {
        if ((libCOTF_gv_uT_DL_Data[auto2BB98518_var][0][lp_pPlayerData].lv_unitType != null)) {
            lv_vTotalDamage += libCOTF_gf_UT_DL_SumHealingDamage(auto2BB98518_var, 0, lp_pPlayerData);
        }

        if ((libCOTF_gv_uT_DL_Data[auto2BB98518_var][1][lp_pPlayerData].lv_unitType != null)) {
            lv_vTotalHeal += libCOTF_gf_UT_DL_SumHealingDamage(auto2BB98518_var, 1, lp_pPlayerData);
        }

    }
    lv_vText = (lv_vText + (StringToText(libCOTF_gf_UT_FormatInteger(lv_vTotalDamage, " ")) + StringExternal("Param/Value/lib_COTF_318A72FC")));
    auto422C33F8_var = 1;
    for ( ; auto422C33F8_var <= auto422C33F8_ae; auto422C33F8_var += 1 ) {
        if ((libCOTF_gv_uT_DL_Data[auto422C33F8_var][0][lp_pPlayerData].lv_unitType != null)) {
            if ((libCOTF_gf_UT_DL_SumHealingDamage(auto422C33F8_var, 0, lp_pPlayerData) >= 524000)) {
                lv_vPercent = ((libCOTF_gf_UT_DL_SumHealingDamage(auto422C33F8_var, 0, lp_pPlayerData) / 10)/(lv_vTotalDamage / 1000));
            }
            else {
                lv_vPercent = (libCOTF_gv_uT_DL_Data[auto422C33F8_var][0][lp_pPlayerData].lv_real/IntToFixed((lv_vTotalDamage / 100)));
            }
            lv_vPercent = libNtve_gf_ArithmeticRealClamp(lv_vPercent, 0.0, 100.0);
            TextExpressionSetToken("Param/Expression/lib_COTF_8FCC8DA9", "A", libCOTF_gf_UT_NameOfUnitType(libCOTF_gv_uT_DL_Data[auto422C33F8_var][0][lp_pPlayerData].lv_unitType));
            TextExpressionSetToken("Param/Expression/lib_COTF_8FCC8DA9", "D", FixedToText(lv_vPercent, 1));
            TextExpressionSetToken("Param/Expression/lib_COTF_8FCC8DA9", "C", StringToText(libCOTF_gf_UT_FormatInteger(libCOTF_gf_UT_DL_SumHealingDamage(auto422C33F8_var, 0, lp_pPlayerData), " ")));
            lv_vText = (lv_vText + TextExpressionAssemble("Param/Expression/lib_COTF_8FCC8DA9"));
            lv_vLines += 1;
        }
        else {
            break;
        }
    }
    if ((libCOTF_gv_uT_DL_Data[1][1][lp_pPlayerData].lv_unitType != null)) {
        lv_vText = (lv_vText + (StringExternal("Param/Value/lib_COTF_08CE9ECE") + (StringExternal("Param/Value/lib_COTF_555B3680") + (FixedToText(lv_vTotalHeal, 0) + StringExternal("Param/Value/lib_COTF_91647C8F")))));
        lv_vLines += 2;
        autoBB1FADCD_var = 1;
        for ( ; autoBB1FADCD_var <= autoBB1FADCD_ae; autoBB1FADCD_var += 1 ) {
            if ((libCOTF_gv_uT_DL_Data[autoBB1FADCD_var][1][lp_pPlayerData].lv_unitType != null)) {
                if ((libCOTF_gf_UT_DL_SumHealingDamage(autoBB1FADCD_var, 1, lp_pPlayerData) >= 524000)) {
                    lv_vPercent = ((libCOTF_gf_UT_DL_SumHealingDamage(autoBB1FADCD_var, 1, lp_pPlayerData) / 10)/(lv_vTotalDamage / 1000));
                }
                else {
                    lv_vPercent = (libCOTF_gv_uT_DL_Data[autoBB1FADCD_var][1][lp_pPlayerData].lv_real/IntToFixed((lv_vTotalDamage / 100)));
                }
                lv_vPercent = libNtve_gf_ArithmeticRealClamp(lv_vPercent, 0.0, 100.0);
                TextExpressionSetToken("Param/Expression/lib_COTF_CEC42E89", "A", UnitTypeGetName(libCOTF_gv_uT_DL_Data[autoBB1FADCD_var][1][lp_pPlayerData].lv_unitType));
                TextExpressionSetToken("Param/Expression/lib_COTF_CEC42E89", "D", FixedToText(lv_vPercent, 1));
                TextExpressionSetToken("Param/Expression/lib_COTF_CEC42E89", "C", StringToText(libCOTF_gf_UT_FormatInteger(libCOTF_gf_UT_DL_SumHealingDamage(autoBB1FADCD_var, 1, lp_pPlayerData), " ")));
                lv_vText = (lv_vText + TextExpressionAssemble("Param/Expression/lib_COTF_CEC42E89"));
                lv_vLines += 1;
            }
            else {
                break;
            }
        }
    }

    libNtve_gf_SetDialogItemText(libCOTF_gv_uT_DL_LogDialogItem, lv_vText, PlayerGroupSingle(lp_pPlayerShow));
}

void libCOTF_gf_UT_DL_AddHealingDamage (int lp_pIndex, int lp_pDamageHeal, int lp_pPlayer, fixed lp_pAdd_Amount) {
    // Automatic Variable Declarations
    // Implementation
    if (((FixedToInt(libCOTF_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_real) + FixedToInt(lp_pAdd_Amount)) >= 500000)) {
        libCOTF_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_integer += FixedToInt(libCOTF_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_real);
        libCOTF_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_real = lp_pAdd_Amount;
    }
    else {
        libCOTF_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_real += lp_pAdd_Amount;
    }
}

int libCOTF_gf_UT_DL_SumHealingDamage (int lp_pIndex, int lp_pDamageHeal, int lp_pPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return (libCOTF_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_integer + FixedToInt(libCOTF_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_real));
}

void libCOTF_gf_UT_DL_LogClear (int lp_pPlayer) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    const int autoDA12E7BE_ae = libCOTF_gv_uT_DL_MaxUnits;
    int autoDA12E7BE_var;

    // Variable Initialization

    // Implementation
    autoDA12E7BE_var = 1;
    for ( ; autoDA12E7BE_var <= autoDA12E7BE_ae; autoDA12E7BE_var += 1 ) {
        libCOTF_gv_uT_DL_Data[autoDA12E7BE_var][0][lp_pPlayer].lv_integer = 0;
        libCOTF_gv_uT_DL_Data[autoDA12E7BE_var][1][lp_pPlayer].lv_integer = 0;
        libCOTF_gv_uT_DL_Data[autoDA12E7BE_var][0][lp_pPlayer].lv_real = 0;
        libCOTF_gv_uT_DL_Data[autoDA12E7BE_var][1][lp_pPlayer].lv_real = 0;
        libCOTF_gv_uT_DL_Data[autoDA12E7BE_var][0][lp_pPlayer].lv_unitType = null;
        libCOTF_gv_uT_DL_Data[autoDA12E7BE_var][1][lp_pPlayer].lv_unitType = null;
    }
    UIDisplayMessage(PlayerGroupSingle(lp_pPlayer), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_B7855D13"));
    libCOTF_gf_UT_DL_DialogUpdate(libCOTF_gv_uT_DL_PlayerData[lp_pPlayer], lp_pPlayer);
}

trigger auto_libCOTF_gf_AF_CS_NewsCreate_Trigger = null;

void libCOTF_gf_AF_CS_NewsCreate () {
    if (auto_libCOTF_gf_AF_CS_NewsCreate_Trigger == null) {
        auto_libCOTF_gf_AF_CS_NewsCreate_Trigger = TriggerCreate("auto_libCOTF_gf_AF_CS_NewsCreate_TriggerFunc");
    }

    TriggerExecute(auto_libCOTF_gf_AF_CS_NewsCreate_Trigger, false, false);
}

bool auto_libCOTF_gf_AF_CS_NewsCreate_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(600, 600, c_anchorTopRight, 0, -40, true);
    libCOTF_gv_aF_CS_NewsDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 1024);
    DialogSetVisible(DialogLastCreated(), libCOTF_gf_UT_ActiveCommanderPlayers(), true);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "AF_CommanderSelectionScreen/NewsSection");
    libCOTF_gv_aF_CS_NewsDialogPanel = DialogControlLastCreated();
    DialogControlHookup(libCOTF_gv_aF_CS_NewsDialogPanel, c_triggerControlTypeLabel, "NewsText");
    TextExpressionSetToken("Param/Expression/lib_COTF_428EAD85", "A", libCOTF_gv_aF_CS_News);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_COTF_428EAD85"), PlayerGroupAll());
    DialogControlHookup(libCOTF_gv_aF_CS_NewsDialogPanel, c_triggerControlTypeButton, "ControlButton");
    libCOTF_gv_aF_CS_NewsControlButton = DialogControlLastCreated();
    DialogCreate(200, 50, c_anchorBottomRight, 0, 0, true);
    libCOTF_gv_aF_CS_PatchDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 1024);
    DialogSetVisible(DialogLastCreated(), libCOTF_gf_UT_ActiveCommanderPlayers(), true);
    TextExpressionSetToken("Param/Expression/lib_COTF_0B520C99", "A", StringToText(libCOMI_gv_cT_CurrentVersion));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorBottomRight, 10, 10, TextExpressionAssemble("Param/Expression/lib_COTF_0B520C99"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "PatchStyle", PlayerGroupAll());
    Wait(3.5, c_timeGame);
    DialogControlSendAnimationEvent(libCOTF_gv_aF_CS_NewsDialogPanel, PlayerGroupAll(), "ShowEv");
    Wait(20.0, c_timeGame);
    if ((libCOTF_gv_aF_CS_NewsControlButtonClicked == false)) {
        DialogControlSendAnimationEvent(libCOTF_gv_aF_CS_NewsDialogPanel, PlayerGroupAll(), "HideEv");
    }

    return true;
}

void libCOTF_gf_AF_SetTychusSquadMember (unit lp_unit, int lp_squadIndex, string lp_squadInstance) {
    // Variable Declarations
    string lv_abilIndex;
    string lv_abil;
    string lv_button;
    string lv_replaceTarget;
    string lv_replaceTargetTop;
    int lv_replacePlayer;
    unitgroup lv_structureGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abilIndex = IntToString((lp_squadIndex + 1));
    lv_abil = UserDataGetGameLink(libCOMI_gv_cM_Tychus_UserTypeHeroList, lp_squadInstance, "Active Abil", 1);
    lv_button = UserDataGetGameLink(libCOMI_gv_cM_Tychus_UserTypeHeroList, lp_squadInstance, "Active Button", 1);
    lv_replaceTarget = (libCOUI_gv_cM_Tychus_SharedAbil_ButtonBase + lv_abilIndex);
    lv_replaceTargetTop = (libCOUI_gv_cM_Tychus_SharedAbil_ButtonBase + lv_abilIndex + "Top");
    lv_replacePlayer = UnitGetOwner(lp_unit);
    lv_structureGroup = UnitGroup(UserDataGetUnit("CoopTechTychusSquad", lp_squadInstance, "EquipmentStructure", 1), UnitGetOwner(lp_unit), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);

    // Implementation
    if (((lp_squadIndex < 0) || (lp_squadIndex >= libCOUI_gv_cUC_TYCHUS_MAX_SQUAD_SIZE))) {
        return ;
    }
    libCOMI_gf_ButtonReplacement(lv_replacePlayer, (lv_replaceTarget), lv_button);
    CatalogLinkReplace(lv_replacePlayer, c_gameCatalogAbil, lv_replaceTarget, (lv_abil));
    UserDataSetInt("CoopTechTychusSquad", lp_squadInstance, "Squad Slot", 1, lp_squadIndex);
    libNtve_gf_SetDialogItemUnit(libCOUI_gv_cU_TychusSquadUnitFrames[lp_squadIndex], lp_unit, PlayerGroupAll());
    libNtve_gf_SetDialogItemUnit(libCOUI_gv_cU_TychusSquadUnitTargets[lp_squadIndex], lp_unit, PlayerGroupAll());
    if ((UnitGroupCount(lv_structureGroup, c_unitCountAlive) > 0)) {
        libNtve_gf_SetDialogItemUnit(libCOUI_gv_cU_TychusSquadEquipmentStructureTargets[lp_squadIndex], UnitGroupUnit(lv_structureGroup, 1), PlayerGroupAll());
    }

    PortraitSetModel(PortraitGetTriggerControl(libCOUI_gv_cU_TychusSquadPortraits[lp_squadIndex]), UserDataGetModel("CoopTechTychusSquad", lp_squadInstance, "Portrait Model", 1), false);
    PortraitSetActor(PortraitGetTriggerControl(libCOUI_gv_cU_TychusSquadPortraits[lp_squadIndex]), "PortraitActor");
    libNtve_gf_SetDialogItemImage(libCOUI_gv_cU_TychusSquadPortraitsStatic[lp_squadIndex], UserDataGetImagePath("CoopTechTychusSquad", lp_squadInstance, "2D Portrait", 1), PlayerGroupAll());
    DialogControlSetAnimationState(libCOUI_gv_cU_TychusSquadUnitFrames[lp_squadIndex], PlayerGroupAll(), "UnitState", (lp_squadInstance));
    DialogControlSetAnimationState(libCOUI_gv_cU_TychusSquadUnitFrames[lp_squadIndex], PlayerGroupAll(), "AvailabilityState", "Available");
    DialogControlSetAnimationState(libCOUI_gv_cU_TychusSquadUnitFrames[lp_squadIndex], PlayerGroupAll(), "EmptyState", "NotEmpty");
    DialogControlSetAnimationState(libCOUI_gv_cU_TychusSquadUnitFrames[lp_squadIndex], PlayerGroupAll(), "DeathState", "NotDead");
}

string libCOTF_gf_AF_GetTychusSquadInstance (unit lp_unit) {
    // Variable Declarations
    string lv_instance;

    // Automatic Variable Declarations
    string auto16FF0389_userType;
    int auto16FF0389_i;

    // Variable Initialization

    // Implementation
    auto16FF0389_userType = "CoopTechTychusSquad";
    auto16FF0389_i = 1;
    for ( ; auto16FF0389_i <= UserDataInstanceCount(auto16FF0389_userType) ; auto16FF0389_i += 1 ) {
        lv_instance = UserDataInstance(auto16FF0389_userType, auto16FF0389_i);
        if ((UnitGetType(lp_unit) == UserDataGetUnit("CoopTechTychusSquad", lv_instance, "Unit Type", 1))) {
            return lv_instance;
        }

    }
    return null;
}

int libCOTF_gf_AF_GetTychusSquadIndex () {
    // Variable Declarations
    int lv_currentindex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentindex = libCOUI_gv_cU_TychusSquadNextIndex;

    // Implementation
    return lv_currentindex;
}

text libCOTF_gf_CU_PrestigeBriefFormatTooltip (int lp_player) {
    // Variable Declarations
    string lv_face;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_face = libCOOC_gf_CC_CommanderPrestigeIndexFace(libCOOC_gf_CommanderLinkForPlayerHealingplayer2(lp_player), libCOOC_gf_CC_PlayerActivePrestigeIndex(lp_player));

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_COTF_D6B3CCD3", "A", libCOOC_gf_CC_CommanderName(libCOOC_gf_ActiveCommanderForPlayer(lp_player)));
    TextExpressionSetToken("Param/Expression/lib_COTF_D6B3CCD3", "B", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Name", lp_player)));
    TextExpressionSetToken("Param/Expression/lib_COTF_D6B3CCD3", "C", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Tooltip", lp_player)));
    return TextExpressionAssemble("Param/Expression/lib_COTF_D6B3CCD3");
}

trigger auto_libCOTF_gf_AF_MutatorIconsCreate_Trigger = null;
int auto_libCOTF_gf_AF_MutatorIconsCreate_lp_pDialog;

void libCOTF_gf_AF_MutatorIconsCreate (int lp_pDialog) {
    auto_libCOTF_gf_AF_MutatorIconsCreate_lp_pDialog = lp_pDialog;

    if (auto_libCOTF_gf_AF_MutatorIconsCreate_Trigger == null) {
        auto_libCOTF_gf_AF_MutatorIconsCreate_Trigger = TriggerCreate("auto_libCOTF_gf_AF_MutatorIconsCreate_TriggerFunc");
    }

    TriggerExecute(auto_libCOTF_gf_AF_MutatorIconsCreate_Trigger, false, false);
}

bool auto_libCOTF_gf_AF_MutatorIconsCreate_TriggerFunc (bool testConds, bool runActions) {
    int lp_pDialog = auto_libCOTF_gf_AF_MutatorIconsCreate_lp_pDialog;

    int init_i;

    // Variable Declarations
    string lv_vIndexMutator;
    int[21] lv_vMutatorPanels;
    int lv_vA;
    int lv_vB;

    // Automatic Variable Declarations
    int auto3889EAD3_ai;
    int auto3889EAD3_ae;
    int auto3EE83512_ae;
    const int auto3EE83512_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 20; init_i += 1) {
        lv_vMutatorPanels[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    Wait(1.5, c_timeGame);
    auto3889EAD3_ai = 1;
    auto3889EAD3_ae = UserDataInstanceCount("Mutators")+1;
    while (auto3889EAD3_ai < auto3889EAD3_ae) {
        lv_vIndexMutator = UserDataInstance("Mutators", auto3889EAD3_ai);
        auto3889EAD3_ai = auto3889EAD3_ai+1;
        if ((libCOMU_gf_MutatorIsEnabled(lv_vIndexMutator) == true)) {
            lv_vA += 1;
            DialogControlCreateFromTemplate(lp_pDialog, c_triggerControlTypePanel, "Coop_MutatorList/MutatorSmallListItemTemplate");
            lv_vMutatorPanels[lv_vA] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 1050, PlayerGroupAll());
            DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "MutatorIcon");
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), libCOMU_gf_CT_MutatorIcon(lv_vIndexMutator), PlayerGroupAll());
            TextExpressionSetToken("Param/Expression/lib_COTF_2D1DE2FF", "NAME", libCOMU_gf_CT_MutatorName(lv_vIndexMutator));
            TextExpressionSetToken("Param/Expression/lib_COTF_2D1DE2FF", "DESCRIPTION", libCOMU_gf_CT_MutatorDescription(lv_vIndexMutator));
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_COTF_2D1DE2FF"), PlayerGroupAll());
        }

    }
    auto3EE83512_ae = lv_vA;
    lv_vB = 1;
    for ( ; ( (auto3EE83512_ai >= 0 && lv_vB <= auto3EE83512_ae) || (auto3EE83512_ai < 0 && lv_vB >= auto3EE83512_ae) ) ; lv_vB += auto3EE83512_ai ) {
        DialogControlSetPosition(lv_vMutatorPanels[lv_vB], PlayerGroupAll(), c_anchorTop, FixedToInt((70* (IntToFixed(lv_vB)  - 0.5 - (IntToFixed(lv_vA)/2)))), 165);
        DialogControlFadeTransparency(lv_vMutatorPanels[lv_vB], PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(lv_vMutatorPanels[lv_vB], PlayerGroupAll(), 1.5, 15.0);
        DialogControlSetVisible(lv_vMutatorPanels[lv_vB], PlayerGroupAll(), true);
        Wait(0.5, c_timeGame);
    }
    return true;
}

trigger auto_libCOTF_gf_AF_MasteryInfoCreate_Trigger = null;
int auto_libCOTF_gf_AF_MasteryInfoCreate_lp_pDialog;
int auto_libCOTF_gf_AF_MasteryInfoCreate_lp_pPlayer;

void libCOTF_gf_AF_MasteryInfoCreate (int lp_pDialog, int lp_pPlayer) {
    auto_libCOTF_gf_AF_MasteryInfoCreate_lp_pDialog = lp_pDialog;
    auto_libCOTF_gf_AF_MasteryInfoCreate_lp_pPlayer = lp_pPlayer;

    if (auto_libCOTF_gf_AF_MasteryInfoCreate_Trigger == null) {
        auto_libCOTF_gf_AF_MasteryInfoCreate_Trigger = TriggerCreate("auto_libCOTF_gf_AF_MasteryInfoCreate_TriggerFunc");
    }

    TriggerExecute(auto_libCOTF_gf_AF_MasteryInfoCreate_Trigger, false, false);
}

bool auto_libCOTF_gf_AF_MasteryInfoCreate_TriggerFunc (bool testConds, bool runActions) {
    int lp_pDialog = auto_libCOTF_gf_AF_MasteryInfoCreate_lp_pDialog;
    int lp_pPlayer = auto_libCOTF_gf_AF_MasteryInfoCreate_lp_pPlayer;

    int init_i;

    // Variable Declarations
    string lv_indexMasteryUpgrade;
    int[7] lv_vMasteryLabel;
    int lv_vIndex;
    int lv_vOffsetX;
    int lv_vAnchor;
    int lv_vB;
    string lv_button;
    text lv_vText;
    int lv_vPrestigeIndex;
    int lv_vPrestigeLabel;

    // Automatic Variable Declarations
    int auto9ABFEE4F_ai;
    int auto9ABFEE4F_ae;
    int auto9ABFEE4F_ac;
    int auto308661DA_ae;
    const int auto308661DA_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv_vMasteryLabel[init_i] = c_invalidDialogControlId;
    }
    lv_vOffsetX = 440;
    lv_vAnchor = c_anchorBottomLeft;
    lv_vPrestigeIndex = libCOOC_gv_cCX_PlayerPrestigeIndex[1];
    lv_vPrestigeLabel = c_invalidDialogControlId;

    // Implementation
    Wait(1.5, c_timeGame);
    if ((lp_pPlayer == 2)) {
        lv_vAnchor = c_anchorBottom;
        lv_vOffsetX = 500;
        lv_vPrestigeIndex = libCOOC_gv_cCX_PlayerPrestigeIndex[2];
    }

    lv_button = libCOOC_gf_CC_CommanderPrestigeIndexFace(libCOOC_gf_CommanderLinkForPlayerHealingplayer2(lp_pPlayer), lv_vPrestigeIndex);
    lv_vText = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_button, "Name", lp_pPlayer));
    libNtve_gf_CreateDialogItemLabel(lp_pDialog, 500, 50, lv_vAnchor, lv_vOffsetX, 0, lv_vText, ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_vPrestigeLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 1050, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AF_PrestigeScore", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), libCOTF_gf_CU_PrestigeBriefFormatTooltip(lp_pPlayer), PlayerGroupAll());
    auto9ABFEE4F_ai = 0;
    auto9ABFEE4F_ae = UserDataInstanceCount("MasteryUpgrades")+1;
    while (auto9ABFEE4F_ai < auto9ABFEE4F_ae) {
        auto9ABFEE4F_ai = auto9ABFEE4F_ai+1;
        auto9ABFEE4F_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", auto9ABFEE4F_ai), "Category", 1);
        if( libCOOC_gf_ActiveCommanderForPlayer(lp_pPlayer) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", auto9ABFEE4F_ai),"Commander",1) ) {
            lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", auto9ABFEE4F_ai);
            if ((libCOTF_gf_UT_PlayerMasteryUpgradeLevel(lp_pPlayer, lv_indexMasteryUpgrade) >= 1)) {
                TextExpressionSetToken("Param/Expression/lib_COTF_F9CD803D", "A", libCOTF_gf_UT_PlayerMasteryName(lv_indexMasteryUpgrade));
                TextExpressionSetToken("Param/Expression/lib_COTF_F9CD803D", "B", IntToText(libCOTF_gf_UT_PlayerMasteryUpgradeLevel(lp_pPlayer, lv_indexMasteryUpgrade)));
                libNtve_gf_CreateDialogItemLabel(lp_pDialog, 600, 50, lv_vAnchor, 0, 0, TextExpressionAssemble("Param/Expression/lib_COTF_F9CD803D"), ColorWithAlpha(0,0,0,0), false, 2.0);
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 1050, PlayerGroupAll());
                lv_vMasteryLabel[lv_vIndex] = DialogControlLastCreated();
                lv_vIndex += 1;
            }

        }    
    }
    DialogControlSetPosition(lv_vPrestigeLabel, PlayerGroupAll(), lv_vAnchor, lv_vOffsetX, (20 * lv_vIndex + 30));
    DialogControlFadeTransparency(lv_vPrestigeLabel, PlayerGroupAll(), 1.5, 20.0);
    Wait(0.5, c_timeGame);
    auto308661DA_ae = lv_vIndex;
    lv_vB = 0;
    for ( ; ( (auto308661DA_ai >= 0 && lv_vB <= auto308661DA_ae) || (auto308661DA_ai < 0 && lv_vB >= auto308661DA_ae) ) ; lv_vB += auto308661DA_ai ) {
        DialogControlSetPosition(lv_vMasteryLabel[lv_vB], PlayerGroupAll(), lv_vAnchor, lv_vOffsetX, (20 * (lv_vIndex - lv_vB ) - 10));
        DialogControlFadeTransparency(lv_vMasteryLabel[lv_vB], PlayerGroupAll(), 1.5, 20.0);
        Wait(0.5, c_timeGame);
    }
    return true;
}

unit libCOTF_gf_CM_PlayerGetGlobalCaster (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cM_GlobalCasterUnit[lp_player];
}

unit libCOTF_gf_AF_GetHeroUnit (int lp_pPlayer) {
    // Variable Declarations
    unit lv_vUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vUnit = libCOMI_gv_cM_HeroUnit[lp_pPlayer];

    // Implementation
    return lv_vUnit;
}

string libCOTF_gf_AF_GetAbility (int lp_pPlayer, int lp_pButtonIndex) {
    // Automatic Variable Declarations
    string autoB2FD2FAD_val;
    int auto324F4E93_val;
    int autoE28047F0_val;
    int autoE2C43FC1_val;
    int auto7DFD037C_val;
    int autoE558D267_val;
    int auto6DFE84A4_val;
    int auto105990B9_val;
    int auto1B752DE4_val;
    int autoDA98BA9C_val;
    int auto913F28D8_val;
    int autoB68FAD47_val;
    int auto31C5F904_val;
    int auto963FDE17_val;
    int auto12461861_val;
    int autoD4205D56_val;
    int auto00B09B26_val;
    int auto4F1D2778_val;
    int auto34225F51_val;
    int auto6953692B_val;

    // Implementation
    autoB2FD2FAD_val = libCOOC_gf_CommanderLinkForPlayerHealingplayer2(lp_pPlayer);
    if (autoB2FD2FAD_val == "TerranMengsk") {
        auto324F4E93_val = lp_pButtonIndex;
        if (auto324F4E93_val == 0) {
            return "BunkerDepotMengskDrop";
        }
        else if (auto324F4E93_val == 1) {
            return "ArtilleryMengskGlobalExperimentalStrike";
        }
        else if (auto324F4E93_val == 2) {
            return "MengskZergCalldownLevel1";
        }
        else if (auto324F4E93_val == 3) {
            return "NuclearAnnihilationMengsk";
        }
        else {
        }
    }
    else if (autoB2FD2FAD_val == "ProtossVorazun") {
        autoE28047F0_val = lp_pButtonIndex;
        if (autoE28047F0_val == 0) {
            return "SOADarkPylon";
        }
        else if (autoE28047F0_val == 1) {
            return "VoidSentryBlackHole";
        }
        else if (autoE28047F0_val == 2) {
            return "SOAShadowGuardCalldown";
        }
        else if (autoE28047F0_val == 3) {
            return "SOATimeFreeze";
        }
        else {
        }
    }
    else if (autoB2FD2FAD_val == "TerranRaynor") {
        autoE2C43FC1_val = lp_pButtonIndex;
        if (autoE2C43FC1_val == 0) {
            return "VoidCoopSummonHyperion";
        }
        else if (autoE2C43FC1_val == 1) {
            return "BansheeAirstrike";
        }
        else {
        }
    }
    else if (autoB2FD2FAD_val == "ZergAbathur") {
        auto7DFD037C_val = lp_pButtonIndex;
        if (auto7DFD037C_val == 0) {
            return "SpawnToxicNest";
        }
        else if (auto7DFD037C_val == 1) {
            return "AbathurMend";
        }
        else {
        }
    }
    else if (autoB2FD2FAD_val == "ProtossAlarak") {
        autoE558D267_val = lp_pButtonIndex;
        if (autoE558D267_val == 0) {
            return "AlarakStructureOvercharge";
        }
        else if (autoE558D267_val == 1) {
            return "AlarakACSummonDeathfleetTarget";
        }
        else {
        }
    }
    else if (autoB2FD2FAD_val == "ProtossArtanis") {
        auto6DFE84A4_val = lp_pButtonIndex;
        if (auto6DFE84A4_val == 0) {
        }
        else if (auto6DFE84A4_val == 1) {
            return "SOAOrbitalStrikeActivate";
        }
        else if (auto6DFE84A4_val == 2) {
            return "SoASuperShield";
        }
        else if (auto6DFE84A4_val == 3) {
            return "SOAStrafeAttackActivate";
        }
        else {
        }
    }
    else if (autoB2FD2FAD_val == "ZergDehaka") {
        auto105990B9_val = lp_pButtonIndex;
        if (auto105990B9_val == 0) {
            return "DehakaNydusDestroyerTopBar";
        }
        else if (auto105990B9_val == 1) {
            return "DehakaGlevigTopBar";
        }
        else if (auto105990B9_val == 2) {
            return "DehakaMurvarTopBar";
        }
        else if (auto105990B9_val == 3) {
            return "DehakaDakrunTopBar";
        }
        else {
        }
    }
    else if (autoB2FD2FAD_val == "ProtossFenix") {
        auto1B752DE4_val = lp_pButtonIndex;
        if (auto1B752DE4_val == 0) {
            return "SOASummonFenix";
        }
        else if (auto1B752DE4_val == 1) {
            return "SOASummonFenixDragoon";
        }
        else if (auto1B752DE4_val == 2) {
            return "SOASummonFenixArbiter";
        }
        else {
        }
    }
    else if (autoB2FD2FAD_val == "TerranHorner") {
        autoDA98BA9C_val = lp_pButtonIndex;
        if (autoDA98BA9C_val == 0) {
            return "HHTrainTopBar";
        }
        else if (autoDA98BA9C_val == 1) {
            return "HHBomberPlatformAreaBombTopBarOrder";
        }
        else if (autoDA98BA9C_val == 2) {
            return "HHSummonMercenarySpaceStation";
        }
        else if (autoDA98BA9C_val == 3) {
            return "HornerAirFleetActivate";
        }
        else {
        }
    }
    else if (autoB2FD2FAD_val == "ProtossKarax") {
        auto913F28D8_val = lp_pButtonIndex;
        if (auto913F28D8_val == 0) {
            return "SOAOrbitalStrikeKarax";
        }
        else if (auto913F28D8_val == 1) {
            return "SOAThermalLanceActivate";
        }
        else if (auto913F28D8_val == 2) {
            return "SOAMapWideChrono";
        }
        else if (auto913F28D8_val == 3) {
            return "SOAPurifierBeam";
        }
        else {
        }
    }
    else if (autoB2FD2FAD_val == "ZergKerrigan") {
        autoB68FAD47_val = lp_pButtonIndex;
        if (autoB68FAD47_val == 0) {
            return "KerriganVoidCoopEconDrop";
        }
        else if (autoB68FAD47_val == 1) {
            return "KerriganVoidCoopCrushingGripWave";
        }
        else {
        }
    }
    else if (autoB2FD2FAD_val == "Nova") {
        auto31C5F904_val = lp_pButtonIndex;
        if (auto31C5F904_val == 0) {
            return "NovaDefensiveMatrixDrone";
        }
        else if (auto31C5F904_val == 1) {
            return "NovaGriffinTransportLoadUnits";
        }
        else if (auto31C5F904_val == 2) {
            return "NovaGriffinBombingRunActivate";
        }
        else if (auto31C5F904_val == 3) {
        }
        else if (auto31C5F904_val == 4) {
            return "NovaCoopCasterNuke";
        }
        else {
        }
    }
    else if (autoB2FD2FAD_val == "Stukov") {
        auto963FDE17_val = lp_pButtonIndex;
        if (auto963FDE17_val == 0) {
        }
        else if (auto963FDE17_val == 1) {
            return "SIStukovInfestStructureUpgraded";
        }
        else if (auto963FDE17_val == 2) {
            return "StukovSummonApocalisk";
        }
        else if (auto963FDE17_val == 3) {
            return "StukovSummonAleksander";
        }
        else {
        }
    }
    else if (autoB2FD2FAD_val == "Swann") {
        auto12461861_val = lp_pButtonIndex;
        if (auto12461861_val == 0) {
        }
        else if (auto12461861_val == 1) {
            return "DrakkenLaserDrillConcentratedBeamIssueOrder";
        }
        else if (auto12461861_val == 2) {
            return "DrakkenLaserDrillPulseCannonIssueOrder";
        }
        else if (auto12461861_val == 3) {
            return "SpecialDelivery";
        }
        else {
        }
    }
    else if (autoB2FD2FAD_val == "Tychus") {
        autoD4205D56_val = lp_pButtonIndex;
        if (autoD4205D56_val == 0) {
            return "TychusMedicTransportLoadUnits";
        }
        else if (autoD4205D56_val == 1) {
            return "TychusCalldownOdinTargeted";
        }
        else {
        }
    }
    else if (autoB2FD2FAD_val == "Zagara") {
        auto00B09B26_val = lp_pButtonIndex;
        if (auto00B09B26_val == 0) {
            return "ZagaraVoidCoopMassFrenzy";
        }
        else if (auto00B09B26_val == 1) {
            return "ZagaraVoidCoopMassRoachDrop";
        }
        else {
        }
    }
    else if (autoB2FD2FAD_val == "Zeratul") {
        auto4F1D2778_val = lp_pButtonIndex;
        if (auto4F1D2778_val == 0) {
            return "ZeratulTopBarWarpTrain";
        }
        else if (auto4F1D2778_val == 1) {
            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1A", c_techCountCompleteOnly) == 1)) {
                return "ZeratulTopBarWarpTrain";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1B", c_techCountCompleteOnly) == 1)) {
                return "ZeratulMapWideStasis";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1C", c_techCountCompleteOnly) == 1)) {
                return "ZeratulTopBarBuild";
            }

        }
        else if (auto4F1D2778_val == 3) {
            return "ZeratulTopBarUltimateWarpTrain";
        }
        else {
        }
    }
    else if (autoB2FD2FAD_val == "Stetmann") {
        auto34225F51_val = lp_pButtonIndex;
        if (auto34225F51_val == 0) {
            return "DeployPowerTowerStetmann";
        }
        else {
        }
    }
    else if (autoB2FD2FAD_val == "Mengsk") {
        auto6953692B_val = lp_pButtonIndex;
        if (auto6953692B_val == 0) {
        }
        else if (auto6953692B_val == 1) {
            return "SIStukovInfestStructureUpgraded";
        }
        else if (auto6953692B_val == 2) {
            return "StukovSummonApocalisk";
        }
        else if (auto6953692B_val == 3) {
            return "StukovSummonAleksander";
        }
        else {
        }
    }
    else {
    }
    return null;
}

fixed libCOTF_gf_AF_GetCooldown (int lp_pPlayer, int lp_pButtonIndex) {
    // Variable Declarations
    fixed lv_vCooldown;
    fixed lv_vCooldownCurrent;

    // Automatic Variable Declarations
    string auto97F7B759_val;
    int autoDA2B2048_val;
    int autoE36A196D_val;
    int auto7C2E4385_val;
    int autoDA9C3536_val;
    int auto937B5EAA_val;
    int auto37EBB3B5_val;
    int auto2AC806EB_val;
    int auto52C25ACF_val;
    int auto9107160D_val;
    int auto82E42039_val;
    int autoACC63E8E_val;
    int auto680F64B4_val;
    int autoF83EA312_val;
    int auto4EDB1508_val;
    int auto4DD0E4F9_val;
    unitgroup autoFA4F61FE_g;
    int autoFA4F61FE_u;
    unit autoFA4F61FE_var;
    int autoD3779987_val;
    int auto81D54950_val;
    int autoA02E1B5D_val;

    // Variable Initialization

    // Implementation
    auto97F7B759_val = libCOOC_gf_CommanderLinkForPlayerHealingplayer2(lp_pPlayer);
    if (auto97F7B759_val == "Mengsk") {
        autoDA2B2048_val = lp_pButtonIndex;
        if (autoDA2B2048_val == 0) {
            return UnitAbilityGetChargeRegen(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "BunkerDepotMengskDrop", "Abil/BunkerDepotDropMengsk");
        }
        else if (autoDA2B2048_val == 1) {
            return GameGetCooldown("\"Abil/ArtilleryMengskExperimentalStrike\"");
        }
        else if (autoDA2B2048_val == 2) {
            return UnitGetCooldown(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "Abil/MengskZergCooldown");
        }
        else if (autoDA2B2048_val == 3) {
            return UnitAbilityGetCooldown(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "NuclearAnnihilationMengsk", "Abil/NuclearAnnihilationMengsk");
        }
        else {
        }
    }
    else if (auto97F7B759_val == "Vorazun") {
        autoE36A196D_val = lp_pButtonIndex;
        if (autoE36A196D_val == 0) {
            return UnitAbilityGetCooldown(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "SOADarkPylon", "Abil/SOADarkPylon");
        }
        else if (autoE36A196D_val == 2) {
            return UnitAbilityGetCooldown(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "SOAShadowGuardCalldown", "Abil/SOAShadowGuardCalldown");
        }
        else if (autoE36A196D_val == 3) {
            return UnitAbilityGetCooldown(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "SOATimeFreeze", "Abil/SOATimeFreeze");
        }
        else {
        }
    }
    else if (auto97F7B759_val == "Raynor") {
        auto7C2E4385_val = lp_pButtonIndex;
        if (auto7C2E4385_val == 0) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/VoidCoopSummonHyperion");
        }
        else if (auto7C2E4385_val == 1) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/BansheeAirstrike");
        }
        else {
        }
    }
    else if (auto97F7B759_val == "Abathur") {
        autoDA9C3536_val = lp_pButtonIndex;
        if (autoDA9C3536_val == 0) {
            return PlayerGetChargeRegen(lp_pPlayer, "Abil/ToxicNestBuild");
        }
        else if (autoDA9C3536_val == 1) {
            return UnitAbilityGetChargeRegen(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "AbathurMend", "Abil/AbathurMend");
        }
        else {
        }
    }
    else if (auto97F7B759_val == "Alarak") {
        auto937B5EAA_val = lp_pButtonIndex;
        if (auto937B5EAA_val == 0) {
            return UnitAbilityGetChargeRegen(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "AlarakStructureOvercharge", "Abil/AlarakStructureOvercharge");
        }
        else if (auto937B5EAA_val == 1) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/AlarakACSummonDeathfleetTarget");
        }
        else {
        }
    }
    else if (auto97F7B759_val == "Artanis") {
        auto37EBB3B5_val = lp_pButtonIndex;
        if (auto37EBB3B5_val == 0) {
        }
        else if (auto37EBB3B5_val == 1) {
            return UnitAbilityGetCooldown(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "SOAOrbitalStrikeActivate", "Abil/SOAOrbitalStrikeActivate");
        }
        else if (auto37EBB3B5_val == 2) {
            return UnitAbilityGetCooldown(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "SoASuperShield", "Abil/SoASuperShield");
        }
        else if (auto37EBB3B5_val == 3) {
            return UnitAbilityGetCooldown(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "SOAStrafeAttack", "Abil/SOAStrafeAttack");
        }
        else {
        }
    }
    else if (auto97F7B759_val == "Dehaka") {
        auto2AC806EB_val = lp_pButtonIndex;
        if (auto2AC806EB_val == 0) {
            return PlayerGetChargeRegen(lp_pPlayer, "Abil/DehakaNydusDestroyerTopBar");
        }
        else if (auto2AC806EB_val == 1) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/DehakaGlevigTopBar");
        }
        else if (auto2AC806EB_val == 2) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/DehakaMurvarTopBar");
        }
        else if (auto2AC806EB_val == 3) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/DehakaDakrunTopBar");
        }
        else {
        }
    }
    else if (auto97F7B759_val == "Fenix") {
        auto52C25ACF_val = lp_pButtonIndex;
        if (auto52C25ACF_val == 0) {
            return PlayerGetCooldown(lp_pPlayer, "SOASummonFenix");
        }
        else if (auto52C25ACF_val == 1) {
            return PlayerGetCooldown(lp_pPlayer, "SOASummonFenixDragoon");
        }
        else if (auto52C25ACF_val == 2) {
            return PlayerGetCooldown(lp_pPlayer, "SOASummonFenixArbiter");
        }
        else {
        }
    }
    else if (auto97F7B759_val == "Horner") {
        auto9107160D_val = lp_pButtonIndex;
        if (auto9107160D_val == 0) {
            return PlayerGetChargeRegen(lp_pPlayer, "Abil/HHTrainTopBar");
        }
        else if (auto9107160D_val == 1) {
            return UnitAbilityGetCooldown(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "HHBomberPlatformAreaBombTopBarDummyTimer", "Abil/HHBomberPlatformAreaBombTopBarDummyTimer");
        }
        else if (auto9107160D_val == 2) {
            return UnitAbilityGetCooldown(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "HornerAirFleetActivate", "Abil/HornerAirFleetActivate");
        }
        else if (auto9107160D_val == 3) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/HHSummonMercenarySpaceStation");
        }
        else {
        }
    }
    else if (auto97F7B759_val == "Karax") {
        auto82E42039_val = lp_pButtonIndex;
        if (auto82E42039_val == 1) {
            return UnitAbilityGetCooldown(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "SOAThermalLanceActivate", "Abil/SOAThermalLanceActivate");
        }
        else if (auto82E42039_val == 2) {
            return UnitAbilityGetCooldown(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "SOAMapWideChrono", "Abil/SOAMapWideChrono");
        }
        else if (auto82E42039_val == 3) {
            return UnitAbilityGetCooldown(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "SOAPurifierBeam", "Abil/SOAPurifierBeam");
        }
        else {
        }
    }
    else if (auto97F7B759_val == "Kerrigan") {
        autoACC63E8E_val = lp_pButtonIndex;
        if (autoACC63E8E_val == 0) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/KerriganVoidCoopEconDrop");
        }
        else if (autoACC63E8E_val == 1) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/KerriganVoidCoopCrushingGripWave");
        }
        else {
        }
    }
    else if (auto97F7B759_val == "Nova") {
        auto680F64B4_val = lp_pButtonIndex;
        if (auto680F64B4_val == 0) {
            return PlayerGetChargeRegen(lp_pPlayer, "Abil/NovaDefensiveMatrixDrone");
        }
        else if (auto680F64B4_val == 1) {
            return UnitAbilityGetCooldown(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "NovaGriffinBombingRunActivate", "Abil/NovaGriffinBombingRunActivate");
        }
        else if (auto680F64B4_val == 2) {
            return UnitAbilityGetCooldown(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "NovaGriffinTransportLoadUnits", "Abil/NovaGriffinTransportLoadUnits");
        }
        else if (auto680F64B4_val == 3) {
            return UnitAbilityGetCooldown(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "NovaReviveInstantBuyback", "Abil/NovaReviveInstantBuyback");
        }
        else if (auto680F64B4_val == 4) {
            return GameGetChargeRegen("Unit/NovaDecoy");
        }
        else {
        }
    }
    else if (auto97F7B759_val == "Stukov") {
        autoF83EA312_val = lp_pButtonIndex;
        if (autoF83EA312_val == 1) {
            return UnitAbilityGetChargeRegen(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "SIStukovInfestStructureUpgraded", "Abil/SIStukovInfestStructureUpgraded");
        }
        else if (autoF83EA312_val == 2) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/StukovSummonApocalisk");
        }
        else if (autoF83EA312_val == 3) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/StukovSummonAleksander");
        }
        else {
        }
    }
    else if (auto97F7B759_val == "Swann") {
        auto4EDB1508_val = lp_pButtonIndex;
        if (auto4EDB1508_val == 1) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/DrakkenLaserDrillBFG");
        }
        else if (auto4EDB1508_val == 2) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/DrakkenLaserDrillNuke");
        }
        else if (auto4EDB1508_val == 3) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/SpecialDelivery");
        }
        else {
        }
    }
    else if (auto97F7B759_val == "Tychus") {
        auto4DD0E4F9_val = lp_pButtonIndex;
        if (auto4DD0E4F9_val == 0) {
            lv_vCooldown = 300.0;
            autoFA4F61FE_g = UnitGroup("TychusMedivacPlatform", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoFA4F61FE_u = UnitGroupCount(autoFA4F61FE_g, c_unitCountAll);
            for (;; autoFA4F61FE_u -= 1) {
                autoFA4F61FE_var = UnitGroupUnitFromEnd(autoFA4F61FE_g, autoFA4F61FE_u);
                if (autoFA4F61FE_var == null) { break; }
                lv_vCooldownCurrent = UnitAbilityGetCooldown(autoFA4F61FE_var, "TychusMedicTransportLoadUnits", "Abil/TychusMedicTransportLoadUnits");
                if ((lv_vCooldownCurrent == 0.0)) {
                    return lv_vCooldownCurrent;
                }
                else {
                    if ((lv_vCooldownCurrent < lv_vCooldown)) {
                        lv_vCooldown = lv_vCooldownCurrent;
                    }

                }
            }
            return lv_vCooldown;
        }
        else if (auto4DD0E4F9_val == 1) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/TychusCalldownOdinTargeted");
        }
        else {
        }
    }
    else if (auto97F7B759_val == "Zagara") {
        autoD3779987_val = lp_pButtonIndex;
        if (autoD3779987_val == 0) {
            return PlayerGetCooldown(lp_pPlayer, "ZagaraVoidCoopMassFrenzy");
        }
        else if (autoD3779987_val == 1) {
            return PlayerGetCooldown(lp_pPlayer, "ZagaraVoidCoopInfestedPods");
        }
        else {
        }
    }
    else if (auto97F7B759_val == "Zeratul") {
        auto81D54950_val = lp_pButtonIndex;
        if (auto81D54950_val == 0) {
            return UnitAbilityGetCooldown(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "ZeratulTopBarWarpTrain", "Abil/ZeratulTopBarWarpTrain");
        }
        else if (auto81D54950_val == 1) {
            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1A", c_techCountCompleteOnly) == 1)) {
                return PlayerGetCooldown(lp_pPlayer, "Abil/ZeratulMapWideStasis");
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1B", c_techCountCompleteOnly) == 1)) {
                return UnitAbilityGetCooldown(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "ZeratulTopBarWarpTrain", "Abil/ZeratulSuppressionCrystal");
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1C", c_techCountCompleteOnly) == 1)) {
                return (UnitAbilityChargeInfo(libCOTF_gf_CM_PlayerGetGlobalCaster(EventPlayer()), AbilityCommand("ZeratulTopBarBuild", 0), c_unitAbilChargeRegenLeft) / 16.0);
            }

        }
        else if (auto81D54950_val == 3) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/ZeratulTopBarUltimateWarpTrain");
        }
        else {
        }
    }
    else if (auto97F7B759_val == "Stetmann") {
        autoA02E1B5D_val = lp_pButtonIndex;
        if (autoA02E1B5D_val == 0) {
            return PlayerGetChargeRegen(lp_pPlayer, "Abil/DeployPowerTowerStetmann");
        }
        else {
        }
    }
    else {
    }
    return -1.0;
}

fixed libCOTF_gf_AF_GetCharges (int lp_pPlayer, int lp_pButtonIndex) {
    // Variable Declarations
    fixed lv_vA;

    // Automatic Variable Declarations
    string auto4E820EB3_val;
    int auto42737673_val;
    int auto8802968A_val;
    int auto807A02A4_val;
    int autoCD1FD23F_val;
    int autoAE507391_val;
    int auto0579A1EC_val;
    int auto0202616E_val;
    int auto3FFD5575_val;
    unitgroup auto7E5E0EF7_g;
    int auto7E5E0EF7_u;
    unit auto7E5E0EF7_var;
    int auto9FDE8A5D_val;
    int auto672AAECC_val;

    // Variable Initialization

    // Implementation
    auto4E820EB3_val = libCOOC_gf_CommanderLinkForPlayerHealingplayer2(lp_pPlayer);
    if (auto4E820EB3_val == "Mengsk") {
        auto42737673_val = lp_pButtonIndex;
        if (auto42737673_val == 0) {
            return UnitAbilityChargeInfo(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), AbilityCommand("BunkerDepotMengskDrop", 0), c_unitAbilChargeCountLeft);
        }
        else {
        }
    }
    else if (auto4E820EB3_val == "Abathur") {
        auto8802968A_val = lp_pButtonIndex;
        if (auto8802968A_val == 0) {
            return UnitAbilityChargeInfo(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountLeft);
        }
        else if (auto8802968A_val == 1) {
            return UnitAbilityChargeInfo(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), AbilityCommand("AbathurMend", 0), c_unitAbilChargeCountLeft);
        }
        else {
        }
    }
    else if (auto4E820EB3_val == "Alarak") {
        auto807A02A4_val = lp_pButtonIndex;
        if (auto807A02A4_val == 0) {
            return UnitAbilityChargeInfo(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), AbilityCommand("AlarakStructureOvercharge", 0), c_unitAbilChargeCountLeft);
        }
        else {
        }
    }
    else if (auto4E820EB3_val == "Dehaka") {
        autoCD1FD23F_val = lp_pButtonIndex;
        if (autoCD1FD23F_val == 0) {
            return UnitAbilityChargeInfo(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), AbilityCommand("DehakaNydusDestroyerTopBar", 0), c_unitAbilChargeCountLeft);
        }
        else {
        }
    }
    else if (auto4E820EB3_val == "Horner") {
        autoAE507391_val = lp_pButtonIndex;
        if (autoAE507391_val == 0) {
            return UnitAbilityChargeInfo(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountLeft);
        }
        else if (autoAE507391_val == 1) {
            return UnitAbilityChargeInfo(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), AbilityCommand("HHBomberPlatformAreaBombTopBarOrder", 0), c_unitAbilChargeCountLeft);
        }
        else {
        }
    }
    else if (auto4E820EB3_val == "Nova") {
        auto0579A1EC_val = lp_pButtonIndex;
        if (auto0579A1EC_val == 0) {
            return UnitAbilityChargeInfo(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), AbilityCommand("NovaDefensiveMatrixDrone", 0), c_unitAbilChargeCountLeft);
        }
        else if (auto0579A1EC_val == 4) {
            return UnitAbilityChargeInfo(libCOTF_gf_AF_GetHeroUnit(lp_pPlayer), AbilityCommand("NovaCoopCasterNuke", 0), c_unitAbilChargeCountLeft);
        }
        else {
        }
    }
    else if (auto4E820EB3_val == "Stukov") {
        auto0202616E_val = lp_pButtonIndex;
        if (auto0202616E_val == 1) {
            return UnitAbilityChargeInfo(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), AbilityCommand("SIStukovInfestStructureUpgraded", 0), c_unitAbilChargeCountLeft);
        }
        else {
        }
    }
    else if (auto4E820EB3_val == "Tychus") {
        auto3FFD5575_val = lp_pButtonIndex;
        if (auto3FFD5575_val == 0) {
            auto7E5E0EF7_g = UnitGroup("TychusMedivacPlatform", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto7E5E0EF7_u = UnitGroupCount(auto7E5E0EF7_g, c_unitCountAll);
            for (;; auto7E5E0EF7_u -= 1) {
                auto7E5E0EF7_var = UnitGroupUnitFromEnd(auto7E5E0EF7_g, auto7E5E0EF7_u);
                if (auto7E5E0EF7_var == null) { break; }
                if ((UnitAbilityGetCooldown(auto7E5E0EF7_var, "TychusMedicTransportLoadUnits", "Abil/TychusMedicTransportLoadUnits") == 0.0)) {
                    lv_vA += 1.0;
                }

            }
            return lv_vA;
        }
        else {
        }
    }
    else if (auto4E820EB3_val == "Zeratul") {
        auto9FDE8A5D_val = lp_pButtonIndex;
        if (auto9FDE8A5D_val == 1) {
            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1C", c_techCountCompleteOnly) == 1)) {
                return UnitAbilityChargeInfo(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), AbilityCommand("ZeratulTopBarBuild", 0), c_unitAbilChargeCountLeft);
            }

        }
        else {
        }
    }
    else if (auto4E820EB3_val == "Stetmann") {
        auto672AAECC_val = lp_pButtonIndex;
        if (auto672AAECC_val == 0) {
            return UnitAbilityChargeInfo(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), AbilityCommand("DeployPowerTowerStetmann", 0), c_unitAbilChargeCountLeft);
        }
        else {
        }
    }
    else {
    }
    return -1.0;
}

string libCOTF_gf_AF_GetButtonText (int lp_pPlayer, int lp_pButtonIndex) {
    // Automatic Variable Declarations
    string autoE3253777_val;
    int autoCC35C88D_val;
    int autoB8205B78_val;
    int auto403BD89D_val;
    int auto80A2F1A2_val;
    int autoA7849D54_val;
    int autoAC0BCD58_val;
    int auto4795EA5F_val;
    int auto2FDA348D_val;
    int auto73CA573E_val;
    int autoC7B9A97B_val;
    int autoDBFA8AFF_val;
    int auto56F94281_val;
    int autoE37C6FEA_val;
    int auto900A7E08_val;
    int autoEECFBA8E_val;
    int auto23EC69DB_val;
    int auto88BF902F_val;
    int auto8A27C06C_val;

    // Implementation
    autoE3253777_val = libCOOC_gf_CommanderLinkForPlayerHealingplayer2(lp_pPlayer);
    if (autoE3253777_val == "Mengsk") {
        autoCC35C88D_val = lp_pButtonIndex;
        if (autoCC35C88D_val == 0) {
            return "Button/Name/BunkerDepotMengskDrop";
        }
        else if (autoCC35C88D_val == 1) {
            return "Button/Name/ArtilleryMengskExperimentalStrike";
        }
        else if (autoCC35C88D_val == 2) {
            return "Button/Name/MengskZergCalldown";
        }
        else if (autoCC35C88D_val == 3) {
            return "Button/Name/NuclearAnnihilationMengsk";
        }
        else {
        }
    }
    else if (autoE3253777_val == "Vorazun") {
        autoB8205B78_val = lp_pButtonIndex;
        if (autoB8205B78_val == 0) {
            return "Button/Name/SOADarkPylon";
        }
        else if (autoB8205B78_val == 1) {
            return "Button/Name/SOAVorazunBlackHole";
        }
        else if (autoB8205B78_val == 2) {
            return "Button/Name/SOAShadowGuardCalldown";
        }
        else if (autoB8205B78_val == 3) {
            return "Button/Name/SOATimeFreeze";
        }
        else {
        }
    }
    else if (autoE3253777_val == "Raynor") {
        auto403BD89D_val = lp_pButtonIndex;
        if (auto403BD89D_val == 0) {
            return "Button/Name/SummonHyperionVoid";
        }
        else if (auto403BD89D_val == 1) {
            return "Button/Name/BansheeAirstrike";
        }
        else {
        }
    }
    else if (autoE3253777_val == "Abathur") {
        auto80A2F1A2_val = lp_pButtonIndex;
        if (auto80A2F1A2_val == 0) {
            return "Button/Name/SpawnToxicNest";
        }
        else if (auto80A2F1A2_val == 1) {
            return "Button/Name/AbathurMend";
        }
        else {
        }
    }
    else if (autoE3253777_val == "Alarak") {
        autoA7849D54_val = lp_pButtonIndex;
        if (autoA7849D54_val == 0) {
            return "Button/Name/AlarakStructureOvercharge";
        }
        else if (autoA7849D54_val == 1) {
            return "Button/Name/AlarakACSummonDeathfleet";
        }
        else {
        }
    }
    else if (autoE3253777_val == "Artanis") {
        autoAC0BCD58_val = lp_pButtonIndex;
        if (autoAC0BCD58_val == 0) {
            return "Button/Name/SOAPylonPower";
        }
        else if (autoAC0BCD58_val == 1) {
            return "Button/Name/SOAOrbitalStrike";
        }
        else if (autoAC0BCD58_val == 2) {
            return "Button/Name/SOASuperShield";
        }
        else if (autoAC0BCD58_val == 3) {
            return "Button/Name/SOAStrafeAttack";
        }
        else {
        }
    }
    else if (autoE3253777_val == "Dehaka") {
        auto4795EA5F_val = lp_pButtonIndex;
        if (auto4795EA5F_val == 0) {
            return "Button/Name/DehakaNydusDestroyerTopBar";
        }
        else if (auto4795EA5F_val == 1) {
            return "Button/Name/DehakaGlevigTopBar";
        }
        else if (auto4795EA5F_val == 2) {
            return "Button/Name/DehakaMurvarTopBar";
        }
        else if (auto4795EA5F_val == 3) {
            return "Button/Name/DehakaDakrunTopBar";
        }
        else {
        }
    }
    else if (autoE3253777_val == "Fenix") {
        auto2FDA348D_val = lp_pButtonIndex;
        if (auto2FDA348D_val == 0) {
            return "Button/Name/SOASummonFenix";
        }
        else if (auto2FDA348D_val == 1) {
            return "Button/Name/SOASummonFenixDragoon";
        }
        else if (auto2FDA348D_val == 2) {
            return "Button/Name/SOASummonFenixArbiter";
        }
        else {
        }
    }
    else if (autoE3253777_val == "Horner") {
        auto73CA573E_val = lp_pButtonIndex;
        if (auto73CA573E_val == 0) {
            return "Button/Name/HHMagneticMines";
        }
        else if (auto73CA573E_val == 1) {
            return "Button/Name/HHBomberAreaBombTopBar";
        }
        else if (auto73CA573E_val == 2) {
            return "Button/Name/UnlockHHAirFleet";
        }
        else if (auto73CA573E_val == 3) {
            return "Button/Name/HHSummonSpaceStation";
        }
        else {
        }
    }
    else if (autoE3253777_val == "Karax") {
        autoC7B9A97B_val = lp_pButtonIndex;
        if (autoC7B9A97B_val == 0) {
            return "Button/Name/SOAOrbitalStrikeKarax";
        }
        else if (autoC7B9A97B_val == 1) {
            return "Button/Name/SOAThermalLance";
        }
        else if (autoC7B9A97B_val == 2) {
            return "Button/Name/SOAMapWideChrono";
        }
        else if (autoC7B9A97B_val == 3) {
            return "Button/Name/SOAPurifierBeam";
        }
        else {
        }
    }
    else if (autoE3253777_val == "Kerrigan") {
        autoDBFA8AFF_val = lp_pButtonIndex;
        if (autoDBFA8AFF_val == 0) {
            return "Button/Name/KerriganVoidCoopEconDrop";
        }
        else if (autoDBFA8AFF_val == 1) {
            return "Button/Name/KerriganVoidCoopCrushingGripWave";
        }
        else {
        }
    }
    else if (autoE3253777_val == "Nova") {
        auto56F94281_val = lp_pButtonIndex;
        if (auto56F94281_val == 0) {
            return "Button/Name/NovaDefensiveMatrixDrone";
        }
        else if (auto56F94281_val == 1) {
            return "Button/Name/NovaGriffinBombingRun";
        }
        else if (auto56F94281_val == 2) {
            return "Button/Name/NovaGriffinTransportUnits";
        }
        else if (auto56F94281_val == 3) {
            return "Button/Name/NovaReviveInstantBuyback";
        }
        else if (auto56F94281_val == 4) {
            return "Button/Name/NovaUnitNuke";
        }
        else {
        }
    }
    else if (autoE3253777_val == "Stukov") {
        autoE37C6FEA_val = lp_pButtonIndex;
        if (autoE37C6FEA_val == 0) {
            return "Button/Name/SIStukovPlaceHordeRallyTopBar";
        }
        else if (autoE37C6FEA_val == 1) {
            return "Button/Name/SIStukovInfestStructure";
        }
        else if (autoE37C6FEA_val == 2) {
            return "Button/Name/StukovSummonApocalisk";
        }
        else if (autoE37C6FEA_val == 3) {
            return "Button/Name/StukovSummonAleksander";
        }
        else {
        }
    }
    else if (autoE3253777_val == "Swann") {
        auto900A7E08_val = lp_pButtonIndex;
        if (auto900A7E08_val == 1) {
            return "Button/Name/DrakkenLaserDrillBFGIO";
        }
        else if (auto900A7E08_val == 2) {
            return "Button/Name/DrakkenLaserDrillPulseCannonIO";
        }
        else if (auto900A7E08_val == 3) {
            return "Button/Name/SpecialDelivery";
        }
        else {
        }
    }
    else if (autoE3253777_val == "Tychus") {
        autoEECFBA8E_val = lp_pButtonIndex;
        if (autoEECFBA8E_val == 0) {
            return "Button/Name/TychusMedicTransportUnitsTopBar";
        }
        else if (autoEECFBA8E_val == 1) {
            return "Button/Name/TychusCalldownOdin";
        }
        else {
        }
    }
    else if (autoE3253777_val == "Zagara") {
        auto23EC69DB_val = lp_pButtonIndex;
        if (auto23EC69DB_val == 0) {
            return "Button/Name/ZagaraVoidCoopMassFrenzy";
        }
        else if (auto23EC69DB_val == 1) {
            return "Button/Name/MassRoachDrop";
        }
        else {
        }
    }
    else if (autoE3253777_val == "Zeratul") {
        auto88BF902F_val = lp_pButtonIndex;
        if (auto88BF902F_val == 0) {
            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier0A", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulArtifactUpgradeTier0A";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier0B", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulArtifactUpgradeTier0B";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier0C", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulArtifactUpgradeTier0C";
            }

        }
        else if (auto88BF902F_val == 1) {
            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1A", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulArtifactUpgradeTier1A";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1B", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulArtifactUpgradeTier1B";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1C", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulArtifactUpgradeTier1C";
            }

        }
        else if (auto88BF902F_val == 2) {
            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier2A", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulArtifactUpgradeTier2A";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier2B", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulArtifactUpgradeTier2B";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier2C", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulStructureBarrierChose";
            }

        }
        else if (auto88BF902F_val == 3) {
            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier3A", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulArtifactUpgradeTier3A";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier3B", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulArtifactUpgradeTier3B";
            }

        }
        else {
        }
    }
    else if (autoE3253777_val == "Stetmann") {
        auto8A27C06C_val = lp_pButtonIndex;
        if (auto8A27C06C_val == 0) {
            return "Button/Name/PowerTowerStetmannLevel1";
        }
        else {
        }
    }
    else {
    }
    return "";
}

bool libCOTF_gf_AF_AbilityHasCooldownAndEnergyCost (int lp_pPlayer, int lp_pButtonIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOTF_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "SOAThermalLanceActivate") && (libCOTF_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "SoASuperShield") && (libCOTF_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "SOAOrbitalStrikeActivate") && (libCOTF_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "SOADarkPylon") && (libCOTF_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "SOAShadowGuardCalldown") && (libCOTF_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "MengskZergCalldownLevel1") && (libCOTF_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "MengskZergCalldownLevel2") && (libCOTF_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "MengskZergCalldownLevel3") && (libCOTF_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "MengskZergCalldownLevel4") && (libCOTF_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "NuclearAnnihilationMengsk") && (libCOTF_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "ArtilleryMengskGlobalExperimentalStrike") && (libCOTF_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "BunkerDepotMengskDrop")) {
        return false;
    }
    else {
        return true;
    }
}

bool libCOTF_gf_AF_AbilityIsAvailable (int lp_pPlayer, int lp_pButtonIndex) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitAbilityCheck(libCOTF_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), libCOTF_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex), false) == true) || ((libCOMI_gv_cM_DehakaBossBuildingBuilt_Glevig[lp_pPlayer] == false) && (libCOTF_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) == "DehakaNydusDestroyerTopBar")) || ((libCOMI_gv_cM_DehakaBossBuildingBuilt_Glevig[lp_pPlayer] == false) && (libCOTF_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) == "DehakaGlevigTopBar")) || ((libCOMI_gv_cM_DehakaBossBuildingBuilt_Murvar[lp_pPlayer] == false) && (libCOTF_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) == "DehakaMurvarTopBar")) || ((libCOMI_gv_cM_DehakaBossBuildingBuilt_Dakrun[lp_pPlayer] == false) && (libCOTF_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) == "DehakaDakrunTopBar")) || ((UnitGroupCount(UnitGroup("HHBomberPlatform", lp_pPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1) && (libCOTF_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) == "HHBomberPlatformAreaBombTopBarOrder")) || ((UnitGroupCount(UnitGroup("NovaReviveBeacon", lp_pPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) != 1) && (libCOTF_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) == "NovaReviveInstantBuyback")) || ((TechTreeUpgradeCount(lp_pPlayer, "DrakkenLaserDrillBFG", c_techCountQueuedOrBetter) != 1) && (libCOTF_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) == "DrakkenLaserDrillConcentratedBeamIssueOrder")) || ((TechTreeUpgradeCount(lp_pPlayer, "DrakkenLaserDrillNuke", c_techCountQueuedOrBetter) != 1) && (libCOTF_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) == "DrakkenLaserDrillPulseCannonIssueOrder")) || ((UnitGroupCount(UnitGroup("TychusMedivacPlatform", lp_pPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (libCOTF_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) == "TychusMedicTransportLoadUnits")) || ((UnitGroupCount(UnitGroup("ArtilleryMengsk", lp_pPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (libCOTF_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) == "ArtilleryMengskGlobalExperimentalStrike")))) {
        return false;
    }
    else {
        return true;
    }
}

fixed libCOTF_gf_AF_EnergyCostofAbility (string lp_pAbility) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_pAbility == "SOADarkPylon")) {
        return libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "SOADarkPylon", "InfoArray[" + IntToString(0) + "].Vital[" + IntToString(c_unitVitalEnergy) + "]", c_playerAny);
    }
    else {
        return libNtve_gf_CostOfAbility(lp_pAbility, "Energy");
    }
}

string libCOTF_gf_AF_GetButton (int lp_pPlayer, int lp_pButtonIndex) {
    // Automatic Variable Declarations
    string auto7C92F9B8_val;
    int auto76D59FF8_val;
    int autoB434076B_val;
    int auto0832F550_val;
    int autoD2AC4C63_val;
    int autoFA600D8B_val;
    int autoB5E24BB2_val;
    int autoDB6CE176_val;
    int auto1271A46C_val;
    int autoF368C2B8_val;
    int auto465B67EF_val;
    int auto38CC985F_val;
    int auto6B86CE3E_val;
    int auto3DB84D25_val;
    int auto3C37DDF0_val;
    int autoE74477B2_val;
    int autoCD0D87DC_val;
    int auto2EADB45A_val;
    int auto0E23D99B_val;

    // Implementation
    auto7C92F9B8_val = libCOOC_gf_CommanderLinkForPlayerHealingplayer2(lp_pPlayer);
    if (auto7C92F9B8_val == "Mengsk") {
        auto76D59FF8_val = lp_pButtonIndex;
        if (auto76D59FF8_val == 0) {
            return "BunkerDepotMengskDrop";
        }
        else if (auto76D59FF8_val == 1) {
            return "ArtilleryMengskExperimentalStrike";
        }
        else if (auto76D59FF8_val == 2) {
            return "MengskZergCalldownLevel1";
        }
        else if (auto76D59FF8_val == 3) {
            return "NuclearAnnihilationMengsk";
        }
        else {
        }
    }
    else if (auto7C92F9B8_val == "Vorazun") {
        autoB434076B_val = lp_pButtonIndex;
        if (autoB434076B_val == 0) {
            return "SOADarkPylon";
        }
        else if (autoB434076B_val == 1) {
            return "SOAVorazunBlackHole";
        }
        else if (autoB434076B_val == 2) {
            return "SOAShadowGuardCalldown";
        }
        else if (autoB434076B_val == 3) {
            return "SOATimeFreeze";
        }
        else {
        }
    }
    else if (auto7C92F9B8_val == "Raynor") {
        auto0832F550_val = lp_pButtonIndex;
        if (auto0832F550_val == 0) {
            return "SummonHyperionVoid";
        }
        else if (auto0832F550_val == 1) {
            return "BansheeAirstrike";
        }
        else {
        }
    }
    else if (auto7C92F9B8_val == "Abathur") {
        autoD2AC4C63_val = lp_pButtonIndex;
        if (autoD2AC4C63_val == 0) {
            return "SpawnToxicNest";
        }
        else if (autoD2AC4C63_val == 1) {
            return "AbathurMend";
        }
        else {
        }
    }
    else if (auto7C92F9B8_val == "Alarak") {
        autoFA600D8B_val = lp_pButtonIndex;
        if (autoFA600D8B_val == 0) {
            return "AlarakStructureOvercharge";
        }
        else if (autoFA600D8B_val == 1) {
            return "AlarakACSummonDeathfleet";
        }
        else {
        }
    }
    else if (auto7C92F9B8_val == "Artanis") {
        autoB5E24BB2_val = lp_pButtonIndex;
        if (autoB5E24BB2_val == 0) {
            return "SOAPylonPower";
        }
        else if (autoB5E24BB2_val == 1) {
            return "SOAOrbitalStrike";
        }
        else if (autoB5E24BB2_val == 2) {
            return "SOASuperShield";
        }
        else if (autoB5E24BB2_val == 3) {
            return "SOAStrafeAttack";
        }
        else {
        }
    }
    else if (auto7C92F9B8_val == "Dehaka") {
        autoDB6CE176_val = lp_pButtonIndex;
        if (autoDB6CE176_val == 0) {
            return "DehakaNydusDestroyerTopBarPassive";
        }
        else if (autoDB6CE176_val == 1) {
            return "DehakaGlevigTopBar";
        }
        else if (autoDB6CE176_val == 2) {
            return "DehakaMurvarTopBar";
        }
        else if (autoDB6CE176_val == 3) {
            return "DehakaDakrunTopBar";
        }
        else {
        }
    }
    else if (auto7C92F9B8_val == "Fenix") {
        auto1271A46C_val = lp_pButtonIndex;
        if (auto1271A46C_val == 0) {
            return "SOASummonFenix";
        }
        else if (auto1271A46C_val == 1) {
            return "SOASummonFenixDragoon";
        }
        else if (auto1271A46C_val == 2) {
            return "SOASummonFenixArbiter";
        }
        else {
        }
    }
    else if (auto7C92F9B8_val == "Horner") {
        autoF368C2B8_val = lp_pButtonIndex;
        if (autoF368C2B8_val == 0) {
            return "HHMagneticMines";
        }
        else if (autoF368C2B8_val == 1) {
            return "HHBomberAreaBombTopBar";
        }
        else if (autoF368C2B8_val == 2) {
            return "HornerAirFleet";
        }
        else if (autoF368C2B8_val == 3) {
            return "HHSummonSpaceStation";
        }
        else {
        }
    }
    else if (auto7C92F9B8_val == "Karax") {
        auto465B67EF_val = lp_pButtonIndex;
        if (auto465B67EF_val == 0) {
            return "SOAOrbitalStrikeKarax";
        }
        else if (auto465B67EF_val == 1) {
            return "SOAThermalLance";
        }
        else if (auto465B67EF_val == 2) {
            return "SOAMapWideChrono";
        }
        else if (auto465B67EF_val == 3) {
            return "SOAPurifierBeam";
        }
        else {
        }
    }
    else if (auto7C92F9B8_val == "Kerrigan") {
        auto38CC985F_val = lp_pButtonIndex;
        if (auto38CC985F_val == 0) {
            return "KerriganVoidCoopEconDrop";
        }
        else if (auto38CC985F_val == 1) {
            return "KerriganVoidCoopCrushingGripWave";
        }
        else {
        }
    }
    else if (auto7C92F9B8_val == "Nova") {
        auto6B86CE3E_val = lp_pButtonIndex;
        if (auto6B86CE3E_val == 0) {
            return "NovaDefensiveMatrixDrone";
        }
        else if (auto6B86CE3E_val == 1) {
            return "NovaGriffinBombingRun";
        }
        else if (auto6B86CE3E_val == 2) {
            return "NovaGriffinTransportUnits";
        }
        else if (auto6B86CE3E_val == 3) {
            return "NovaReviveInstantBuyback";
        }
        else if (auto6B86CE3E_val == 4) {
            return "NovaCoopCasterNuke";
        }
        else {
        }
    }
    else if (auto7C92F9B8_val == "Stukov") {
        auto3DB84D25_val = lp_pButtonIndex;
        if (auto3DB84D25_val == 0) {
            return "SIStukovPlaceHordeRallyTopBar";
        }
        else if (auto3DB84D25_val == 1) {
            return "SIStukovInfestStructureUpgraded";
        }
        else if (auto3DB84D25_val == 2) {
            return "StukovSummonApocalisk";
        }
        else if (auto3DB84D25_val == 3) {
            return "StukovSummonAleksander";
        }
        else {
        }
    }
    else if (auto7C92F9B8_val == "Swann") {
        auto3C37DDF0_val = lp_pButtonIndex;
        if (auto3C37DDF0_val == 1) {
            return "DrakkenLaserDrillBFGIO";
        }
        else if (auto3C37DDF0_val == 2) {
            return "DrakkenLaserDrillPulseCannonIO";
        }
        else if (auto3C37DDF0_val == 3) {
            return "SpecialDelivery";
        }
        else {
        }
    }
    else if (auto7C92F9B8_val == "Tychus") {
        autoE74477B2_val = lp_pButtonIndex;
        if (autoE74477B2_val == 0) {
            return "TychusMedicTransportUnitsTopBar";
        }
        else if (autoE74477B2_val == 1) {
            return "TychusCalldownOdin";
        }
        else {
        }
    }
    else if (auto7C92F9B8_val == "Zagara") {
        autoCD0D87DC_val = lp_pButtonIndex;
        if (autoCD0D87DC_val == 0) {
            return "ZagaraVoidCoopMassFrenzy";
        }
        else if (autoCD0D87DC_val == 1) {
            return "MassRoachDrop";
        }
        else {
        }
    }
    else if (auto7C92F9B8_val == "Zeratul") {
        auto2EADB45A_val = lp_pButtonIndex;
        if (auto2EADB45A_val == 0) {
            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier0A", c_techCountCompleteOnly) == 1)) {
                return "ZeratulSummonKarass";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier0B", c_techCountCompleteOnly) == 1)) {
                return "ZeratulSummonMohandar";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier0C", c_techCountCompleteOnly) == 1)) {
                return "ZeratulSummonDarkArchon";
            }

        }
        else if (auto2EADB45A_val == 1) {
            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1A", c_techCountCompleteOnly) == 1)) {
                return "ZeratulMapWideStasis";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1B", c_techCountCompleteOnly) == 1)) {
                return "ZeratulSuppressionCrystal";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1C", c_techCountCompleteOnly) == 1)) {
                return "ZeratulKhaydarinMonolith";
            }

        }
        else if (auto2EADB45A_val == 3) {
            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier3A", c_techCountCompleteOnly) == 1)) {
                return "ZeratulArtifactUpgradeTier3A";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier3B", c_techCountCompleteOnly) == 1)) {
                return "ZeratulArtifactUpgradeTier3B";
            }

        }
        else {
        }
    }
    else if (auto7C92F9B8_val == "Stetmann") {
        auto0E23D99B_val = lp_pButtonIndex;
        if (auto0E23D99B_val == 0) {
            return "PowerTowerStetmannLevel1";
        }
        else {
        }
    }
    else {
    }
    return null;
}

int libCOTF_gf_K2_GetKaraxPlayer () {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOOC_gf_ActiveCommanderForPlayer(1) == "ProtossKarax")) {
        return 1;
    }

    if ((libCOOC_gf_ActiveCommanderForPlayer(2) == "ProtossKarax")) {
        return 2;
    }

    return 0;
}

void libCOTF_gf_K2_MasteryNameFix (int lp_player) {
    // Variable Declarations
    string lv_indexMasteryUpgrade;
    int lv_masteryIndex;

    // Automatic Variable Declarations
    int auto71BF601B_ai;
    int auto71BF601B_ae;
    int auto71BF601B_ac;

    // Variable Initialization

    // Implementation
    auto71BF601B_ai = 0;
    auto71BF601B_ae = UserDataInstanceCount("MasteryUpgrades")+1;
    while (auto71BF601B_ai < auto71BF601B_ae) {
        auto71BF601B_ai = auto71BF601B_ai+1;
        auto71BF601B_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", auto71BF601B_ai), "Category", 1);
        if( libCOOC_gf_ActiveCommanderForPlayer(lp_player) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", auto71BF601B_ai),"Commander",1) ) {
            lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", auto71BF601B_ai);
            lv_masteryIndex = libCOOC_gf_CC_PlayerMasteryInternalIndex(lv_indexMasteryUpgrade);
            if ((lv_masteryIndex == 0)) {
                TextExpressionSetToken("Param/Expression/lib_COTF_E8A01CF0", "A", StringToText((lv_indexMasteryUpgrade)));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COTF_E8A01CF0"), false);
                continue;
            }

            libNtve_gf_SetDialogItemText(libCOUI_gv_cU_MasteryNameLabels[lv_masteryIndex], libCOTF_gf_K2_PlayerMasteryName(lv_indexMasteryUpgrade), PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemTooltip(libCOUI_gv_cU_MasteryNameLabels[lv_masteryIndex], libCOTF_gf_K2_PlayerMasteryTooltip(lv_indexMasteryUpgrade), PlayerGroupSingle(lp_player));
        }    
    }
}

text libCOTF_gf_K2_PlayerMasteryName (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOOC_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade) == null)) {
        return StringToText((lp_masteryUpgrade));
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogButton, CatalogFieldValueGet(c_gameCatalogTalent, libCOOC_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade), "Face", 1), "Name", 1));
}

text libCOTF_gf_K2_PlayerMasteryTooltip (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOOC_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade) == null)) {
        return StringToText((lp_masteryUpgrade));
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogButton, CatalogFieldValueGet(c_gameCatalogTalent, libCOOC_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade), "Face", 1), "Tooltip", 1));
}

void libCOTF_gf_PingPlay (int lp_pingType, int lp_player, point lp_pingLocation, int lp_gameUser, string lp_pingTargetType, point lp_pingTargetPosition, int lp_pingTargetOwner) {
    // Variable Declarations
    string lv_pingMinimapModel;
    string lv_pingEffect;
    soundlink lv_pingSound;
    fixed lv_pingScale;
    text lv_tooltipLabel;
    unit lv_pingUnit;
    playergroup lv_pingPlayers;
    int lv_indexPlayer;
    int lv_gameUserIndex;

    // Automatic Variable Declarations
    int auto780278B9_val;

    // Variable Initialization
    lv_pingSound = SoundLink("EditorDefaultSound", -1);
    lv_pingScale = 1.0;
    lv_pingPlayers = PlayerGroupEmpty();

    // Implementation
    lv_gameUserIndex = ((lp_gameUser)-999);
    if (((lv_gameUserIndex < 0) || (lv_gameUserIndex > 16))) {
        return ;
    }

    libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupAlliance(c_playerGroupAlly, lp_player), lv_pingPlayers);
    PlayerGroupAdd(lv_pingPlayers, lp_player);
    if ((TimerGetRemaining(libCOTF_gv_pingSuppressionTimer[lv_gameUserIndex]) > 0.0)) {
        return ;
    }

    if ((TimerGetRemaining(libCOTF_gv_pingLockoutTimer[lv_gameUserIndex]) > 0.0)) {
        GameUserDisplayMessage(lp_gameUser, c_messageAreaChat, StringExternal("Param/Value/lib_COTF_B890B91A"));
        return ;
    }

    libCOTF_gv_pingRecentCount[lv_gameUserIndex] += 1;
    TimerStart(libCOTF_gv_pingSuppressionTimer[lv_gameUserIndex], libCOTF_gv_c_PINGSUPPRESSIONTIME, false, c_timeGame);
    TimerStart(libCOTF_gv_pingResetTimer[lv_gameUserIndex], libCOTF_gv_c_PINGRESETTIME, false, c_timeGame);
    if ((libCOTF_gv_pingRecentCount[lv_gameUserIndex] >= libCOTF_gv_c_PINGMAXCOUNT)) {
        TimerStart(libCOTF_gv_pingLockoutTimer[lv_gameUserIndex], libCOTF_gv_c_PINGLOCKOUTTIME, false, c_timeGame);
    }

    auto780278B9_val = lp_pingType;
    if (auto780278B9_val == 0) {
        TextExpressionSetToken("Param/Expression/lib_COTF_9442C51A", "ID", IntToText(lp_player));
        TextExpressionSetToken("Param/Expression/lib_COTF_9442C51A", "PLAYER", GameUserName(lp_gameUser));
        UIDisplayMessage(lv_pingPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_COTF_9442C51A"));
        lv_pingSound = SoundLink("UI_PingAdvanced_Attack", -1);
        lv_pingMinimapModel = "PingPanelPingAttack";
        lv_pingEffect = "PingPanelBeaconAttack";
        lv_pingScale = 0.6;
        lv_tooltipLabel = StringExternal("Param/Value/lib_COTF_5EA1B738");
    }
    else if (auto780278B9_val == 3) {
        TextExpressionSetToken("Param/Expression/lib_COTF_866D9249", "ID", IntToText(lp_player));
        TextExpressionSetToken("Param/Expression/lib_COTF_866D9249", "PLAYER", GameUserName(lp_gameUser));
        UIDisplayMessage(lv_pingPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_COTF_866D9249"));
        lv_pingSound = SoundLink("UI_PingAdvanced_Defend", -1);
        lv_pingMinimapModel = "PingPanelPingDefend";
        lv_pingEffect = "PingPanelBeaconDefend";
        lv_pingScale = 0.6;
        lv_tooltipLabel = StringExternal("Param/Value/lib_COTF_5E180F99");
    }
    else if (auto780278B9_val == 2) {
        TextExpressionSetToken("Param/Expression/lib_COTF_B8848A50", "ID", IntToText(lp_player));
        TextExpressionSetToken("Param/Expression/lib_COTF_B8848A50", "PLAYER", GameUserName(lp_gameUser));
        UIDisplayMessage(lv_pingPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_COTF_B8848A50"));
        lv_pingSound = SoundLink("UI_PingAdvanced_Retreat", -1);
        lv_pingMinimapModel = "PingPanelPingRetreat";
        lv_pingEffect = "PingPanelBeaconRetreat";
        lv_pingScale = 0.6;
        lv_tooltipLabel = StringExternal("Param/Value/lib_COTF_899B9A18");
    }
    else if (auto780278B9_val == 1) {
        TextExpressionSetToken("Param/Expression/lib_COTF_C8E5E43B", "ID", IntToText(lp_player));
        TextExpressionSetToken("Param/Expression/lib_COTF_C8E5E43B", "PLAYER", GameUserName(lp_gameUser));
        UIDisplayMessage(lv_pingPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_COTF_C8E5E43B"));
        lv_pingSound = SoundLink("UI_PingAdvanced_OnMyWay", -1);
        lv_pingMinimapModel = "PingPanelPingOnMyWay";
        lv_pingEffect = "PingPanelBeaconOnMyWay";
        lv_pingScale = 0.6;
        lv_tooltipLabel = StringExternal("Param/Value/lib_COTF_B6C5C930");
    }
    else {
        if ((lp_pingTargetType != null)) {
            libCOTF_gf_PingPlayUnit(lp_pingTargetType, lp_pingTargetPosition, lp_pingTargetOwner, lp_player, lp_gameUser);
            return ;
        }

        lv_pingSound = SoundLink("UI_MiniMapPing", -1);
        lv_pingMinimapModel = "MinimapPing";
    }
    if ((lv_pingEffect != null)) {
        libCOTF_gf_PingBeaconAdd(lv_pingEffect, lp_pingLocation, lp_player);
    }

    libNtve_gf_CreatePingFacingAngle(lv_pingPlayers, lv_pingMinimapModel, lp_pingLocation, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false)), 5.0, 270.0);
    PingSetScale(PingLastCreated(), lv_pingScale);
    SoundPlayForPlayer(lv_pingSound, c_maxPlayers, lv_pingPlayers, 100.0, 0.0);
    if (((lv_tooltipLabel != null) == true)) {
        TextExpressionSetToken("Param/Expression/lib_COTF_3336B09E", "A", PlayerName(lp_player));
        TextExpressionSetToken("Param/Expression/lib_COTF_3336B09E", "B", lv_tooltipLabel);
        PingSetTooltip(PingLastCreated(), TextExpressionAssemble("Param/Expression/lib_COTF_3336B09E"));
    }
    else {
        PingSetTooltip(PingLastCreated(), PlayerName(lp_player));
    }
}

void libCOTF_gf_PingPlayUnit (string lp_pingTargetType, point lp_pingTargetPosition, int lp_pingTargetOwner, int lp_player, int lp_gameUser) {
    // Variable Declarations
    string lv_pingMinimapModel;
    string lv_pingEffect;
    soundlink lv_pingSound;
    fixed lv_pingScale;
    text lv_tooltipLabel;
    playergroup lv_pingPlayers;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pingSound = SoundLink("EditorDefaultSound", -1);
    lv_pingScale = 1.0;
    lv_pingPlayers = PlayerGroupEmpty();

    // Implementation
    libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupAlliance(c_playerGroupAlly, lp_player), lv_pingPlayers);
    PlayerGroupAdd(lv_pingPlayers, lp_player);
    if ((libNtve_gf_PlayerIsEnemy(lp_player, lp_pingTargetOwner, libNtve_ge_PlayerRelation_Enemy) == true)) {
        if ((EventPingUnitIsUnderConstruction() == true) && (VisIsVisibleForPlayer(lp_player, lp_pingTargetPosition) == false)) {
            TextExpressionSetToken("Param/Expression/lib_COTF_72EFC2A8", "ID", IntToText(lp_player));
            TextExpressionSetToken("Param/Expression/lib_COTF_72EFC2A8", "PLAYER", GameUserName(lp_gameUser));
            TextExpressionSetToken("Param/Expression/lib_COTF_72EFC2A8", "ENEMYID", IntToText(lp_pingTargetOwner));
            TextExpressionSetToken("Param/Expression/lib_COTF_72EFC2A8", "ENEMY", PlayerName(lp_pingTargetOwner));
            UIDisplayMessage(lv_pingPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_COTF_72EFC2A8"));
            lv_tooltipLabel = StringExternal("Param/Value/lib_COTF_A7F4DEAB");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_COTF_BE1D5400", "ID", IntToText(lp_player));
            TextExpressionSetToken("Param/Expression/lib_COTF_BE1D5400", "PLAYER", GameUserName(lp_gameUser));
            TextExpressionSetToken("Param/Expression/lib_COTF_BE1D5400", "ENEMYID", IntToText(lp_pingTargetOwner));
            TextExpressionSetToken("Param/Expression/lib_COTF_BE1D5400", "ENEMY", UnitTypeGetName(lp_pingTargetType));
            UIDisplayMessage(lv_pingPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_COTF_BE1D5400"));
            TextExpressionSetToken("Param/Expression/lib_COTF_75E1E65D", "A", UnitTypeGetName(lp_pingTargetType));
            lv_tooltipLabel = TextExpressionAssemble("Param/Expression/lib_COTF_75E1E65D");
        }
        lv_pingSound = SoundLink("UI_PingAdvanced_Attack", -1);
        lv_pingMinimapModel = "PingPanelPingAttack";
        lv_pingEffect = "PingPanelBeaconAttack";
        lv_pingScale = 0.6;
    }
    else if ((libNtve_gf_PlayerIsEnemy(lp_player, lp_pingTargetOwner, libNtve_ge_PlayerRelation_Ally) == true)) {
        TextExpressionSetToken("Param/Expression/lib_COTF_03FFFAD8", "ID", IntToText(lp_player));
        TextExpressionSetToken("Param/Expression/lib_COTF_03FFFAD8", "PLAYER", GameUserName(lp_gameUser));
        TextExpressionSetToken("Param/Expression/lib_COTF_03FFFAD8", "ENEMYID", IntToText(lp_pingTargetOwner));
        TextExpressionSetToken("Param/Expression/lib_COTF_03FFFAD8", "ENEMY", UnitTypeGetName(lp_pingTargetType));
        UIDisplayMessage(lv_pingPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_COTF_03FFFAD8"));
        lv_pingSound = SoundLink("UI_PingAdvanced_Defend", -1);
        lv_pingMinimapModel = "PingPanelPingDefend";
        lv_pingEffect = "PingPanelBeaconDefend";
        lv_pingScale = 0.6;
        TextExpressionSetToken("Param/Expression/lib_COTF_1EC63D7B", "A", UnitTypeGetName(lp_pingTargetType));
        lv_tooltipLabel = TextExpressionAssemble("Param/Expression/lib_COTF_1EC63D7B");
    }
    else if ((CatalogFieldValueGet(c_gameCatalogUnit, lp_pingTargetType, "ResourceState", c_playerAny) != "Unknown")) {
        TextExpressionSetToken("Param/Expression/lib_COTF_D353338D", "ID", IntToText(lp_player));
        TextExpressionSetToken("Param/Expression/lib_COTF_D353338D", "PLAYER", GameUserName(lp_gameUser));
        UIDisplayMessage(lv_pingPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_COTF_D353338D"));
        lv_pingSound = SoundLink("UI_PingAdvanced_OnMyWay", -1);
        lv_pingMinimapModel = "PingPanelPingOnMyWay";
        lv_pingEffect = "PingPanelBeaconOnMyWay";
        lv_pingScale = 0.6;
        TextExpressionSetToken("Param/Expression/lib_COTF_FB1737FB", "A", UnitTypeGetName(lp_pingTargetType));
        lv_tooltipLabel = TextExpressionAssemble("Param/Expression/lib_COTF_FB1737FB");
    }
    else if (true) {
        lv_pingSound = SoundLink("UI_MiniMapPing", -1);
        lv_pingMinimapModel = "MinimapPing";
    }
    if ((lv_pingEffect != null)) {
        libCOTF_gf_PingBeaconAdd(lv_pingEffect, lp_pingTargetPosition, lp_player);
    }

    libNtve_gf_CreatePingFacingAngle(lv_pingPlayers, lv_pingMinimapModel, lp_pingTargetPosition, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false)), 5.0, 270.0);
    PingSetScale(PingLastCreated(), lv_pingScale);
    SoundPlayForPlayer(lv_pingSound, c_maxPlayers, lv_pingPlayers, 100.0, 0.0);
    TextExpressionSetToken("Param/Expression/lib_COTF_F86C5AA9", "A", PlayerName(lp_player));
    TextExpressionSetToken("Param/Expression/lib_COTF_F86C5AA9", "B", lv_tooltipLabel);
    PingSetTooltip(PingLastCreated(), TextExpressionAssemble("Param/Expression/lib_COTF_F86C5AA9"));
}

void libCOTF_gf_PingBeaconAdd (string lp_beaconEffect, point lp_location, int lp_player) {
    // Variable Declarations
    int lv_beaconIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    PlayerCreateEffectPoint(lp_player, lp_beaconEffect, lp_location);
}

void libCOTF_gf_PingMinimapButtonUpdate () {
    // Variable Declarations
    playergroup lv_standardPlayers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_standardPlayers = PlayerGroupEmpty();

    // Implementation
    if ((libCOTF_gv_pingPanelMinimapButton == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/MinimapPanel/PingButton");
        libCOTF_gv_pingPanelMinimapButton = DialogControlLastCreated();
    }

    lv_standardPlayers = PlayerGroupAll();
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(libCOTF_gv_pingValidPlayers, lv_standardPlayers);
    if ((PlayerGroupCount(lv_standardPlayers) > 0)) {
        libNtve_gf_SetDialogItemTooltip(libCOTF_gv_pingPanelMinimapButton, StringExternal("UI/PingTip"), PlayerGroupAll());
    }

    if ((PlayerGroupCount(libCOTF_gv_pingValidPlayers) > 0)) {
        libNtve_gf_SetDialogItemTooltip(libCOTF_gv_pingPanelMinimapButton, StringExternal("UI/AdvancedPingTip"), PlayerGroupAll());
    }

}

void libCOTF_gf_EnableDisablePingPanel (bool lp_enableDisable, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_enableDisable == true)) {
        libNtve_gf_AddPlayerGroupToPlayerGroup(lp_players, libCOTF_gv_pingValidPlayers);
        PingSetPlayerPingsShown(lp_players, false);
        UISetFrameVisible(lp_players, c_syncFrameTypePingPanel, true);
        TriggerEnable(libCOTF_gt_PingUsed, true);
    }
    else {
        PingSetPlayerPingsShown(lp_players, true);
        libNtve_gf_RemovePlayerGroupFromPlayerGroup(lp_players, libCOTF_gv_pingValidPlayers);
        UISetFrameVisible(lp_players, c_syncFrameTypePingPanel, false);
        if ((PlayerGroupCount(libCOTF_gv_pingValidPlayers) == 0)) {
            TriggerEnable(libCOTF_gt_PingUsed, false);
        }

    }
    libCOTF_gf_PingMinimapButtonUpdate();
}

void libCOTF_gf_MeleeSurrender_AIWantToSurrender (int lp_player) {
    // Variable Declarations
    int lv_dialogPlayer;
    playergroup lv_dialogPlayerGroup;

    // Automatic Variable Declarations
    playergroup auto7FBFD693_g;

    // Variable Initialization
    lv_dialogPlayerGroup = PlayerGroupEmpty();

    // Implementation
    auto7FBFD693_g = PlayerGroupAll();
    lv_dialogPlayer = -1;
    while (true) {
        lv_dialogPlayer = PlayerGroupNextPlayer(auto7FBFD693_g, lv_dialogPlayer);
        if (lv_dialogPlayer < 0) { break; }
        if ((PlayerType(lv_dialogPlayer) == c_playerTypeUser) && (PlayerStatus(lv_dialogPlayer) == c_playerStatusActive)) {
            PlayerGroupAdd(lv_dialogPlayerGroup, lv_dialogPlayer);
        }

    }
    PlayerGroupAdd(libCOTF_gv_meleeSurrender_PlayersSurrendering, lp_player);
    DialogCreate(460, 200, c_anchorTopRight, 40, 80, false);
    libCOTF_gv_meleeSurrender_Dialog[lp_player] = DialogLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    libCOTF_gv_meleeSurrender_Title[lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (TextWithColor(PlayerName(lp_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false))) + StringExternal("Param/Value/lib_COTF_0BF8E2B2")), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 360, 50);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AISurrenderTitle", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 45);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/lib_COTF_F6D308BA")), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 360, 50);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AISurrenderText", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 85);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    libCOTF_gv_meleeSurrender_BtnYes[lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_COTF_31ECD63F"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 160, 45);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AISurrenderButton", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, -85, 35);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    libCOTF_gv_meleeSurrender_BtnNo[lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_COTF_A62336E2"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 160, 45);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AISurrenderButton", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 85, 35);
    DialogSetVisible(DialogLastCreated(), lv_dialogPlayerGroup, true);
    libCOTF_gf_MeleeSurrender_UpdateDialogs();
    libCOTF_gv_meleeSurrender_FlashingPlayer = lp_player;
    TriggerExecute(libCOTF_gt_MeleeSurrender_FlashDialog, true, false);
}

void libCOTF_gf_MeleeSurrender_UpdateDialogs () {
    // Variable Declarations
    int lv_y;
    int lv_humanPlayer;
    int lv_computerPlayer;

    // Automatic Variable Declarations
    playergroup auto15F2E8F2_g;
    playergroup autoCC5797F1_g;

    // Variable Initialization

    // Implementation
    auto15F2E8F2_g = PlayerGroupAll();
    lv_humanPlayer = -1;
    while (true) {
        lv_humanPlayer = PlayerGroupNextPlayer(auto15F2E8F2_g, lv_humanPlayer);
        if (lv_humanPlayer < 0) { break; }
        lv_y = 40;
        autoCC5797F1_g = libCOTF_gv_meleeSurrender_PlayersSurrendering;
        lv_computerPlayer = -1;
        while (true) {
            lv_computerPlayer = PlayerGroupNextPlayer(autoCC5797F1_g, lv_computerPlayer);
            if (lv_computerPlayer < 0) { break; }
            if ((PlayerGroupHasPlayer(libCOTF_gv_meleeSurrender_PlayersAnswered[lv_humanPlayer], lv_computerPlayer) == false)) {
                DialogSetPosition(libCOTF_gv_meleeSurrender_Dialog[lv_computerPlayer], c_anchorTopRight, 10, lv_y);
                lv_y += 200;
            }
            else {
                DialogSetVisible(libCOTF_gv_meleeSurrender_Dialog[lv_computerPlayer], PlayerGroupSingle(lv_humanPlayer), false);
            }
        }
    }
}

point libCOTF_gf_ValidatedPoint (point lp_point) {
    // Variable Declarations
    fixed lv_boundsWest;
    fixed lv_boundsEast;
    fixed lv_boundsNorth;
    fixed lv_boundsSouth;
    fixed lv_returnX;
    fixed lv_returnY;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_boundsWest = (PointGetX(RegionGetCenter(RegionPlayableMap())) - (libNtve_gf_WidthOfRegion(RegionPlayableMap()) / 2.0));
    lv_boundsEast = (PointGetX(RegionGetCenter(RegionPlayableMap())) + (libNtve_gf_WidthOfRegion(RegionPlayableMap()) / 2.0));
    lv_boundsNorth = (PointGetY(RegionGetCenter(RegionPlayableMap())) + (libNtve_gf_HeightOfRegion(RegionPlayableMap()) / 2.0));
    lv_boundsSouth = (PointGetY(RegionGetCenter(RegionPlayableMap())) - (libNtve_gf_HeightOfRegion(RegionPlayableMap()) / 2.0));
    if ((PointGetX(lp_point) < lv_boundsWest)) {
        lv_returnX = lv_boundsWest;
    }
    else {
        if ((PointGetX(lp_point) > lv_boundsEast)) {
            lv_returnX = lv_boundsEast;
        }
        else {
            lv_returnX = PointGetX(lp_point);
        }
    }
    if ((PointGetY(lp_point) < lv_boundsSouth)) {
        lv_returnY = lv_boundsSouth;
    }
    else {
        if ((PointGetY(lp_point) > lv_boundsNorth)) {
            lv_returnY = lv_boundsNorth;
        }
        else {
            lv_returnY = PointGetY(lp_point);
        }
    }
    return Point(lv_returnX, lv_returnY);
}

void libCOTF_gf_PlayAnnouncerNumberSound (int lp_number, playergroup lp_players, fixed lp_volume) {
    int init_i;

    // Variable Declarations
    soundlink[20] lv_soundReferenceArray119;
    soundlink[10] lv_soundReferenceArrayTens;
    int lv_i;
    string lv_soundIDString;
    int lv_numberLength;
    int lv_positionFromRight;
    int lv_placeValue;
    int lv_onesPlace;
    int lv_tensPlace;
    int lv_numberOfSoundsToPlay;
    soundlink[15] lv_soundsToPlay;

    // Automatic Variable Declarations
    const int autoE25E7BD0_ae = 19;
    const int autoE25E7BD0_ai = 1;
    const int auto4F399A6E_ae = 9;
    const int auto4F399A6E_ai = 1;
    int autoA122A983_ae;
    const int autoA122A983_ai = 1;
    int auto046DACC5_ae;
    const int auto046DACC5_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 19; init_i += 1) {
        lv_soundReferenceArray119[init_i] = SoundLink("EditorDefaultSound", -1);
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        lv_soundReferenceArrayTens[init_i] = SoundLink("EditorDefaultSound", -1);
    }
    lv_soundIDString = "";
    for (init_i = 0; init_i <= 14; init_i += 1) {
        lv_soundsToPlay[init_i] = SoundLink("EditorDefaultSound", -1);
    }

    // Implementation
    if (((lp_number < 0) || (lp_number > 999999999))) {
        return ;
    }

    lv_i = 1;
    for ( ; ( (autoE25E7BD0_ai >= 0 && lv_i <= autoE25E7BD0_ae) || (autoE25E7BD0_ai < 0 && lv_i >= autoE25E7BD0_ae) ) ; lv_i += autoE25E7BD0_ai ) {
        lv_soundIDString = ("ModUtilityVoiceModUtilityVoice000" + IntToString((lv_i + 15)));
        lv_soundReferenceArray119[lv_i] = SoundLink(lv_soundIDString, 0);
    }
    lv_i = 2;
    for ( ; ( (auto4F399A6E_ai >= 0 && lv_i <= auto4F399A6E_ae) || (auto4F399A6E_ai < 0 && lv_i >= auto4F399A6E_ae) ) ; lv_i += auto4F399A6E_ai ) {
        lv_soundIDString = ("ModUtilityVoiceModUtilityVoice000" + IntToString((lv_i + 33)));
        lv_soundReferenceArrayTens[lv_i] = SoundLink(lv_soundIDString, 0);
    }
    if ((lp_number == 0)) {
        SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00015", 0), lp_players, lp_volume, 0.0);
        return ;
    }

    if ((lp_number < 10)) {
        SoundPlay(lv_soundReferenceArray119[lp_number], lp_players, lp_volume, 0.0);
        return ;
    }

    lv_numberLength = StringLength(IntToString(lp_number));
    autoA122A983_ae = lv_numberLength;
    lv_i = 1;
    for ( ; ( (autoA122A983_ai >= 0 && lv_i <= autoA122A983_ae) || (autoA122A983_ai < 0 && lv_i >= autoA122A983_ae) ) ; lv_i += autoA122A983_ai ) {
        lv_positionFromRight = ((lv_numberLength + 1) - lv_i);
        if ((ModI(lv_positionFromRight, 3) == 0)) {
            lv_placeValue = StringToInt(StringSub(IntToString(lp_number), lv_i, lv_i));
            if ((lv_placeValue != 0)) {
                lv_numberOfSoundsToPlay += 1;
                lv_soundsToPlay[lv_numberOfSoundsToPlay] = lv_soundReferenceArray119[lv_placeValue];
                lv_numberOfSoundsToPlay += 1;
                lv_soundsToPlay[lv_numberOfSoundsToPlay] = SoundLink("ModUtilityVoiceModUtilityVoice00043", -1);
            }

        }

        if ((ModI((lv_positionFromRight + 1), 3) == 0)) {
            lv_placeValue = StringToInt(StringSub(IntToString(lp_number), lv_i, (lv_i + 1)));
            if ((lv_placeValue > 0)) {
                if ((lv_placeValue < 20)) {
                    lv_numberOfSoundsToPlay += 1;
                    lv_soundsToPlay[lv_numberOfSoundsToPlay] = lv_soundReferenceArray119[lv_placeValue];
                }
                else {
                    lv_tensPlace = StringToInt(StringSub(IntToString(lv_placeValue), 1, 1));
                    lv_onesPlace = StringToInt(StringSub(IntToString(lv_placeValue), 2, 2));
                    lv_numberOfSoundsToPlay += 1;
                    lv_soundsToPlay[lv_numberOfSoundsToPlay] = lv_soundReferenceArrayTens[lv_tensPlace];
                    lv_numberOfSoundsToPlay += 1;
                    lv_soundsToPlay[lv_numberOfSoundsToPlay] = lv_soundReferenceArray119[lv_onesPlace];
                }
            }

        }

        if ((lv_positionFromRight == 4)) {
            lv_placeValue = StringToInt(StringSub(IntToString(lp_number), lv_i, lv_i));
            if ((lv_numberLength == 4)) {
                lv_numberOfSoundsToPlay += 1;
                lv_soundsToPlay[lv_numberOfSoundsToPlay] = lv_soundReferenceArray119[lv_placeValue];
            }

            if ((lv_numberLength == 7)) {
                lv_placeValue = StringToInt(StringSub(IntToString(lp_number), 2, 4));
                if ((lv_placeValue > 0)) {
                    lv_numberOfSoundsToPlay += 1;
                    lv_soundsToPlay[lv_numberOfSoundsToPlay] = SoundLink("ModUtilityVoiceModUtilityVoice00044", -1);
                }

            }
            else {
                lv_numberOfSoundsToPlay += 1;
                lv_soundsToPlay[lv_numberOfSoundsToPlay] = SoundLink("ModUtilityVoiceModUtilityVoice00044", -1);
            }
        }

        if ((lv_positionFromRight == 7)) {
            if ((lv_numberLength == 7)) {
                lv_placeValue = StringToInt(StringSub(IntToString(lp_number), lv_i, lv_i));
                lv_numberOfSoundsToPlay += 1;
                lv_soundsToPlay[lv_numberOfSoundsToPlay] = lv_soundReferenceArray119[lv_placeValue];
            }

            lv_numberOfSoundsToPlay += 1;
            lv_soundsToPlay[lv_numberOfSoundsToPlay] = SoundLink("ModUtilityVoiceModUtilityVoice00045", -1);
        }

    }
    auto046DACC5_ae = lv_numberOfSoundsToPlay;
    lv_i = 1;
    for ( ; ( (auto046DACC5_ai >= 0 && lv_i <= auto046DACC5_ae) || (auto046DACC5_ai < 0 && lv_i >= auto046DACC5_ae) ) ; lv_i += auto046DACC5_ai ) {
        SoundPlay(lv_soundsToPlay[lv_i], lp_players, lp_volume, 0.0);
        SoundWait(SoundLastPlayed(), 0.25, c_soundOffsetEnd);
    }
}

void libCOTF_gf_PlayTransmissionCueSound (playergroup lp_playerGroup) {
    // Automatic Variable Declarations
    // Implementation
    SoundPlay(SoundLink("Dialogue_TransmissionStart", 0), lp_playerGroup, 100.0, 0.0);
    Wait(0.25, c_timeReal);
}

void libCOTF_gf_SetAllSoundChannelVolumesStandardTiming (int lp_mode, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_mode == libNtve_ge_VolumeChannelMode_Game)) {
        libNtve_gf_SetAllSoundChannelVolumes(lp_mode, lp_players, 2.5);
        SoundChannelSetVolume(lp_players, c_soundCategoryVoice, 100.0, 0.5);
    }
    else {
        libNtve_gf_SetAllSoundChannelVolumes(lp_mode, lp_players, 1.0);
        SoundChannelSetVolume(lp_players, c_soundCategoryVoice, 0.0, 0.25);
    }
}

void libCOTF_gf_OrderWorkerstoGatherNearbyResources (region lp_region, int lp_player) {
    // Variable Declarations
    unit lv_indexWorker;
    unitgroup lv_resourceGroup;
    unit lv_indexResource;

    // Automatic Variable Declarations
    unitgroup auto35953A7D_g;
    int auto35953A7D_u;
    unitgroup auto90B8EB3B_g;
    int auto90B8EB3B_u;

    // Variable Initialization
    lv_resourceGroup = UnitGroupEmpty();

    // Implementation
    auto35953A7D_g = UnitGroup(null, lp_player, lp_region, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto35953A7D_u = UnitGroupCount(auto35953A7D_g, c_unitCountAll);
    for (;; auto35953A7D_u -= 1) {
        lv_indexWorker = UnitGroupUnitFromEnd(auto35953A7D_g, auto35953A7D_u);
        if (lv_indexWorker == null) { break; }
        UnitGroupClear(lv_resourceGroup);
        auto90B8EB3B_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_indexWorker), 6.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto90B8EB3B_u = UnitGroupCount(auto90B8EB3B_g, c_unitCountAll);
        for (;; auto90B8EB3B_u -= 1) {
            lv_indexResource = UnitGroupUnitFromEnd(auto90B8EB3B_g, auto90B8EB3B_u);
            if (lv_indexResource == null) { break; }
            if (((UnitGetOwner(lv_indexResource) == 0) || (UnitGetOwner(lv_indexResource) == lp_player))) {
                UnitGroupAdd(lv_resourceGroup, lv_indexResource);
            }

        }
        if ((UnitGroupCount(lv_resourceGroup, c_unitCountAlive) > 0)) {
            UnitIssueOrder(lv_indexWorker, OrderTargetingUnit(null, UnitGroupClosestToPoint(lv_resourceGroup, UnitGetPosition(lv_indexWorker))), c_orderQueueReplace);
        }

    }
}

void libCOTF_gf_OrderTransporttoUnloadAllthenDespawn (unit lp_transport, point lp_targetPoint, point lp_despawnPoint) {
    // Automatic Variable Declarations
    // Implementation
    libCOTF_gv_transportUnit_Param = lp_transport;
    libCOTF_gv_transportTargetPoint_Param = lp_targetPoint;
    libCOTF_gv_transportDespawnPoint_Param = lp_despawnPoint;
    TriggerExecute(libCOTF_gt_TransportController, true, false);
}

void libCOTF_gf_AutoRevealRegion (region lp_visibilityRegion, region lp_triggeringRegion, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOTF_gv_autoRevealers.lv_count >= 64)) {
        return ;
    }

    VisRevealerCreate(lp_player, lp_visibilityRegion);
    libCOTF_gv_autoRevealers.lv_revealers[libCOTF_gv_autoRevealers.lv_count] = VisRevealerLastCreated();
    VisRevealerEnable(VisRevealerLastCreated(), false);
    libCOTF_gv_autoRevealers.lv_triggeringRegions[libCOTF_gv_autoRevealers.lv_count] = lp_triggeringRegion;
    libCOTF_gv_autoRevealers.lv_triggeringPlayers[libCOTF_gv_autoRevealers.lv_count] = lp_player;
    libCOTF_gv_autoRevealers.lv_count += 1;
    TriggerExecute(libCOTF_gt_AutoRevealRegionController, true, false);
}

string libCOTF_gf__UnitDataName (int lp_type, unit lp_unit, int lp_index) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    int autoB1394AB3_val;

    // Variable Initialization
    lv_name = "";

    // Implementation
    autoB1394AB3_val = lp_type;
    if (autoB1394AB3_val == libCOTF_ge__UnitDataType_Actor) {
        lv_name = "UDACTOR_";
    }
    else if (autoB1394AB3_val == libCOTF_ge__UnitDataType_TextTag) {
        lv_name = "UDTEXTTAG_";
    }
    else if (autoB1394AB3_val == libCOTF_ge__UnitDataType_Point) {
        lv_name = "UDPOINT_";
    }
    else if (autoB1394AB3_val == libCOTF_ge__UnitDataType_Ping) {
        lv_name = "UDPING_";
    }
    else {
    }
    lv_name = (lv_name + IntToString(UnitGetTag(lp_unit)) + "_" + IntToString(lp_index));
    return lv_name;
}

void libCOTF_gf_StoreActorForUnit (unit lp_unit, int lp_index, actor lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetActor(true, libCOTF_gf__UnitDataName(libCOTF_ge__UnitDataType_Actor, lp_unit, lp_index), lp_actor);
}

actor libCOTF_gf_ActorForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetActor(true, libCOTF_gf__UnitDataName(libCOTF_ge__UnitDataType_Actor, lp_unit, lp_index));
}

void libCOTF_gf_StoreTextTagForUnit (unit lp_unit, int lp_index, int lp_textTag) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SaveDataTableValueTextTag(true, libCOTF_gf__UnitDataName(libCOTF_ge__UnitDataType_TextTag, lp_unit, lp_index), lp_textTag);
}

int libCOTF_gf_TextTagForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libNtve_gf_ValueFromDataTableTextTag(true, libCOTF_gf__UnitDataName(libCOTF_ge__UnitDataType_TextTag, lp_unit, lp_index));
}

void libCOTF_gf_StorePointForUnit (unit lp_unit, int lp_index, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetPoint(true, libCOTF_gf__UnitDataName(libCOTF_ge__UnitDataType_Point, lp_unit, lp_index), lp_point);
}

point libCOTF_gf_PointStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(true, libCOTF_gf__UnitDataName(libCOTF_ge__UnitDataType_Point, lp_unit, lp_index));
}

void libCOTF_gf_StorePingForUnit (unit lp_unit, int lp_index, int lp_ping) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetPing(true, libCOTF_gf__UnitDataName(libCOTF_ge__UnitDataType_Ping, lp_unit, lp_index), lp_ping);
}

int libCOTF_gf_PingStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPing(true, libCOTF_gf__UnitDataName(libCOTF_ge__UnitDataType_Ping, lp_unit, lp_index));
}

trigger auto_libCOTF_gf_PlaySoundLinkasMusic_Trigger = null;
soundlink auto_libCOTF_gf_PlaySoundLinkasMusic_lp_soundLink;
bool auto_libCOTF_gf_PlaySoundLinkasMusic_lp_loopForever;
bool auto_libCOTF_gf_PlaySoundLinkasMusic_lp_unpauseSountrackAfter;

void libCOTF_gf_PlaySoundLinkasMusic (soundlink lp_soundLink, bool lp_loopForever, bool lp_unpauseSountrackAfter) {
    auto_libCOTF_gf_PlaySoundLinkasMusic_lp_soundLink = lp_soundLink;
    auto_libCOTF_gf_PlaySoundLinkasMusic_lp_loopForever = lp_loopForever;
    auto_libCOTF_gf_PlaySoundLinkasMusic_lp_unpauseSountrackAfter = lp_unpauseSountrackAfter;

    if (auto_libCOTF_gf_PlaySoundLinkasMusic_Trigger == null) {
        auto_libCOTF_gf_PlaySoundLinkasMusic_Trigger = TriggerCreate("auto_libCOTF_gf_PlaySoundLinkasMusic_TriggerFunc");
    }

    TriggerExecute(auto_libCOTF_gf_PlaySoundLinkasMusic_Trigger, false, false);
}

bool auto_libCOTF_gf_PlaySoundLinkasMusic_TriggerFunc (bool testConds, bool runActions) {
    soundlink lp_soundLink = auto_libCOTF_gf_PlaySoundLinkasMusic_lp_soundLink;
    bool lp_loopForever = auto_libCOTF_gf_PlaySoundLinkasMusic_lp_loopForever;
    bool lp_unpauseSountrackAfter = auto_libCOTF_gf_PlaySoundLinkasMusic_lp_unpauseSountrackAfter;

    // Automatic Variable Declarations
    // Implementation
    libCOTF_gv_soundLinkAsMusicCurrentlyPlaying += 1;
    libCOTF_gv_soundLinkAsMusicLoopForever = lp_loopForever;
    SoundStop(libCOTF_gv_soundLinkAsMusic, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    SoundPlay(lp_soundLink, PlayerGroupAll(), 100.0, 0.0);
    libCOTF_gv_soundLinkAsMusic = SoundLastPlayed();
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    libCOTF_gv_soundLinkAsMusicCurrentlyPlaying -= 1;
    if ((libCOTF_gv_soundLinkAsMusicCurrentlyPlaying == 0)) {
        if ((libCOTF_gv_soundLinkAsMusicLoopForever == true)) {
            libCOTF_gf_PlaySoundLinkasMusic(lp_soundLink, true, true);
        }
        else {
            if ((lp_unpauseSountrackAfter == true)) {
                SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
            }

        }
    }

    return true;
}

void libCOTF_gf_StopSoundLinkCurrentlyPlayingasMusic () {
    // Automatic Variable Declarations
    // Implementation
    libCOTF_gv_soundLinkAsMusicLoopForever = false;
    SoundStop(libCOTF_gv_soundLinkAsMusic, true);
}

void libCOTF_gf_ClearAlliance (int lp_sourcePlayer, int lp_targetPlayer) {
    // Automatic Variable Declarations
    // Implementation
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdChat, lp_targetPlayer, false);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdSeekHelp, lp_targetPlayer, false);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdGiveHelp, lp_targetPlayer, false);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer, false);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPushable, lp_targetPlayer, false);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdSpend, lp_targetPlayer, false);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdTrade, lp_targetPlayer, false);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdControl, lp_targetPlayer, false);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdDefeat, lp_targetPlayer, false);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, false);
}

void libCOTF_gf_MakeAlly (int lp_sourcePlayer, int lp_targetPlayer) {
    // Automatic Variable Declarations
    // Implementation
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdChat, lp_targetPlayer, true);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdSeekHelp, lp_targetPlayer, true);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdGiveHelp, lp_targetPlayer, true);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer, true);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdTrade, lp_targetPlayer, true);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdDefeat, lp_targetPlayer, true);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: UT_Debug
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Debug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "effect")) {
        TriggerEnable(libCOTF_gt_EffectUsed, true);
    }
    else if ((StringWord(EventChatMessage(false), 2) == "behavior")) {
        TriggerEnable(libCOTF_gt_BehaviorChanged, true);
    }
    else if ((StringWord(EventChatMessage(false), 2) == "upgrade")) {
        TriggerEnable(libCOTF_gt_UpgradeChanged, true);
    }
    else if ((StringWord(EventChatMessage(false), 2) == "ability")) {
        TriggerEnable(libCOTF_gt_AbilityUsed, true);
    }
    else if ((StringWord(EventChatMessage(false), 2) == "unit")) {
        TriggerEnable(libCOTF_gt_UnitCreated, true);
        TriggerEnable(libCOTF_gt_UnitDied, true);
        TriggerEnable(libCOTF_gt_UnitRevived, true);
    }
    else if ((StringWord(EventChatMessage(false), 2) == "stop")) {
        TriggerEnable(libCOTF_gt_UnitCreated, false);
        TriggerEnable(libCOTF_gt_UnitDied, false);
        TriggerEnable(libCOTF_gt_UnitRevived, false);
        TriggerEnable(libCOTF_gt_EffectUsed, false);
        TriggerEnable(libCOTF_gt_BehaviorChanged, false);
        TriggerEnable(libCOTF_gt_UpgradeChanged, false);
        TriggerEnable(libCOTF_gt_AbilityUsed, false);
    }
    else if (true) {
        TriggerEnable(libCOTF_gt_UnitCreated, true);
        TriggerEnable(libCOTF_gt_UnitDied, true);
        TriggerEnable(libCOTF_gt_UnitRevived, true);
        TriggerEnable(libCOTF_gt_EffectUsed, true);
        TriggerEnable(libCOTF_gt_BehaviorChanged, true);
        TriggerEnable(libCOTF_gt_UpgradeChanged, true);
        TriggerEnable(libCOTF_gt_AbilityUsed, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Debug_Init () {
    libCOTF_gt_UT_Debug = TriggerCreate("libCOTF_gt_UT_Debug_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Debug, c_playerAny, "-debug", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_EnableDev Commands
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_EnableDevCommands_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOTF_gv_uT_DevCommands[EventPlayer()] = libCOTF_ge_UT_DevCommandTypes_Gamealtering;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_EnableDevCommands_Init () {
    libCOTF_gt_UT_EnableDevCommands = TriggerCreate("libCOTF_gt_UT_EnableDevCommands_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_EnableDevCommands, c_playerAny, "-dc", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DisableDev Commands for ally
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_DisableDevCommandsforally_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOTF_gv_uT_DevCommands[2] = libCOTF_ge_UT_DevCommandTypes_No;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_DisableDevCommandsforally_Init () {
    libCOTF_gt_UT_DisableDevCommandsforally = TriggerCreate("libCOTF_gt_UT_DisableDevCommandsforally_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_DisableDevCommandsforally, c_playerAny, "-jail", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_NukeTest
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_NukeTest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnLocation;
    region lv_spawnRegion;
    int lv_safetyInt;
    fixed lv_waitTime;

    // Automatic Variable Declarations
    const int auto7FE0B35F_n = 20000;
    int auto7FE0B35F_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_spawnRegion = RegionPlayableMap();
    if ((GameIsOnline() == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_475C8EDA"));
    }

    for (auto7FE0B35F_i = 1; auto7FE0B35F_i <= auto7FE0B35F_n; auto7FE0B35F_i += 1) {
        lv_spawnLocation = RegionRandomPoint(lv_spawnRegion);
        if (((PathingType(lv_spawnLocation) != c_pathingGround) || (RegionContainsPoint(libCOMU_gf_CT_MutatorSafetyZone(), lv_spawnLocation) == true) || ((UnitCount(null, 1, RegionCircle(lv_spawnLocation, 50.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount(null, 2, RegionCircle(lv_spawnLocation, 50.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0)))) {
        }
        else {
            PlayerCreateEffectPoint(3, "NukeTestDamageCP", lv_spawnLocation);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_NukeTest_Init () {
    libCOTF_gt_UT_NukeTest = TriggerCreate("libCOTF_gt_UT_NukeTest_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_NukeTest, c_playerAny, "-nuketest", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ability Used
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_AbilityUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == 1))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("move", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("attack", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("stop", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("SCVHarvest", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("SCVHarvest", 1)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("DroneHarvest", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("DroneHarvest", 1)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("ProbeHarvest", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("ProbeHarvest", 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_COTF_332AD3A1", "A", StringToText((AbilityCommandGetAbility(EventUnitAbility()))));
    TextExpressionSetToken("Param/Expression/lib_COTF_332AD3A1", "B", StringToText(libCOTF_gf_UT_StageToString(EventUnitAbilityStage())));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COTF_332AD3A1"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_AbilityUsed_Init () {
    libCOTF_gt_AbilityUsed = TriggerCreate("libCOTF_gt_AbilityUsed_Func");
    TriggerEnable(libCOTF_gt_AbilityUsed, false);
    TriggerAddEventUnitAbility(libCOTF_gt_AbilityUsed, null, null, c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Created
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UnitCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitCreatedUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_COTF_B918A18E", "C", StringToText((UnitGetType(EventUnitCreatedUnit()))));
    TextExpressionSetToken("Param/Expression/lib_COTF_B918A18E", "D", IntToText(UnitGetOwner(EventUnitCreatedUnit())));
    TextExpressionSetToken("Param/Expression/lib_COTF_B918A18E", "A", FixedToText(PointGetX(UnitGetPosition(EventUnitCreatedUnit())), 1));
    TextExpressionSetToken("Param/Expression/lib_COTF_B918A18E", "B", FixedToText(PointGetY(UnitGetPosition(EventUnitCreatedUnit())), 1));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COTF_B918A18E"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UnitCreated_Init () {
    libCOTF_gt_UnitCreated = TriggerCreate("libCOTF_gt_UnitCreated_Func");
    TriggerEnable(libCOTF_gt_UnitCreated, false);
    TriggerAddEventUnitCreated(libCOTF_gt_UnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Died
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UnitDied_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_COTF_9D4DB2D9", "C", StringToText((UnitGetType(EventUnit()))));
    TextExpressionSetToken("Param/Expression/lib_COTF_9D4DB2D9", "D", IntToText(UnitGetOwner(EventUnit())));
    TextExpressionSetToken("Param/Expression/lib_COTF_9D4DB2D9", "A", FixedToText(PointGetX(UnitGetPosition(EventUnit())), 1));
    TextExpressionSetToken("Param/Expression/lib_COTF_9D4DB2D9", "B", FixedToText(PointGetY(UnitGetPosition(EventUnit())), 1));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COTF_9D4DB2D9"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UnitDied_Init () {
    libCOTF_gt_UnitDied = TriggerCreate("libCOTF_gt_UnitDied_Func");
    TriggerEnable(libCOTF_gt_UnitDied, false);
    TriggerAddEventUnitDied(libCOTF_gt_UnitDied, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Revived
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UnitRevived_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_COTF_182ED8D7", "C", StringToText((UnitGetType(EventUnit()))));
    TextExpressionSetToken("Param/Expression/lib_COTF_182ED8D7", "D", IntToText(UnitGetOwner(EventUnit())));
    TextExpressionSetToken("Param/Expression/lib_COTF_182ED8D7", "A", FixedToText(PointGetX(UnitGetPosition(EventUnit())), 1));
    TextExpressionSetToken("Param/Expression/lib_COTF_182ED8D7", "B", FixedToText(PointGetY(UnitGetPosition(EventUnit())), 1));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COTF_182ED8D7"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UnitRevived_Init () {
    libCOTF_gt_UnitRevived = TriggerCreate("libCOTF_gt_UnitRevived_Func");
    TriggerEnable(libCOTF_gt_UnitRevived, false);
    TriggerAddEventUnitRevive(libCOTF_gt_UnitRevived, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect Used
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_EffectUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsedAmountFixed(c_effectAmountDamaged, false) > 0.0)) {
        TextExpressionSetToken("Param/Expression/lib_COTF_68C992BD", "A", StringToText((EventPlayerEffectUsed())));
        TextExpressionSetToken("Param/Expression/lib_COTF_68C992BD", "B", FixedToText(EventPlayerEffectUsedAmountFixed(c_effectAmountDamaged, false), 1));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COTF_68C992BD"), true);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_COTF_6DE1BABD", "A", StringToText((EventPlayerEffectUsed())));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COTF_6DE1BABD"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_EffectUsed_Init () {
    libCOTF_gt_EffectUsed = TriggerCreate("libCOTF_gt_EffectUsed_Func");
    TriggerEnable(libCOTF_gt_EffectUsed, false);
    TriggerAddEventPlayerEffectUsed(libCOTF_gt_EffectUsed, 1, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Behavior Changed
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_BehaviorChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_vChange;

    // Automatic Variable Declarations
    int auto649B598C_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((EventUnitBehavior() != "CarryMineralFieldMinerals"))) {
            return false;
        }

        if (!((EventUnitBehavior() != "CarryHarvestableVespeneGeyserGas"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto649B598C_val = EventUnitBehaviorChange();
    if (auto649B598C_val == c_unitBehaviorChangeRefresh) {
        lv_vChange = StringExternal("Param/Value/lib_COTF_19C71C7E");
    }
    else if (auto649B598C_val == c_unitBehaviorChangeIncrease) {
        lv_vChange = StringExternal("Param/Value/lib_COTF_8524746C");
    }
    else if (auto649B598C_val == c_unitBehaviorChangeDestroy) {
        lv_vChange = StringExternal("Param/Value/lib_COTF_21542B84");
    }
    else if (auto649B598C_val == c_unitBehaviorChangeDecrease) {
        lv_vChange = StringExternal("Param/Value/lib_COTF_81FBD101");
    }
    else if (auto649B598C_val == c_unitBehaviorChangeDeactivate) {
        lv_vChange = StringExternal("Param/Value/lib_COTF_48F26769");
    }
    else if (auto649B598C_val == c_unitBehaviorChangeCreate) {
        lv_vChange = StringExternal("Param/Value/lib_COTF_F8E0F862");
    }
    else if (auto649B598C_val == c_unitBehaviorChangeAny) {
        lv_vChange = StringExternal("Param/Value/lib_COTF_FECB754A");
    }
    else if (auto649B598C_val == c_unitBehaviorChangeActivate) {
        lv_vChange = StringExternal("Param/Value/lib_COTF_C4CCE502");
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/lib_COTF_F3B87DC4", "A", lv_vChange);
    TextExpressionSetToken("Param/Expression/lib_COTF_F3B87DC4", "B", StringToText((EventUnitBehavior())));
    TextExpressionSetToken("Param/Expression/lib_COTF_F3B87DC4", "C", StringToText((UnitGetType(EventUnit()))));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COTF_F3B87DC4"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_BehaviorChanged_Init () {
    libCOTF_gt_BehaviorChanged = TriggerCreate("libCOTF_gt_BehaviorChanged_Func");
    TriggerEnable(libCOTF_gt_BehaviorChanged, false);
    TriggerAddEventUnitBehaviorChange(libCOTF_gt_BehaviorChanged, null, null, c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Changed
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UpgradeChanged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_COTF_C59A88BD", "A", StringToText(IntToString(EventUpgradeLevelDelta())));
    TextExpressionSetToken("Param/Expression/lib_COTF_C59A88BD", "B", StringToText((EventUpgradeName())));
    TextExpressionSetToken("Param/Expression/lib_COTF_C59A88BD", "C", IntToText(EventPlayer()));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COTF_C59A88BD"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UpgradeChanged_Init () {
    libCOTF_gt_UpgradeChanged = TriggerCreate("libCOTF_gt_UpgradeChanged_Func");
    TriggerEnable(libCOTF_gt_UpgradeChanged, false);
    TriggerAddEventUpgradeLevelChanged(libCOTF_gt_UpgradeChanged, 1);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect Dealing Damage
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_EffectDealingDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_COTF_94A56A9E", "A", StringToText((EventUnitDamageEffect())));
    TextExpressionSetToken("Param/Expression/lib_COTF_94A56A9E", "B", FixedToText(EventUnitDamageAttempted(), 1));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_94A56A9E"));
    TextExpressionSetToken("Param/Expression/lib_COTF_ED946282", "A", libNtve_gf_ConvertBooleanToText(libNtve_gf_UnitIsHidden(EventUnit())));
    TextExpressionSetToken("Param/Expression/lib_COTF_ED946282", "B", libNtve_gf_ConvertBooleanToText(libNtve_gf_UnitIsInvulnerable(EventUnit())));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_ED946282"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_EffectDealingDamage_Init () {
    libCOTF_gt_EffectDealingDamage = TriggerCreate("libCOTF_gt_EffectDealingDamage_Func");
    TriggerEnable(libCOTF_gt_EffectDealingDamage, false);
    TriggerAddEventUnitDamaged(libCOTF_gt_EffectDealingDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Init
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Init_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vCommander;

    // Automatic Variable Declarations
    int auto76CAB6D1_ae;
    int auto76CAB6D1_var;
    const int auto1B5B04F8_ae = 2;
    int auto1B5B04F8_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugWindowOpen(true);
    TechTreeUpgradeAddLevel(1, "Player0102", 1);
    TechTreeUpgradeAddLevel(2, "Player0102", 1);
    if ((UserDataGetInt("MMData", "Create command/mastery buttons", "Value", 1) == 1)) {
    }

    Wait(0.0, c_timeGame);
    TriggerExecute(libCOTF_gt_UT_InfoSave, true, false);
    PlayerGroupAdd(libCOTF_gv_uT_DL_LoggingPlayers, 1);
    PlayerGroupAdd(libCOTF_gv_uT_DL_LoggingPlayers, 2);
    TriggerEnable(libCOTF_gt_UT_DL_DamageLogging, true);
    TriggerEnable(libCOTF_gt_UT_DL_HealLogging, true);
    if ((PlayerStatus(1) == c_playerStatusActive) && (PlayerStatus(2) == c_playerStatusActive)) {
    }
    else {
        libCOUI_gv_cU_MinimapAllyViewEnabled = false;
        TriggerEnable(libCOUI_gt_CU_MinimapAllyViewUpdateP1, false);
        TriggerEnable(libCOUI_gt_CU_MinimapAllyViewUpdateP2, false);
        TriggerEnable(libCOUI_gt_CU_MinimapAllyViewCamera, false);
    }
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    auto76CAB6D1_ae = (UserDataInstanceCount("PlayerCommanders") + 1);
    auto76CAB6D1_var = 0;
    for ( ; auto76CAB6D1_var <= auto76CAB6D1_ae; auto76CAB6D1_var += 1 ) {
        lv_vCommander = UserDataInstance("PlayerCommanders", auto76CAB6D1_var);
        libCOOC_gf_CC_PlayerExperienceSetToLevel(1, 15, lv_vCommander);
        libCOOC_gf_CC_UpdateTechStates(1);
        libCOOC_gf_CC_PlayerExperienceSetToLevel(2, 15, lv_vCommander);
        libCOOC_gf_CC_UpdateTechStates(2);
    }
    auto1B5B04F8_var = 1;
    for ( ; auto1B5B04F8_var <= auto1B5B04F8_ae; auto1B5B04F8_var += 1 ) {
        libCOUI_gf_CU_CommanderUpdate(auto1B5B04F8_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Init_Init () {
    libCOTF_gt_UT_Init = TriggerCreate("libCOTF_gt_UT_Init_Func");
    TriggerAddEventMapInit(libCOTF_gt_UT_Init);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_AfterStart
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_AfterStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_cPlayer = 2;
    string lv_button;
    int lv_vIndex;
    string lv_vCommander;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vIndex = libCOTF_gv_uT_PrestigeIndex;
    lv_vCommander = libCOOC_gf_ActiveCommanderForPlayer(lv_cPlayer);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutputEnable(true);
    DialogSetVisible(libCOUI_gv_cU_CommanderDialog, PlayerGroupAll(), false);
    libCOTF_gf_UT_FixAISupply(2);
    libCOTF_gf_UT_FixConsoleSkins();
    libCOTF_gf_UT_Dehaka_DevourCooldownScoreCheck();
    if (((libCOOC_gf_ActiveCommanderForPlayer(1) == "TerranMengsk") || (libCOOC_gf_ActiveCommanderForPlayer(2) == "TerranMengsk"))) {
        TriggerEnable(libCOTF_gt_UT_Mengsk_ContaminatedStrikeDmgScore, true);
    }

    TriggerEnable(libCOTF_gt_UT_CommanderClicked, false);
    if ((lv_vIndex != 0)) {
        TextExpressionSetToken("Param/Expression/lib_COTF_2FDA6DF6", "C", StringToText((lv_vCommander)));
        TextExpressionSetToken("Param/Expression/lib_COTF_2FDA6DF6", "B", IntToText(lv_vIndex));
        TextExpressionSetToken("Param/Expression/lib_COTF_2FDA6DF6", "A", StringToText((UserDataGetUserInstance("PlayerCommanders", lv_vCommander, "Prestige", lv_vIndex))));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_2FDA6DF6"));
        libCOOC_gf_CC_PlayerPrestigeEnable(lv_cPlayer, UserDataGetUserInstance("PlayerCommanders", lv_vCommander, "Prestige", lv_vIndex));
        lv_button = libCOOC_gf_CC_CommanderPrestigeIndexFace(libCOOC_gf_CommanderLinkForPlayerHealingplayer2(lv_cPlayer), lv_vIndex);
        HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringToText("Active Prestige"), libNtve_ge_TipType_NormalTip), libCOOC_gf_TooltipTextofButton(lv_cPlayer, lv_button), libCOOC_gf_TooltipTextofButton(lv_cPlayer, lv_button), (CatalogFieldValueGet(c_gameCatalogButton, lv_button, "Icon", lv_cPlayer)));
    }

    libCOTF_gf_UT_SignalMutators();
    DialogSetVisible(libCOTF_gv_uT_AIVisionDialog, PlayerGroupAll(), false);
    libCOTF_gf_UT_AI_VisionFix();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_AfterStart_Init () {
    libCOTF_gt_UT_AfterStart = TriggerCreate("libCOTF_gt_UT_AfterStart_Func");
    libCOUI_gf_CU_CommanderClosed(libCOTF_gt_UT_AfterStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_clbmsupggxqynpsn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_offset;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_offset = 60;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 500, c_anchorBottomRight, 20, 0, true);
    DialogSetRenderPriority(DialogLastCreated(), 1025);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libCOTF_gv_uT_AIVisionDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 50, c_anchorBottomRight, 25, 25, StringExternal("Param/Value/lib_COTF_B7C7F4B0"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_COTF_6ABB1A6B"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorBottomRight, -10, 75, StringToText(""), true);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_COTF_0DAEEC9E"), PlayerGroupAll());
    libCOTF_gv_uT_AIVisionCheckBox = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_clbmsupggxqynpsn_Init () {
    libCOTF_gt_clbmsupggxqynpsn = TriggerCreate("libCOTF_gt_clbmsupggxqynpsn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_InfoSave
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_InfoSave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_a = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_C7952FC7"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringToText(""));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_648529CA"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_332E5A4C"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_75E33394"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_5E2BDF41"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_1F0C4A6F"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_3BC4B0D6"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_2A49DD6A"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_8FF01962"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_8F166EA6"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_F8A5DB25"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_9B3C575C"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_C927A7DB"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_4F1EFA61"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_8F4FA5C9"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_3C23276E"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_665E819F"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_AB6F0583"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_D1C1912B"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_973333F4"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_A23F5E36"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_13042D2F"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_4CE03CDE"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_49D3341F"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_3888A9C0"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_DF286DEC"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_86319736"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_3B8FCA43"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_538A5C63"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_BFFDE500"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_81DD443B"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_64FAA528"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_DEBF326E"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_F244D542"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_6D2AD2DF"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_AA01FC9C"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_6933EE83"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_8352796C"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_49852DC3"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_C484C850"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_5AEBE334"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_295F6AE1"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_0910B774"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_0D1AA54F"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_9A7D3FE1"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_7652A566"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_5176D019"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_3598D114"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_5470DA8B"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_056A56BC"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_3D5EF7BE"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_AC6E2641"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_B553D66D"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_0C659619"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_756F62DF"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_98CB2751"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_46BEC876"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_93AA11D2"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_A7EA9318"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_8A7CD2FC"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_83B6F5B5"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_B9685D71"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_3BED63B7"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_4C220D83"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_CF241734"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_4E142A14"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_1BF606EF"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_605813B9"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_D8D2C01E"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_8D7F0C5C"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_41FD8E63"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_010B0035"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringToText(""));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_C92E5697"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_F251FC2A"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_FC1BEF74"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_673569FA"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_CA2F6535"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_66DCA109"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_4AB1E2EF"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_13C583AC"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_7ECF8CCC"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_06C9AD8B"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_2C556A81"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_F863486D"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_386C52AE"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_A8D1C4EC"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_440AE027"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_C274E893"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_039508EE"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_0B4C3371"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_3E243746"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_C5A5C476"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_F4CB7A5A"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_771A5EAC"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_5F720249"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_419EB58E"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_6AECC25E"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_E3FF0BFA"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_93932D2F"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_67E47950"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_4592DABA"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_3E0E81D6"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_226E51BD"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringToText(""));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_FFCE2B02"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_9D5DEEC6"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_03C34E49"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_DA096C92"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_49DB2B19"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_8C6A216C"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_16A8664E"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_39AEE5AD"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_B29D67A6"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_42D6CA6C"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_E907E759"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_0235E4FB"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_63B2DA19"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_7AF1BB8D"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_65756037"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_CC2B88DE"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_82F47BDA"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_F0A5E198"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_86905126"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_35820C56"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_6C10E055"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_8A18C926"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_50297886"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_DB58405D"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_4DF8C9B6"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_E48278E8"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_C5D709F5"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_189B8FDE"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_7D8CA643"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_D868EE0F"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_CF3FE53B"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_4D2C5D7D"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_5F236B12"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_362990E6"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_E000C23E"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_49B7C03A"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_48F22981"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringToText(""));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_4DCD4EB9"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_A387FC6A"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_6CA142F7"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_87C8362E"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_17B4154D"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_5E690BDD"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_F7A834D5"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_3318584C"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_EDF501EF"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_9AEE7990"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_89786865"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_61FD256E"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_BE64E914"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_FC185F8D"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_85A466A0"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_E635564E"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_397BD561"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_09F6DDE1"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_E664DEBD"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_8653487C"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_FDEB9158"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_01AE757B"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_432A66C2"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_363DBA76"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_4CB47960"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_772916E5"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_FFBD3988"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_9DE7FAD1"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_F913ED5C"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_88DFABB8"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_CD60F2F5"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_98283916"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_EA44A85B"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_A861A682"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_C0235F1F"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_4672665A"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_378B6DB4"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_305388DB"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_0FF4D88C"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_B95E4408"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_2FC39D57"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_DF98AC49"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_DC1D6D1C"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_8B11C3C2"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_D408FF2C"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_58D62E5E"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_C0A8464E"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_89D838C1"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_6CC0254E"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_19BF633A"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_3C485F78"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringToText(""));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_4F3ED94E"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_4158B80F"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_31F5F13F"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_73712B0C"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_7FF1A984"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_C61999D9"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_936E47E4"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_72B24BE8"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_3583A78C"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_8D98D73E"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_E6959E05"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_199F0CB7"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_0854864D"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_EBF21941"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_34402F9D"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_C27EABC5"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_985C2181"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_BCDEDFB5"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_8A6A7979"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_28300BD8"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_EBF5CE28"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_FDF490F2"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_83A0C722"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_CD1EACCC"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_5FAAEB1C"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_22A83EA0"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_5D111577"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_6B986C41"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_B6B8604E"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_8585BBB8"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_3A6B6D96"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_480296F7"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_3EF06AAB"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_0CBF774D"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_26A5DD02"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_20F1DCC6"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_2A4F6468"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_B8BCF0B7"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_50E91AD5"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_3F1167DA"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_C8F14820"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringToText(""));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_7B096AC3"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_FBD641AC"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_032562F7"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_C9E32E05"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_7166A2C7"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringToText(""));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_DE55F490"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_E10F6295"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_7BE92D40"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringToText(""));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_9C49B22A"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_634C9C45"));
    lv_a += 1;
    DataTableSetText(true, ("UT_command" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_A5D971E1"));
    DataTableSetText(true, ("UT_desc" + IntToString(lv_a)), StringExternal("Param/Value/lib_COTF_D92C4D6F"));
    lv_a += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_InfoSave_Init () {
    libCOTF_gt_UT_InfoSave = TriggerCreate("libCOTF_gt_UT_InfoSave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Info
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Info_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCOTF_gt_UT_InfoCreate, true, true);
    TriggerEnable(libCOTF_gt_UT_InfoButton, true);
    if ((DialogIsVisible(libCOTF_gv_uT_InfoDialog, EventPlayer()) == false)) {
        DialogSetVisible(libCOTF_gv_uT_InfoDialog, PlayerGroupSingle(EventPlayer()), true);
    }
    else {
        DialogSetVisible(libCOTF_gv_uT_InfoDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Info_Init () {
    libCOTF_gt_UT_Info = TriggerCreate("libCOTF_gt_UT_Info_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Info, c_playerAny, "-info", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_InfoButton
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_InfoButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOTF_gv_uT_InfoButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libCOTF_gv_uT_InfoDialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_InfoButton_Init () {
    libCOTF_gt_UT_InfoButton = TriggerCreate("libCOTF_gt_UT_InfoButton_Func");
    TriggerEnable(libCOTF_gt_UT_InfoButton, false);
    TriggerAddEventDialogControl(libCOTF_gt_UT_InfoButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Info Create
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_InfoCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vListBox;
    int lv_a;
    text lv_vString;
    text lv_vDesc;

    // Automatic Variable Declarations
    const int auto126EBF3F_ae = 200;
    const int auto126EBF3F_ai = 1;

    // Variable Initialization
    lv_vListBox = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(960, 600, c_anchorCenter, 0, -500, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 1050);
    DialogSetFullscreen(DialogLastCreated(), true);
    libCOTF_gv_uT_InfoDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 964, 546, c_anchorCenter, 0, 38, StringToText(""), "Assets\\Textures\\ui_ingame_resourcesharing_frame_message_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    TextExpressionSetToken("Param/Expression/lib_COTF_0D5E7423", "B", GameMapName());
    TextExpressionSetToken("Param/Expression/lib_COTF_0D5E7423", "A", IntToText(UnitGroupCount(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 910, 38, c_anchorCenter, -15, -205, TextExpressionAssemble("Param/Expression/lib_COTF_0D5E7423"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 30, 30, c_anchorCenter, 460, -210, StringToText(""), StringToText(""), "");
    libCOTF_gv_uT_InfoButton = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 30, 31, c_anchorCenter, 460, -210, StringToText(""), "Assets\\Textures\\sc2_ui_glues_icons_closebuttonhover.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 10.0);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 60);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 960, 500);
    lv_vListBox = DialogControlLastCreated();
    lv_a = 1;
    for ( ; ( (auto126EBF3F_ai >= 0 && lv_a <= auto126EBF3F_ae) || (auto126EBF3F_ai < 0 && lv_a >= auto126EBF3F_ae) ) ; lv_a += auto126EBF3F_ai ) {
        lv_vString = DataTableGetText(true, ("UT_command" + IntToString(lv_a)));
        if ((lv_vString != null)) {
            lv_vDesc = DataTableGetText(true, ("UT_desc" + IntToString(lv_a)));
            if ((lv_vDesc != null)) {
                TextExpressionSetToken("Param/Expression/lib_COTF_2C8E1A03", "A", lv_vString);
                TextExpressionSetToken("Param/Expression/lib_COTF_2C8E1A03", "B", lv_vDesc);
                DialogControlAddItem(lv_vListBox, PlayerGroupAll(), TextExpressionAssemble("Param/Expression/lib_COTF_2C8E1A03"));
            }
            else {
                TextExpressionSetToken("Param/Expression/lib_COTF_FFD92F5A", "A", lv_vString);
                DialogControlAddItem(lv_vListBox, PlayerGroupAll(), TextExpressionAssemble("Param/Expression/lib_COTF_FFD92F5A"));
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_InfoCreate_Init () {
    libCOTF_gt_UT_InfoCreate = TriggerCreate("libCOTF_gt_UT_InfoCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Mengsk_ContaminatedStrikeDmgScore
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Mengsk_ContaminatedStrikeDmgScore_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerScoreValueSetFromFixed(EventUnitDamageSourcePlayer(), "DamageDealtbyContaminatedStrike", (PlayerScoreValueGetAsFixed(EventUnitDamageSourcePlayer(), "DamageDealtbyContaminatedStrike")+EventUnitDamageAmount()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Mengsk_ContaminatedStrikeDmgScore_Init () {
    libCOTF_gt_UT_Mengsk_ContaminatedStrikeDmgScore = TriggerCreate("libCOTF_gt_UT_Mengsk_ContaminatedStrikeDmgScore_Func");
    TriggerEnable(libCOTF_gt_UT_Mengsk_ContaminatedStrikeDmgScore, false);
    TriggerAddEventUnitDamaged(libCOTF_gt_UT_Mengsk_ContaminatedStrikeDmgScore, null, c_unitDamageTypeAny, c_unitDamageEither, "ArtilleryMengskExperimentalStrikePeriodicDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ShowCommandsInit
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_ShowCommandsInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libCOTF_gt_UT_ShowCommands) == false)) {
        TriggerEnable(libCOTF_gt_UT_ShowCommands, true);
    }
    else {
        TriggerEnable(libCOTF_gt_UT_ShowCommands, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_ShowCommandsInit_Init () {
    libCOTF_gt_UT_ShowCommandsInit = TriggerCreate("libCOTF_gt_UT_ShowCommandsInit_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_ShowCommandsInit, c_playerAny, "-showcommands", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ShowCommands
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_ShowCommands_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_ability;
    text lv_abilityname;
    int lv_size;
    int lv_duration;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ability = AbilityCommandGetAbility(OrderGetAbilityCommand(EventUnitOrder()));
    lv_abilityname = StringExternal(CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "Name", c_playerAny));
    lv_size = 24;
    lv_duration = 10;

    // Conditions
    if (testConds) {
        if (!(((EventPlayer() == 1) || (EventPlayer() == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((lv_ability == "attack") || (lv_ability == "stop") || (lv_ability == "move") || (lv_ability == "HoldFire"))) {
        return false;
    }

    TextTagCreate(lv_abilityname, lv_size, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    TextTagSetMaxSize(TextTagLastCreated(), 100.0, 100.0);
    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, lv_duration);
    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_ShowCommands_Init () {
    libCOTF_gt_UT_ShowCommands = TriggerCreate("libCOTF_gt_UT_ShowCommands_Func");
    TriggerEnable(libCOTF_gt_UT_ShowCommands, false);
    TriggerAddEventUnitOrder(libCOTF_gt_UT_ShowCommands, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_SelInfo_Init
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_SelInfo_Init_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(libCOTF_gv_uT_SelInfo_PG, EventPlayer()) == false)) {
        PlayerGroupAdd(libCOTF_gv_uT_SelInfo_PG, EventPlayer());
        libCOTF_gf_UT_SelInfo_Init();
        TriggerEnable(libCOTF_gt_UT_SelInfo_Selected, true);
        TriggerEnable(libCOTF_gt_UT_SelInfo_Periodic, true);
        DialogSetVisible(libCOTF_gv_uT_SelInfoDialog, PlayerGroupSingle(EventPlayer()), true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_E3A6C890"));
    }
    else {
        PlayerGroupRemove(libCOTF_gv_uT_SelInfo_PG, EventPlayer());
        DialogSetVisible(libCOTF_gv_uT_SelInfoDialog, PlayerGroupSingle(EventPlayer()), false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_7DBC5895"));
    }
    if ((PlayerGroupCount(libCOTF_gv_uT_SelInfo_PG) == 0)) {
        TriggerEnable(libCOTF_gt_UT_SelInfo_Selected, false);
        TriggerEnable(libCOTF_gt_UT_SelInfo_Periodic, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_SelInfo_Init_Init () {
    libCOTF_gt_UT_SelInfo_Init = TriggerCreate("libCOTF_gt_UT_SelInfo_Init_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_SelInfo_Init, c_playerAny, "-selinfo", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_SelInfo_Selected
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_SelInfo_Selected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOTF_gv_uT_SelInfo_PG, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOTF_gf_UT_SelInfo_Update(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_SelInfo_Selected_Init () {
    libCOTF_gt_UT_SelInfo_Selected = TriggerCreate("libCOTF_gt_UT_SelInfo_Selected_Func");
    TriggerEnable(libCOTF_gt_UT_SelInfo_Selected, false);
    TriggerAddEventUnitSelected(libCOTF_gt_UT_SelInfo_Selected, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_SelInfo_Periodic
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_SelInfo_Periodic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto278FBA56_g;
    int auto278FBA56_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto278FBA56_g = libCOTF_gv_uT_SelInfo_PG;
    auto278FBA56_var = -1;
    while (true) {
        auto278FBA56_var = PlayerGroupNextPlayer(auto278FBA56_g, auto278FBA56_var);
        if (auto278FBA56_var < 0) { break; }
        libCOTF_gf_UT_SelInfo_Update(auto278FBA56_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_SelInfo_Periodic_Init () {
    libCOTF_gt_UT_SelInfo_Periodic = TriggerCreate("libCOTF_gt_UT_SelInfo_Periodic_Func");
    TriggerEnable(libCOTF_gt_UT_SelInfo_Periodic, false);
    TriggerAddEventTimePeriodic(libCOTF_gt_UT_SelInfo_Periodic, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_OldMengsk
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_OldMengsk_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vMengskPlayer;
    int lv_vBonusMandate;

    // Automatic Variable Declarations
    const int auto64818F65_ae = 3;
    int auto64818F65_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_7A8E4103"));
    while (!((GameGetMissionTime() > 0.0))) {
        Wait(0.0625, c_timeGame);
    }
    auto64818F65_var = 1;
    for ( ; auto64818F65_var <= auto64818F65_ae; auto64818F65_var += 1 ) {
        if ((PlayerCommander(auto64818F65_var) == "Mengsk")) {
            lv_vMengskPlayer = auto64818F65_var;
            break;
        }

    }
    if ((lv_vMengskPlayer == 0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COTF_E4B647E0"), true);
        return true;
    }

    libCOTF_gf_CM_Mengsk_GlobalCasterEnergyRegen(libCOTF_gf_CM_PlayerGetGlobalCaster2(lv_vMengskPlayer));
    lv_vBonusMandate = TechTreeUpgradeCount(lv_vMengskPlayer, "MasteryMengskStartingImperialMandate", c_techCountCompleteOnly);
    UnitSetPropertyFixed(libCOTF_gf_CM_PlayerGetGlobalCaster2(lv_vMengskPlayer), c_unitPropEnergy, (IntToFixed(lv_vBonusMandate)+UnitGetPropertyFixed(libCOTF_gf_CM_PlayerGetGlobalCaster2(lv_vMengskPlayer), c_unitPropEnergy, c_unitPropCurrent)));
    TechTreeUpgradeAddLevel(lv_vMengskPlayer, "OldMengsk", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_OldMengsk_Init () {
    libCOTF_gt_UT_OldMengsk = TriggerCreate("libCOTF_gt_UT_OldMengsk_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_OldMengsk, c_playerAny, "-oldmengsk", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_PrestigeAlly
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_PrestigeAlly_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameGetMissionTime() == 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOTF_gf_UT_ChangeAllyPrestige();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_PrestigeAlly_Init () {
    libCOTF_gt_UT_PrestigeAlly = TriggerCreate("libCOTF_gt_UT_PrestigeAlly_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_PrestigeAlly, c_playerAny, "-pnext", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_CommanderClicked
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_CommanderClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_commIndex;

    // Automatic Variable Declarations
    const int auto380B97FF_ae = libCOUI_gv_cUC_COMMSELECTMAX;
    const int auto380B97FF_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_commIndex = 1;
    for ( ; ( (auto380B97FF_ai >= 0 && lv_commIndex <= auto380B97FF_ae) || (auto380B97FF_ai < 0 && lv_commIndex >= auto380B97FF_ae) ) ; lv_commIndex += auto380B97FF_ai ) {
        if ((EventDialogControl() == libCOUI_gv_cU_CommanderButton[lv_commIndex])) {
            if ((libCOUI_gv_cU_CommanderSelection[libCOOC_gf_CC_PlayerAllyNew(EventPlayer())] == libCOUI_gv_cU_CommanderList[lv_commIndex])) {
                libCOTF_gv_uT_PrestigeIndex = 0;
                break;
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_CommanderClicked_Init () {
    libCOTF_gt_UT_CommanderClicked = TriggerCreate("libCOTF_gt_UT_CommanderClicked_Func");
    TriggerEnable(libCOTF_gt_UT_CommanderClicked, false);
    TriggerAddEventDialogControl(libCOTF_gt_UT_CommanderClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DebugMutatorSelect
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_DebugMutatorSelect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool[101] lv_mutatorChoices;
    int lv_mutatorIndex;

    // Automatic Variable Declarations
    const int auto92F4B94C_ae = 100;
    const int auto92F4B94C_ai = 1;
    const int autoB3DB9B4F_ae = 100;
    const int autoB3DB9B4F_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOTF_gf_UT_Cheat();
    lv_mutatorIndex = 1;
    for ( ; ( (auto92F4B94C_ai >= 0 && lv_mutatorIndex <= auto92F4B94C_ae) || (auto92F4B94C_ai < 0 && lv_mutatorIndex >= auto92F4B94C_ae) ) ; lv_mutatorIndex += auto92F4B94C_ai ) {
        lv_mutatorChoices[lv_mutatorIndex] = libCOMU_gf_MutatorIsEnabled(UserDataInstance("Mutators", lv_mutatorIndex));
    }
    libCOUI_gf_CU_MutatorDisplay(EventPlayer());
    while (!(((libCOUI_gv_cU_MutatorDialog == c_invalidDialogId) || (DialogIsVisible(libCOUI_gv_cU_MutatorDialog, EventPlayer()) == false)))) {
        Wait(0.5, c_timeGame);
    }
    lv_mutatorIndex = 1;
    for ( ; ( (autoB3DB9B4F_ai >= 0 && lv_mutatorIndex <= autoB3DB9B4F_ae) || (autoB3DB9B4F_ai < 0 && lv_mutatorIndex >= autoB3DB9B4F_ae) ) ; lv_mutatorIndex += autoB3DB9B4F_ai ) {
        if ((libCOMU_gf_MutatorIsEnabled(UserDataInstance("Mutators", lv_mutatorIndex)) == true) && (lv_mutatorChoices[lv_mutatorIndex] != libCOMU_gf_MutatorIsEnabled(UserDataInstance("Mutators", lv_mutatorIndex)))) {
            TriggerExecute(libCOMU_gf_CT_MutatorInitTrigger(UserDataInstance("Mutators", lv_mutatorIndex)), true, false);
        }

    }
    libCOUI_gf_CU_MutatorListInit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_DebugMutatorSelect_Init () {
    libCOTF_gt_UT_DebugMutatorSelect = TriggerCreate("libCOTF_gt_UT_DebugMutatorSelect_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_DebugMutatorSelect, c_playerAny, "-mutsel", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Rad
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Rad_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vRadius;

    // Automatic Variable Declarations
    unitgroup autoD0F7EBFD_g;
    int autoD0F7EBFD_u;
    unit autoD0F7EBFD_var;
    unitgroup auto70175FEE_g;
    int auto70175FEE_u;
    unit auto70175FEE_var;

    // Variable Initialization
    lv_vRadius = StringToFixed(StringWord(EventChatMessage(false), 2));

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_vRadius >= 0.0)) {
        TextExpressionSetToken("Param/Expression/lib_COTF_4BC9C3E9", "A", FixedToText(lv_vRadius, c_fixedPrecisionAny));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_4BC9C3E9"));
        auto70175FEE_g = UnitGroupSelected(EventPlayer());
        auto70175FEE_u = UnitGroupCount(auto70175FEE_g, c_unitCountAll);
        for (;; auto70175FEE_u -= 1) {
            auto70175FEE_var = UnitGroupUnitFromEnd(auto70175FEE_g, auto70175FEE_u);
            if (auto70175FEE_var == null) { break; }
            CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(auto70175FEE_var), "Radius", 1, FixedToString(lv_vRadius, 2));
        }
        libCOTF_gf_UT_Cheat();
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_F9FE098E"));
        autoD0F7EBFD_g = UnitGroupSelected(EventPlayer());
        autoD0F7EBFD_u = UnitGroupCount(autoD0F7EBFD_g, c_unitCountAll);
        for (;; autoD0F7EBFD_u -= 1) {
            autoD0F7EBFD_var = UnitGroupUnitFromEnd(autoD0F7EBFD_g, autoD0F7EBFD_u);
            if (autoD0F7EBFD_var == null) { break; }
            CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(autoD0F7EBFD_var), "Radius", EventPlayer(), CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(autoD0F7EBFD_var), "Radius", 0));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Rad_Init () {
    libCOTF_gt_UT_Rad = TriggerCreate("libCOTF_gt_UT_Rad_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Rad, c_playerAny, "-rad", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Share Control
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_ShareControl_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetAlliance(2, c_allianceIdSpend, 1) == true)) {
        libNtve_gf_SetAlliance(1, 2, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_6F6136FC"));
    }
    else {
        libNtve_gf_SetAlliance(1, 2, libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_2A2D67BB"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_ShareControl_Init () {
    libCOTF_gt_UT_ShareControl = TriggerCreate("libCOTF_gt_UT_ShareControl_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_ShareControl, c_playerAny, "-share", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_XP
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_XP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vXPAmount;

    // Automatic Variable Declarations
    unitgroup auto450D310C_g;
    int auto450D310C_u;
    unit auto450D310C_var;

    // Variable Initialization
    lv_vXPAmount = StringToFixed(StringWord(EventChatMessage(false), 2));

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto450D310C_g = UnitGroupSelected(EventPlayer());
    auto450D310C_u = UnitGroupCount(auto450D310C_g, c_unitCountAll);
    for (;; auto450D310C_u -= 1) {
        auto450D310C_var = UnitGroupUnitFromEnd(auto450D310C_g, auto450D310C_u);
        if (auto450D310C_var == null) { break; }
        UnitXPAddXP(auto450D310C_var, null, lv_vXPAmount);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_XP_Init () {
    libCOTF_gt_UT_XP = TriggerCreate("libCOTF_gt_UT_XP_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_XP, c_playerAny, "-xp", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ListDead
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_ListDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto9F1E5F14_ae = 15;
    int auto9F1E5F14_var;
    unitgroup auto46242E43_g;
    int auto46242E43_u;
    unit auto46242E43_var;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_COTF_B2C1AF08"), true);
    auto9F1E5F14_var = 0;
    for ( ; auto9F1E5F14_var <= auto9F1E5F14_ae; auto9F1E5F14_var += 1 ) {
        auto46242E43_g = UnitGroup(null, auto9F1E5F14_var, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterDead - 32)), (1 << c_targetFilterMissile), 0), 0);
        auto46242E43_u = UnitGroupCount(auto46242E43_g, c_unitCountAll);
        for (;; auto46242E43_u -= 1) {
            auto46242E43_var = UnitGroupUnitFromEnd(auto46242E43_g, auto46242E43_u);
            if (auto46242E43_var == null) { break; }
            TextExpressionSetToken("Param/Expression/lib_COTF_CF97E18A", "A", UnitGetName(auto46242E43_var));
            TextExpressionSetToken("Param/Expression/lib_COTF_CF97E18A", "B", IntToText(UnitGetOwner(auto46242E43_var)));
            TextExpressionSetToken("Param/Expression/lib_COTF_CF97E18A", "C", FixedToText(PointGetX(UnitGetPosition(auto46242E43_var)), 1));
            TextExpressionSetToken("Param/Expression/lib_COTF_CF97E18A", "D", FixedToText(PointGetY(UnitGetPosition(auto46242E43_var)), 1));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COTF_CF97E18A"), true);
            Wait(0.001, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_ListDead_Init () {
    libCOTF_gt_UT_ListDead = TriggerCreate("libCOTF_gt_UT_ListDead_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_ListDead, c_playerAny, "-listdead", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ListHidden
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_ListHidden_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoE7E524BD_ae = 15;
    int autoE7E524BD_var;
    unitgroup auto25DE1818_g;
    int auto25DE1818_u;
    unit auto25DE1818_var;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_COTF_05DC7E18"), true);
    autoE7E524BD_var = 0;
    for ( ; autoE7E524BD_var <= autoE7E524BD_ae; autoE7E524BD_var += 1 ) {
        auto25DE1818_g = UnitGroup(null, autoE7E524BD_var, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), 0), 0);
        auto25DE1818_u = UnitGroupCount(auto25DE1818_g, c_unitCountAll);
        for (;; auto25DE1818_u -= 1) {
            auto25DE1818_var = UnitGroupUnitFromEnd(auto25DE1818_g, auto25DE1818_u);
            if (auto25DE1818_var == null) { break; }
            if ((libNtve_gf_UnitIsInsideTransport(auto25DE1818_var) == true)) {
                TextExpressionSetToken("Param/Expression/lib_COTF_B1ED623E", "A", UnitGetName(auto25DE1818_var));
                TextExpressionSetToken("Param/Expression/lib_COTF_B1ED623E", "B", IntToText(UnitGetOwner(auto25DE1818_var)));
                TextExpressionSetToken("Param/Expression/lib_COTF_B1ED623E", "C", FixedToText(PointGetX(UnitGetPosition(auto25DE1818_var)), 1));
                TextExpressionSetToken("Param/Expression/lib_COTF_B1ED623E", "D", FixedToText(PointGetY(UnitGetPosition(auto25DE1818_var)), 1));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COTF_B1ED623E"), true);
            }
            else {
                TextExpressionSetToken("Param/Expression/lib_COTF_9F54EE61", "A", UnitGetName(auto25DE1818_var));
                TextExpressionSetToken("Param/Expression/lib_COTF_9F54EE61", "B", IntToText(UnitGetOwner(auto25DE1818_var)));
                TextExpressionSetToken("Param/Expression/lib_COTF_9F54EE61", "C", FixedToText(PointGetX(UnitGetPosition(auto25DE1818_var)), 1));
                TextExpressionSetToken("Param/Expression/lib_COTF_9F54EE61", "D", FixedToText(PointGetY(UnitGetPosition(auto25DE1818_var)), 1));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COTF_9F54EE61"), true);
            }
            Wait(0.001, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_ListHidden_Init () {
    libCOTF_gt_UT_ListHidden = TriggerCreate("libCOTF_gt_UT_ListHidden_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_ListHidden, c_playerAny, "-listhidden", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ListMissile
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_ListMissile_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto0E71FC71_ae = 15;
    int auto0E71FC71_var;
    unitgroup autoBCE6CFD9_g;
    int autoBCE6CFD9_u;
    unit autoBCE6CFD9_var;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_COTF_5B83AC03"), true);
    auto0E71FC71_var = 0;
    for ( ; auto0E71FC71_var <= auto0E71FC71_ae; auto0E71FC71_var += 1 ) {
        autoBCE6CFD9_g = UnitGroup(null, auto0E71FC71_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterMissile), 0, 0, 0), 0);
        autoBCE6CFD9_u = UnitGroupCount(autoBCE6CFD9_g, c_unitCountAll);
        for (;; autoBCE6CFD9_u -= 1) {
            autoBCE6CFD9_var = UnitGroupUnitFromEnd(autoBCE6CFD9_g, autoBCE6CFD9_u);
            if (autoBCE6CFD9_var == null) { break; }
            TextExpressionSetToken("Param/Expression/lib_COTF_1BC09BDD", "A", UnitGetName(autoBCE6CFD9_var));
            TextExpressionSetToken("Param/Expression/lib_COTF_1BC09BDD", "B", IntToText(UnitGetOwner(autoBCE6CFD9_var)));
            TextExpressionSetToken("Param/Expression/lib_COTF_1BC09BDD", "C", FixedToText(PointGetX(UnitGetPosition(autoBCE6CFD9_var)), 1));
            TextExpressionSetToken("Param/Expression/lib_COTF_1BC09BDD", "D", FixedToText(PointGetY(UnitGetPosition(autoBCE6CFD9_var)), 1));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COTF_1BC09BDD"), true);
            Wait(0.001, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_ListMissile_Init () {
    libCOTF_gt_UT_ListMissile = TriggerCreate("libCOTF_gt_UT_ListMissile_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_ListMissile, c_playerAny, "-listmissile", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ListAll
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_ListAll_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_vText;
    int lv_vA;
    int lv_vB;
    playergroup lv_vPlayerGroup;

    // Automatic Variable Declarations
    playergroup auto34574AAA_g;
    int auto34574AAA_var;
    unitgroup auto2CA3CB64_g;
    int auto2CA3CB64_u;
    unit auto2CA3CB64_var;
    playergroup auto8A8F4168_g;
    int auto8A8F4168_var;
    unitgroup auto43F3C458_g;
    int auto43F3C458_u;
    unit auto43F3C458_var;

    // Variable Initialization
    lv_vB = StringToInt(StringWord(EventChatMessage(false), 2));
    lv_vPlayerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_COTF_68C2D676", "A", IntToText(lv_vB));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_68C2D676"));
    if ((StringWord(EventChatMessage(false), 2) != "") && (lv_vB >= 0)) {
        PlayerGroupAdd(lv_vPlayerGroup, lv_vB);
    }
    else {
        libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupAll(), lv_vPlayerGroup);
    }
    auto34574AAA_g = lv_vPlayerGroup;
    auto34574AAA_var = -1;
    while (true) {
        auto34574AAA_var = PlayerGroupNextPlayer(auto34574AAA_g, auto34574AAA_var);
        if (auto34574AAA_var < 0) { break; }
        auto2CA3CB64_g = UnitGroup(null, auto34574AAA_var, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto2CA3CB64_u = UnitGroupCount(auto2CA3CB64_g, c_unitCountAll);
        for (;; auto2CA3CB64_u -= 1) {
            auto2CA3CB64_var = UnitGroupUnitFromEnd(auto2CA3CB64_g, auto2CA3CB64_u);
            if (auto2CA3CB64_var == null) { break; }
            lv_vA += 1;
        }
    }
    TextExpressionSetToken("Param/Expression/lib_COTF_B3C99425", "A", IntToText(lv_vA));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COTF_B3C99425"), true);
    Wait(0.5, c_timeGame);
    auto8A8F4168_g = lv_vPlayerGroup;
    auto8A8F4168_var = -1;
    while (true) {
        auto8A8F4168_var = PlayerGroupNextPlayer(auto8A8F4168_g, auto8A8F4168_var);
        if (auto8A8F4168_var < 0) { break; }
        auto43F3C458_g = UnitGroup(null, auto8A8F4168_var, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto43F3C458_u = UnitGroupCount(auto43F3C458_g, c_unitCountAll);
        for (;; auto43F3C458_u -= 1) {
            auto43F3C458_var = UnitGroupUnitFromEnd(auto43F3C458_g, auto43F3C458_u);
            if (auto43F3C458_var == null) { break; }
            Wait(0.001, c_timeGame);
            lv_vText = StringToText("");
            if ((libNtve_gf_UnitIsHidden(auto43F3C458_var) == true)) {
                lv_vText = StringExternal("Param/Value/lib_COTF_420E7757");
            }

            if ((UnitIsAlive(auto43F3C458_var) == false)) {
                TextExpressionSetToken("Param/Expression/lib_COTF_B1714795", "A", lv_vText);
                lv_vText = TextExpressionAssemble("Param/Expression/lib_COTF_B1714795");
            }

            if ((UnitTypeTestFlag(UnitGetType(auto43F3C458_var), c_unitFlagMissile) == true)) {
                TextExpressionSetToken("Param/Expression/lib_COTF_A8D10939", "A", lv_vText);
                lv_vText = TextExpressionAssemble("Param/Expression/lib_COTF_A8D10939");
            }

            TextExpressionSetToken("Param/Expression/lib_COTF_C0A38728", "A", UnitGetName(auto43F3C458_var));
            TextExpressionSetToken("Param/Expression/lib_COTF_C0A38728", "B", IntToText(auto8A8F4168_var));
            TextExpressionSetToken("Param/Expression/lib_COTF_C0A38728", "C", FixedToText(PointGetX(UnitGetPosition(auto43F3C458_var)), 1));
            TextExpressionSetToken("Param/Expression/lib_COTF_C0A38728", "D", FixedToText(PointGetY(UnitGetPosition(auto43F3C458_var)), 1));
            TextExpressionSetToken("Param/Expression/lib_COTF_C0A38728", "E", lv_vText);
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COTF_C0A38728"), true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_ListAll_Init () {
    libCOTF_gt_UT_ListAll = TriggerCreate("libCOTF_gt_UT_ListAll_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_ListAll, c_playerAny, "-listall", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_skin
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_skin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOTF_gf_UT_FixConsoleSkins();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_skin_Init () {
    libCOTF_gt_UT_skin = TriggerCreate("libCOTF_gt_UT_skin_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_skin, c_playerAny, "-consolereset", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_TesseractCannonTEST
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_TesseractCannonTEST_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vAmount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vAmount = (-1.0 + StringToFixed(StringWord(EventChatMessage(false), 2)));

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_vAmount > -1.0)) {
        CatalogFieldValueSet(c_gameCatalogBehavior, "TesseractCannonTestBehavior", "Modification.UnifiedDamageDealtFraction[" + IntToString(c_unitDamageTypeRanged) + "]", EventPlayer(), FixedToString(lv_vAmount, 3));
    }
    else {
        CatalogFieldValueSet(c_gameCatalogBehavior, "TesseractCannonTestBehavior", "Modification.UnifiedDamageDealtFraction[" + IntToString(c_unitDamageTypeRanged) + "]", EventPlayer(), "-0.5");
    }
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_TesseractCannonTEST_Init () {
    libCOTF_gt_UT_TesseractCannonTEST = TriggerCreate("libCOTF_gt_UT_TesseractCannonTEST_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_TesseractCannonTEST, c_playerAny, "-cannon", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Resource
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Resource_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, StringToInt(StringWord(EventChatMessage(false), 2)));
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, StringToInt(StringWord(EventChatMessage(false), 3)));
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Resource_Init () {
    libCOTF_gt_UT_Resource = TriggerCreate("libCOTF_gt_UT_Resource_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Resource, c_playerAny, "-resource", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_AllySupply
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_AllySupply_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/AllySupplyPanel");
    if ((DialogControlIsVisible(EventDialogControl(), EventPlayer()) == false)) {
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(EventPlayer()), true);
    }
    else {
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_AllySupply_Init () {
    libCOTF_gt_UT_AllySupply = TriggerCreate("libCOTF_gt_UT_AllySupply_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_AllySupply, c_playerAny, "-allysupply", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_SpawnArtifacts
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_SpawnArtifacts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZeratulArtifactPickup1", 0, EventPlayer(), CameraGetTarget(EventPlayer()));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZeratulArtifactPickup2", 0, EventPlayer(), CameraGetTarget(EventPlayer()));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZeratulArtifactPickup3", 0, EventPlayer(), CameraGetTarget(EventPlayer()));
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_SpawnArtifacts_Init () {
    libCOTF_gt_UT_SpawnArtifacts = TriggerCreate("libCOTF_gt_UT_SpawnArtifacts_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_SpawnArtifacts, c_playerAny, "-spawnartifacts", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Pause
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Pause_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitIsPaused(UnitGroupRandomUnit(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)) == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_E3D10DBA"));
        UnitPauseAll(false);
        AITimePause(false);
        GameSetMissionTimePaused(false);
        GamePauseAllCharges(false);
        GamePauseAllCooldowns(false);
        GameTimeOfDayPause(false);
        TriggerQueuePause(false);
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_0178C73F"));
        UnitPauseAll(true);
        AITimePause(true);
        GameSetMissionTimePaused(true);
        GamePauseAllCharges(true);
        GamePauseAllCooldowns(true);
        GameTimeOfDayPause(true);
        TriggerQueuePause(true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Pause_Init () {
    libCOTF_gt_UT_Pause = TriggerCreate("libCOTF_gt_UT_Pause_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Pause, c_playerAny, "-pause", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_TechReset
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_TechReset_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vUpgrade;
    int lv_vPlayer;

    // Automatic Variable Declarations
    int autoDF5B4D09_catalog;
    int autoDF5B4D09_i;

    // Variable Initialization
    lv_vPlayer = 1;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_C32978C3"));
    if ((StringToInt(StringWord(EventChatMessage(false), 2)) != 0)) {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 2));
    }

    autoDF5B4D09_catalog = c_gameCatalogUpgrade;
    autoDF5B4D09_i = 1;
    for ( ; autoDF5B4D09_i <= CatalogEntryCount(c_gameCatalogUpgrade) ; autoDF5B4D09_i += 1 ) {
        lv_vUpgrade = CatalogEntryGet(autoDF5B4D09_catalog, autoDF5B4D09_i);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_vPlayer, lv_vUpgrade, 0);
    }
    libCOOC_gf_CC_ApplyTech(lv_vPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_TechReset_Init () {
    libCOTF_gt_UT_TechReset = TriggerCreate("libCOTF_gt_UT_TechReset_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_TechReset, c_playerAny, "-techreset", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Money
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Money_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 50000);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, 50000);
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Money_Init () {
    libCOTF_gt_UT_Money = TriggerCreate("libCOTF_gt_UT_Money_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Money, c_playerAny, "-money", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Look
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Look_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8FE23CA4_g;
    int auto8FE23CA4_u;
    unit auto8FE23CA4_var;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto8FE23CA4_g = UnitGroupSelected(EventPlayer());
    auto8FE23CA4_u = UnitGroupCount(auto8FE23CA4_g, c_unitCountAll);
    for (;; auto8FE23CA4_u -= 1) {
        auto8FE23CA4_var = UnitGroupUnitFromEnd(auto8FE23CA4_g, auto8FE23CA4_u);
        if (auto8FE23CA4_var == null) { break; }
        libNtve_gf_MakeModelFaceAngle(libNtve_gf_MainActorofUnit(auto8FE23CA4_var), StringToFixed(StringWord(EventChatMessage(false), 2)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Look_Init () {
    libCOTF_gt_UT_Look = TriggerCreate("libCOTF_gt_UT_Look_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Look, c_playerAny, "-look", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_sight
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_sight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto667B02B1_g;
    int auto667B02B1_u;
    unit auto667B02B1_var;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_COTF_5E088215", "A", StringToText(StringWord(EventChatMessage(false), 1)));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_5E088215"));
    auto667B02B1_g = UnitGroupSelected(EventPlayer());
    auto667B02B1_u = UnitGroupCount(auto667B02B1_g, c_unitCountAll);
    for (;; auto667B02B1_u -= 1) {
        auto667B02B1_var = UnitGroupUnitFromEnd(auto667B02B1_g, auto667B02B1_u);
        if (auto667B02B1_var == null) { break; }
        CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(auto667B02B1_var), "Sight", EventPlayer(), StringWord(EventChatMessage(false), 2));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_sight_Init () {
    libCOTF_gt_UT_sight = TriggerCreate("libCOTF_gt_UT_sight_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_sight, c_playerAny, "-sight", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Kill Units
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_KillUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;

    // Automatic Variable Declarations
    unitgroup auto3625AF5B_g;
    int auto3625AF5B_u;
    unit auto3625AF5B_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 2));
    auto3625AF5B_g = UnitGroupSelected(EventPlayer());
    auto3625AF5B_u = UnitGroupCount(auto3625AF5B_g, c_unitCountAll);
    for (;; auto3625AF5B_u -= 1) {
        auto3625AF5B_var = UnitGroupUnitFromEnd(auto3625AF5B_g, auto3625AF5B_u);
        if (auto3625AF5B_var == null) { break; }
        PlayerCreateEffectUnit(lv_vPlayer, "Damage", auto3625AF5B_var);
    }
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_KillUnits_Init () {
    libCOTF_gt_UT_KillUnits = TriggerCreate("libCOTF_gt_UT_KillUnits_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_KillUnits, c_playerAny, "-kill", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Remove
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Remove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vInnerUnit;

    // Automatic Variable Declarations
    unitgroup autoBFEE923A_g;
    int autoBFEE923A_u;
    unit autoBFEE923A_var;
    const int auto02F831E2_ae = 10;
    int auto02F831E2_var;
    unitgroup auto5BEEFDD0_g;
    int auto5BEEFDD0_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBFEE923A_g = UnitGroupSelected(EventPlayer());
    autoBFEE923A_u = UnitGroupCount(autoBFEE923A_g, c_unitCountAll);
    for (;; autoBFEE923A_u -= 1) {
        autoBFEE923A_var = UnitGroupUnitFromEnd(autoBFEE923A_g, autoBFEE923A_u);
        if (autoBFEE923A_var == null) { break; }
        auto02F831E2_var = 0;
        for ( ; auto02F831E2_var <= auto02F831E2_ae; auto02F831E2_var += 1 ) {
            if ((libCOTF_gf_TextTagForUnit(autoBFEE923A_var, auto02F831E2_var) != c_textTagNone)) {
                TextTagDestroy(libCOTF_gf_TextTagForUnit(autoBFEE923A_var, auto02F831E2_var));
            }

        }
        auto5BEEFDD0_g = UnitCargoGroup(autoBFEE923A_var);
        auto5BEEFDD0_u = UnitGroupCount(auto5BEEFDD0_g, c_unitCountAll);
        for (;; auto5BEEFDD0_u -= 1) {
            lv_vInnerUnit = UnitGroupUnitFromEnd(auto5BEEFDD0_g, auto5BEEFDD0_u);
            if (lv_vInnerUnit == null) { break; }
            UnitRemove(lv_vInnerUnit);
        }
        UnitRemove(autoBFEE923A_var);
    }
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Remove_Init () {
    libCOTF_gt_UT_Remove = TriggerCreate("libCOTF_gt_UT_Remove_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Remove, c_playerAny, "-remove", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_clearscreen
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_clearscreen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;
    unit lv_vInnerUnit;

    // Automatic Variable Declarations
    unitgroup autoCB43156F_g;
    int autoCB43156F_u;
    unit autoCB43156F_var;
    const int auto23CB3CCE_ae = 10;
    int auto23CB3CCE_var;
    unitgroup auto7324A985_g;
    int auto7324A985_u;
    unitgroup auto3317D269_g;
    int auto3317D269_u;
    unit auto3317D269_var;
    const int auto67E81461_ae = 10;
    int auto67E81461_var;
    unitgroup auto6CC0F05C_g;
    int auto6CC0F05C_u;

    // Variable Initialization
    lv_vPlayer = c_playerAny;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "unsel")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_4F4F69E6"));
        autoCB43156F_g = UnitGroup(null, lv_vPlayer, RegionCircle(CameraGetTarget(EventPlayer()), 15.0), UnitFilter(0, 0, 0, 0), 0);
        autoCB43156F_u = UnitGroupCount(autoCB43156F_g, c_unitCountAll);
        for (;; autoCB43156F_u -= 1) {
            autoCB43156F_var = UnitGroupUnitFromEnd(autoCB43156F_g, autoCB43156F_u);
            if (autoCB43156F_var == null) { break; }
            if ((UnitTypeTestFlag(UnitGetType(autoCB43156F_var), c_unitFlagUnselectable) == true)) {
                auto23CB3CCE_var = 0;
                for ( ; auto23CB3CCE_var <= auto23CB3CCE_ae; auto23CB3CCE_var += 1 ) {
                    if ((libCOTF_gf_TextTagForUnit(autoCB43156F_var, auto23CB3CCE_var) != c_textTagNone)) {
                        TextTagDestroy(libCOTF_gf_TextTagForUnit(autoCB43156F_var, auto23CB3CCE_var));
                    }

                }
                auto7324A985_g = UnitCargoGroup(autoCB43156F_var);
                auto7324A985_u = UnitGroupCount(auto7324A985_g, c_unitCountAll);
                for (;; auto7324A985_u -= 1) {
                    lv_vInnerUnit = UnitGroupUnitFromEnd(auto7324A985_g, auto7324A985_u);
                    if (lv_vInnerUnit == null) { break; }
                    UnitRemove(lv_vInnerUnit);
                }
                UnitRemove(autoCB43156F_var);
            }

        }
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != "")) {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 2));
    }

    TextExpressionSetToken("Param/Expression/lib_COTF_DCBC66B3", "A", IntToText(lv_vPlayer));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_DCBC66B3"));
    auto3317D269_g = UnitGroup(null, lv_vPlayer, RegionCircle(CameraGetTarget(EventPlayer()), 15.0), UnitFilter(0, 0, 0, 0), 0);
    auto3317D269_u = UnitGroupCount(auto3317D269_g, c_unitCountAll);
    for (;; auto3317D269_u -= 1) {
        auto3317D269_var = UnitGroupUnitFromEnd(auto3317D269_g, auto3317D269_u);
        if (auto3317D269_var == null) { break; }
        auto67E81461_var = 0;
        for ( ; auto67E81461_var <= auto67E81461_ae; auto67E81461_var += 1 ) {
            if ((libCOTF_gf_TextTagForUnit(auto3317D269_var, auto67E81461_var) != c_textTagNone)) {
                TextTagDestroy(libCOTF_gf_TextTagForUnit(auto3317D269_var, auto67E81461_var));
            }

        }
        auto6CC0F05C_g = UnitCargoGroup(auto3317D269_var);
        auto6CC0F05C_u = UnitGroupCount(auto6CC0F05C_g, c_unitCountAll);
        for (;; auto6CC0F05C_u -= 1) {
            lv_vInnerUnit = UnitGroupUnitFromEnd(auto6CC0F05C_g, auto6CC0F05C_u);
            if (lv_vInnerUnit == null) { break; }
            UnitRemove(lv_vInnerUnit);
        }
        UnitRemove(auto3317D269_var);
    }
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_clearscreen_Init () {
    libCOTF_gt_UT_clearscreen = TriggerCreate("libCOTF_gt_UT_clearscreen_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_clearscreen, c_playerAny, "-clearscreen", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Pause AI
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_PauseAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((AITimeIsPaused() == false)) {
        AITimePause(true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_08A6193F"));
    }
    else {
        AITimePause(false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_E62D4E28"));
    }
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_PauseAI_Init () {
    libCOTF_gt_UT_PauseAI = TriggerCreate("libCOTF_gt_UT_PauseAI_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_PauseAI, c_playerAny, "-pai", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Speed
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Speed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoB8F020B4_val;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB8F020B4_val = StringWord(EventChatMessage(false), 2);
    if (autoB8F020B4_val == "slower") {
        GameSetSpeedValue(c_gameSpeedSlower);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_637CB838"));
    }
    else if (autoB8F020B4_val == "slow") {
        GameSetSpeedValue(c_gameSpeedSlow);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_CFA25828"));
    }
    else if (autoB8F020B4_val == "normal") {
        GameSetSpeedValue(c_gameSpeedNormal);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_32153F47"));
    }
    else if (autoB8F020B4_val == "fast") {
        GameSetSpeedValue(c_gameSpeedFast);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_E7C4A336"));
    }
    else if (autoB8F020B4_val == "faster") {
        GameSetSpeedValue(c_gameSpeedFaster);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_E1B1A618"));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Speed_Init () {
    libCOTF_gt_UT_Speed = TriggerCreate("libCOTF_gt_UT_Speed_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Speed, c_playerAny, "-speed", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Supply
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Supply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vSupply;
    int lv_vPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vSupply = StringToInt(StringWord(EventChatMessage(false), 2));
    lv_vPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringToInt(StringWord(EventChatMessage(false), 3)) >= 2)) {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 3));
    }

    PlayerModifyPropertyInt(lv_vPlayer, c_playerPropSuppliesLimit, c_playerPropOperSetTo, lv_vSupply);
    TextExpressionSetToken("Param/Expression/lib_COTF_69E1DFE3", "A", IntToText(lv_vSupply));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_69E1DFE3"));
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Supply_Init () {
    libCOTF_gt_UT_Supply = TriggerCreate("libCOTF_gt_UT_Supply_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Supply, c_playerAny, "-supply", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Give
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Give_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        lv_vPlayer = 3;
    }
    else {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 2));
    }
    libNtve_gf_RescueUnit2(UnitGroupSelected(EventPlayer()), lv_vPlayer, true);
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Give_Init () {
    libCOTF_gt_UT_Give = TriggerCreate("libCOTF_gt_UT_Give_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Give, c_playerAny, "-give", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_SwitchOwner
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_SwitchOwner_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;

    // Automatic Variable Declarations
    unitgroup auto3C81A2E3_g;
    int auto3C81A2E3_u;
    unit auto3C81A2E3_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        lv_vPlayer = 3;
    }
    else {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 2));
    }
    auto3C81A2E3_g = UnitGroupSelected(EventPlayer());
    auto3C81A2E3_u = UnitGroupCount(auto3C81A2E3_g, c_unitCountAll);
    for (;; auto3C81A2E3_u -= 1) {
        auto3C81A2E3_var = UnitGroupUnitFromEnd(auto3C81A2E3_g, auto3C81A2E3_u);
        if (auto3C81A2E3_var == null) { break; }
        UnitBehaviorAddPlayer(auto3C81A2E3_var, "PXOwnership", lv_vPlayer, 1);
    }
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_SwitchOwner_Init () {
    libCOTF_gt_UT_SwitchOwner = TriggerCreate("libCOTF_gt_UT_SwitchOwner_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_SwitchOwner, c_playerAny, "-switchowner", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Cost
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Cost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed[21] lv_vSupply;
    fixed[21] lv_vCost;
    fixed lv_vDistance;
    string lv_vRace;

    // Automatic Variable Declarations
    unitgroup auto868860E4_g;
    int auto868860E4_u;
    unit auto868860E4_var;
    const int autoAD3F0893_ae = 19;
    int autoAD3F0893_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vDistance = StringToFixed(StringWord(EventChatMessage(false), 2));
    if ((lv_vDistance >= 1)) {
    }
    else {
        lv_vDistance = 12.0;
    }
    auto868860E4_g = UnitGroup(null, c_playerAny, RegionCircle(CameraGetTarget(EventPlayer()), lv_vDistance), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto868860E4_u = UnitGroupCount(auto868860E4_g, c_unitCountAll);
    for (;; auto868860E4_u -= 1) {
        auto868860E4_var = UnitGroupUnitFromEnd(auto868860E4_g, auto868860E4_u);
        if (auto868860E4_var == null) { break; }
        lv_vSupply[UnitGetOwner(auto868860E4_var)] += UnitGetPropertyFixed(auto868860E4_var, c_unitPropSuppliesUsed, c_unitPropCurrent);
        lv_vCost[UnitGetOwner(auto868860E4_var)] += UnitTypeGetCost(UnitGetType(auto868860E4_var), c_unitCostSumMineralsVespene);
        TextExpressionSetToken("Param/Expression/lib_COTF_A76F6B3E", "A", FixedToText(UnitGetPropertyFixed(auto868860E4_var, c_unitPropSuppliesUsed, c_unitPropCurrent), c_fixedPrecisionAny));
        TextExpressionSetToken("Param/Expression/lib_COTF_A76F6B3E", "B", FixedToText(UnitTypeGetCost(UnitGetType(auto868860E4_var), c_unitCostSumMineralsVespene), c_fixedPrecisionAny));
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_COTF_A76F6B3E"), 24, UnitGetPosition(auto868860E4_var), 1.0, true, false, PlayerGroupAll());
        TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 10.0);
        lv_vRace = libCOMI_gf_GetUnitRace(auto868860E4_var);
    }
    autoAD3F0893_var = 1;
    for ( ; autoAD3F0893_var <= autoAD3F0893_ae; autoAD3F0893_var += 1 ) {
        if ((lv_vSupply[autoAD3F0893_var] != 0.0) && (lv_vCost[autoAD3F0893_var] != 0.0)) {
            TextExpressionSetToken("Param/Expression/lib_COTF_C3BC70CA", "A", IntToText(autoAD3F0893_var));
            TextExpressionSetToken("Param/Expression/lib_COTF_C3BC70CA", "D", StringToText((lv_vRace)));
            TextExpressionSetToken("Param/Expression/lib_COTF_C3BC70CA", "B", FixedToText(lv_vSupply[autoAD3F0893_var], c_fixedPrecisionAny));
            TextExpressionSetToken("Param/Expression/lib_COTF_C3BC70CA", "C", FixedToText(lv_vCost[autoAD3F0893_var], c_fixedPrecisionAny));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_C3BC70CA"));
            lv_vCost[20] += lv_vCost[autoAD3F0893_var];
            lv_vSupply[20] += lv_vSupply[autoAD3F0893_var];
        }

    }
    TextExpressionSetToken("Param/Expression/lib_COTF_BCDB50CF", "B", FixedToText(lv_vSupply[20], c_fixedPrecisionAny));
    TextExpressionSetToken("Param/Expression/lib_COTF_BCDB50CF", "C", FixedToText(lv_vCost[20], c_fixedPrecisionAny));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_BCDB50CF"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Cost_Init () {
    libCOTF_gt_UT_Cost = TriggerCreate("libCOTF_gt_UT_Cost_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Cost, c_playerAny, "-cost", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Unlock
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Unlock_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, true);
    CameraLockInput(EventPlayer(), false);
    UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayer()), c_localSelectionTypeUnknown, true);
    DialogControlHookup(libCOUI_gv_cU_FanfarePanel, c_triggerControlTypeButton, "QuitButton");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Unlock_Init () {
    libCOTF_gt_UT_Unlock = TriggerCreate("libCOTF_gt_UT_Unlock_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Unlock, c_playerAny, "-unlock", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Trigdebug
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Trigdebug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugWindowOpen(true);
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_2157B09F"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Trigdebug_Init () {
    libCOTF_gt_UT_Trigdebug = TriggerCreate("libCOTF_gt_UT_Trigdebug_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Trigdebug, c_playerAny, "-trigdebug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_GetID
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_GetID_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto49CE74FA_g;
    int auto49CE74FA_u;
    unit auto49CE74FA_var;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto49CE74FA_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto49CE74FA_u = UnitGroupCount(auto49CE74FA_g, c_unitCountAll);
    for (;; auto49CE74FA_u -= 1) {
        auto49CE74FA_var = UnitGroupUnitFromEnd(auto49CE74FA_g, auto49CE74FA_u);
        if (auto49CE74FA_var == null) { break; }
        if ((libNtve_gf_UnitIsHidden(auto49CE74FA_var) == true)) {
            TextExpressionSetToken("Param/Expression/lib_COTF_9B3F8E44", "A", StringToText((UnitGetType(auto49CE74FA_var))));
            TextExpressionSetToken("Param/Expression/lib_COTF_9B3F8E44", "B", IntToText(UnitGetOwner(auto49CE74FA_var)));
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_COTF_9B3F8E44"), 24, UnitGetPosition(auto49CE74FA_var), 1.0, true, false, PlayerGroupSingle(EventPlayer()));
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_COTF_BE7C169C", "A", StringToText((UnitGetType(auto49CE74FA_var))));
            TextExpressionSetToken("Param/Expression/lib_COTF_BE7C169C", "B", IntToText(UnitGetOwner(auto49CE74FA_var)));
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_COTF_BE7C169C"), 24, UnitGetPosition(auto49CE74FA_var), 1.0, true, false, PlayerGroupSingle(EventPlayer()));
            TextTagAttachToUnit(TextTagLastCreated(), auto49CE74FA_var, 1.5);
        }
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 20.0);
        TextTagShow(TextTagLastCreated(), PlayerGroupSingle(EventPlayer()), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_GetID_Init () {
    libCOTF_gt_UT_GetID = TriggerCreate("libCOTF_gt_UT_GetID_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_GetID, c_playerAny, "-getid", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Restore
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Restore_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1B5BBD4D_g;
    int auto1B5BBD4D_u;
    unit auto1B5BBD4D_var;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto1B5BBD4D_g = UnitGroupSelected(EventPlayer());
    auto1B5BBD4D_u = UnitGroupCount(auto1B5BBD4D_g, c_unitCountAll);
    for (;; auto1B5BBD4D_u -= 1) {
        auto1B5BBD4D_var = UnitGroupUnitFromEnd(auto1B5BBD4D_g, auto1B5BBD4D_u);
        if (auto1B5BBD4D_var == null) { break; }
        UnitSetPropertyFixed(auto1B5BBD4D_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(auto1B5BBD4D_var, c_unitPropEnergyPercent, 100.0);
        UnitSetPropertyFixed(auto1B5BBD4D_var, c_unitPropShieldsPercent, 100.0);
    }
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Restore_Init () {
    libCOTF_gt_UT_Restore = TriggerCreate("libCOTF_gt_UT_Restore_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Restore, c_playerAny, "-restore", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Clear Enemy
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_ClearEnemy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoEC0A20CD_g;
    int autoEC0A20CD_u;
    unit autoEC0A20CD_var;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoEC0A20CD_g = UnitGroupAlliance(1, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    autoEC0A20CD_u = UnitGroupCount(autoEC0A20CD_g, c_unitCountAll);
    for (;; autoEC0A20CD_u -= 1) {
        autoEC0A20CD_var = UnitGroupUnitFromEnd(autoEC0A20CD_g, autoEC0A20CD_u);
        if (autoEC0A20CD_var == null) { break; }
        UnitRemove(autoEC0A20CD_var);
    }
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_ClearEnemy_Init () {
    libCOTF_gt_UT_ClearEnemy = TriggerCreate("libCOTF_gt_UT_ClearEnemy_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_ClearEnemy, c_playerAny, "-clearenemy", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Spawn Units
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_SpawnUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vAmount;
    int lv_vPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((StringWord(EventChatMessage(false), 2) != ""))) {
            return false;
        }

        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 3) == "")) {
        lv_vAmount = 1;
    }
    else {
        lv_vAmount = StringToInt(StringWord(EventChatMessage(false), 3));
    }
    if ((StringWord(EventChatMessage(false), 4) == "")) {
        lv_vPlayer = EventPlayer();
    }
    else {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 4));
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(lv_vAmount, UnitTypeFromString(StringWord(EventChatMessage(false), 2)), 0, lv_vPlayer, CameraGetTarget(EventPlayer()));
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_SpawnUnits_Init () {
    libCOTF_gt_UT_SpawnUnits = TriggerCreate("libCOTF_gt_UT_SpawnUnits_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_SpawnUnits, c_playerAny, "-spawn", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Teleport
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Teleport_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD40D5D82_g;
    int autoD40D5D82_u;
    unit autoD40D5D82_var;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD40D5D82_g = UnitGroupSelected(EventPlayer());
    autoD40D5D82_u = UnitGroupCount(autoD40D5D82_g, c_unitCountAll);
    for (;; autoD40D5D82_u -= 1) {
        autoD40D5D82_var = UnitGroupUnitFromEnd(autoD40D5D82_g, autoD40D5D82_u);
        if (autoD40D5D82_var == null) { break; }
        UnitSetPosition(autoD40D5D82_var, CameraGetTarget(EventPlayer()), true);
    }
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Teleport_Init () {
    libCOTF_gt_UT_Teleport = TriggerCreate("libCOTF_gt_UT_Teleport_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Teleport, c_playerAny, "-teleport", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Restart
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Restart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    RestartGame(PlayerGroupAll());
    libNtve_gf_RescueUnit2(UnitGroupSelected(EventPlayer()), lv_vPlayer, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Restart_Init () {
    libCOTF_gt_UT_Restart = TriggerCreate("libCOTF_gt_UT_Restart_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Restart, c_playerAny, "-restart", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Caster
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Caster_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_vPoint;

    // Automatic Variable Declarations
    const int auto52F0DCED_n = 200;
    int auto52F0DCED_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto52F0DCED_i = 1; auto52F0DCED_i <= auto52F0DCED_n; auto52F0DCED_i += 1) {
        lv_vPoint = RegionRandomPoint(RegionCircle(PlayerStartLocation(2), 8.0));
        if ((UnitCount(null, c_playerAny, RegionCircle(lv_vPoint, 7.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0)) {
            break;
        }

    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, UserDataGetGameLink("PlayerCommanders", libCOOC_gf_ActiveCommanderForPlayer(2), "GlobalCastUnit", 1), 0, 2, lv_vPoint);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_694265D1"));
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 2.0, Color(100.00, 0.00, 0.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Caster_Init () {
    libCOTF_gt_UT_Caster = TriggerCreate("libCOTF_gt_UT_Caster_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Caster, c_playerAny, "-caster", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Control
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Control_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto0A86AB71_g;
    int auto0A86AB71_var;
    playergroup auto3B6B8A99_g;
    int auto3B6B8A99_var;
    playergroup auto0AF02329_g;
    int auto0AF02329_var;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "other")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_DFA7418C"));
        auto0A86AB71_g = PlayerGroupAll();
        auto0A86AB71_var = -1;
        while (true) {
            auto0A86AB71_var = PlayerGroupNextPlayer(auto0A86AB71_g, auto0A86AB71_var);
            if (auto0A86AB71_var < 0) { break; }
            if ((libNtve_gf_PlayerIsEnemy(auto0A86AB71_var, EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == false)) {
                PlayerSetAlliance(auto0A86AB71_var, c_allianceIdControl, EventPlayer(), true);
            }

        }
    }
    else {
        if ((PlayerGetAlliance(3, c_allianceIdControl, EventPlayer()) == false)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_5B8F2F57"));
            auto0AF02329_g = PlayerGroupAll();
            auto0AF02329_var = -1;
            while (true) {
                auto0AF02329_var = PlayerGroupNextPlayer(auto0AF02329_g, auto0AF02329_var);
                if (auto0AF02329_var < 0) { break; }
                if ((libNtve_gf_PlayerIsEnemy(auto0AF02329_var, EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true)) {
                    PlayerSetAlliance(auto0AF02329_var, c_allianceIdControl, EventPlayer(), true);
                    if ((StringWord(EventChatMessage(false), 2) == "full")) {
                        PlayerSetAlliance(auto0AF02329_var, c_allianceIdSpend, EventPlayer(), true);
                        PlayerSetAlliance(auto0AF02329_var, c_allianceIdVision, EventPlayer(), true);
                        PlayerSetAlliance(auto0AF02329_var, c_allianceIdPower, EventPlayer(), true);
                    }

                }

            }
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_E7D09710"));
            auto3B6B8A99_g = PlayerGroupAll();
            auto3B6B8A99_var = -1;
            while (true) {
                auto3B6B8A99_var = PlayerGroupNextPlayer(auto3B6B8A99_g, auto3B6B8A99_var);
                if (auto3B6B8A99_var < 0) { break; }
                if ((libNtve_gf_PlayerIsEnemy(auto3B6B8A99_var, EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true)) {
                    PlayerSetAlliance(auto3B6B8A99_var, c_allianceIdControl, EventPlayer(), false);
                    PlayerSetAlliance(auto3B6B8A99_var, c_allianceIdSpend, EventPlayer(), false);
                    PlayerSetAlliance(auto3B6B8A99_var, c_allianceIdVision, EventPlayer(), false);
                    PlayerSetAlliance(auto3B6B8A99_var, c_allianceIdPower, EventPlayer(), false);
                }

            }
        }
    }
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Control_Init () {
    libCOTF_gt_UT_Control = TriggerCreate("libCOTF_gt_UT_Control_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Control, c_playerAny, "-control", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Ally
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Ally_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetAlliance(1, c_allianceIdControl, 2) == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_A345B057"));
        PlayerSetAlliance(2, c_allianceIdControl, 1, true);
        PlayerSetAlliance(1, c_allianceIdControl, 2, true);
        PlayerSetAlliance(2, c_allianceIdPushable, 1, true);
        PlayerSetAlliance(1, c_allianceIdPushable, 2, true);
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_DA7192E7"));
        PlayerSetAlliance(2, c_allianceIdControl, 1, false);
        PlayerSetAlliance(1, c_allianceIdControl, 2, false);
        PlayerSetAlliance(2, c_allianceIdPushable, 1, false);
        PlayerSetAlliance(1, c_allianceIdPushable, 2, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Ally_Init () {
    libCOTF_gt_UT_Ally = TriggerCreate("libCOTF_gt_UT_Ally_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Ally, c_playerAny, "-ally", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_PvP
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_PvP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_PlayerIsEnemy(1, 2, libNtve_ge_PlayerRelation_Enemy) == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_1ABD479E"));
        if (((PlayerGetAlliance(2, c_allianceIdControl, 1) == true) || (PlayerGetAlliance(3, c_allianceIdControl, EventPlayer()) == true))) {
            libNtve_gf_SetAlliance(1, 2, libNtve_ge_AllianceSetting_EnemyWithSharedVision);
            PlayerSetAlliance(2, c_allianceIdControl, 1, true);
            PlayerSetAlliance(1, c_allianceIdControl, 2, true);
            PlayerSetAlliance(2, c_allianceIdSpend, 1, true);
            PlayerSetAlliance(1, c_allianceIdSpend, 2, true);
        }
        else {
            libNtve_gf_SetAlliance(1, 2, libNtve_ge_AllianceSetting_Enemy);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_3DB311BD"));
        if ((PlayerGetAlliance(2, c_allianceIdControl, 1) == true)) {
            libNtve_gf_SetAlliance(1, 2, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
        }
        else {
            libNtve_gf_SetAlliance(1, 2, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_PvP_Init () {
    libCOTF_gt_UT_PvP = TriggerCreate("libCOTF_gt_UT_PvP_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_PvP, c_playerAny, "-pvp", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_MuleHeaven
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_MuleHeaven_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_n;

    // Automatic Variable Declarations
    int autoF368BD49_n;
    int autoF368BD49_i;

    // Variable Initialization
    lv_n = 50;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringToInt(StringWord(EventChatMessage(false), 2)) > 0)) {
        lv_n = StringToInt(StringWord(EventChatMessage(false), 2));
    }

    autoF368BD49_n = lv_n;
    for (autoF368BD49_i = 1; autoF368BD49_i <= autoF368BD49_n; autoF368BD49_i += 1) {
        UnitCreateEffectUnit(UnitGroupRandomUnit(UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive), "CalldownMULECreateUnit", UnitGroupRandomUnit(UnitGroup(null, c_playerAny, RegionCircle(CameraGetTarget(1), 10.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
    }
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_MuleHeaven_Init () {
    libCOTF_gt_UT_MuleHeaven = TriggerCreate("libCOTF_gt_UT_MuleHeaven_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_MuleHeaven, c_playerAny, "-muleheaven", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Solo
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Solo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto31EFD7BF_g;
    int auto31EFD7BF_u;
    unit auto31EFD7BF_var;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }

        if (!((libCOTF_gv_uT_SoloActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerStatus(libCOTF_gf_UT_OtherPlayer(EventPlayer())) == c_playerStatusActive)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_1B169BE1"));
        return true;
    }
    else if ((GameGetMissionTime() < 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_A2A1139A"));
        libCOTF_gv_uT_SoloActive = true;
        while (!((GameGetMissionTime() > 1))) {
            Wait(0.5, c_timeGame);
        }
    }
    else if (true) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_79490161"));
        libCOTF_gv_uT_SoloActive = true;
    }
    if ((libCOMU_gf_MutatorIsEnabled("MissileBarrage") == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_FCE6677F"));
        TriggerExecute(libCOMU_gt_CT_MissileBarrage, false, false);
    }

    TriggerEnable(libCOTF_gt_UT_Solo_LnL_CoA_Fix, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SoloDummyPreventDefeat", 0, libCOTF_gf_UT_OtherPlayer(EventPlayer()), PlayerStartLocation(EventPlayer()));
    PlayerSetAlliance(libCOTF_gf_UT_OtherPlayer(EventPlayer()), c_allianceIdControl, EventPlayer(), true);
    PlayerSetAlliance(libCOTF_gf_UT_OtherPlayer(EventPlayer()), c_allianceIdPushable, EventPlayer(), true);
    auto31EFD7BF_g = UnitGroup(null, libCOTF_gf_UT_OtherPlayer(EventPlayer()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto31EFD7BF_u = UnitGroupCount(auto31EFD7BF_g, c_unitCountAll);
    for (;; auto31EFD7BF_u -= 1) {
        auto31EFD7BF_var = UnitGroupUnitFromEnd(auto31EFD7BF_g, auto31EFD7BF_u);
        if (auto31EFD7BF_var == null) { break; }
        if ((UnitGetType(auto31EFD7BF_var) != "SoloDummy") && (UnitGetType(auto31EFD7BF_var) != "SoloDummyPreventDefeat") && (UnitGetType(auto31EFD7BF_var) != "CODFlatbedTruck") && (UnitGetType(auto31EFD7BF_var) != "CODResearchFacility")) {
            UnitRemove(auto31EFD7BF_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Solo_Init () {
    libCOTF_gt_UT_Solo = TriggerCreate("libCOTF_gt_UT_Solo_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Solo, c_playerAny, "-solo", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Solo_LnL_CoA_Fix
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Solo_LnL_CoA_Fix_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vPOI_UG;
    unitgroup lv_vDummies;
    fixed lv_vPlayerDistance;
    unit lv_vIterUnit;
    bool lv_vStranded;

    // Automatic Variable Declarations
    unitgroup auto0D50F1F9_g;
    int auto0D50F1F9_u;
    unit auto0D50F1F9_var;
    unitgroup auto27022542_g;
    int auto27022542_u;
    unit auto27022542_var;
    unitgroup auto6695E465_g;
    int auto6695E465_u;

    // Variable Initialization
    lv_vPOI_UG = UnitGroupEmpty();
    lv_vDummies = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(lv_vPOI_UG, UnitGroup("CelestialLock", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_vPOI_UG, UnitGroup("PitAlarak", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto0D50F1F9_g = lv_vPOI_UG;
    auto0D50F1F9_u = UnitGroupCount(auto0D50F1F9_g, c_unitCountAll);
    for (;; auto0D50F1F9_u -= 1) {
        auto0D50F1F9_var = UnitGroupUnitFromEnd(auto0D50F1F9_g, auto0D50F1F9_u);
        if (auto0D50F1F9_var == null) { break; }
        if ((UnitGetType(auto0D50F1F9_var) == "PitAlarak")) {
            lv_vPlayerDistance = 12.0;
        }
        else {
            lv_vPlayerDistance = 6.0;
        }
        lv_vDummies = UnitGroup("SoloDummy", 2, RegionCircle(UnitGetPosition(auto0D50F1F9_var), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(UnitGroup(null, 1, RegionCircle(UnitGetPosition(auto0D50F1F9_var), lv_vPlayerDistance), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitGroupCount(lv_vDummies, c_unitCountAlive) == 0)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SoloDummy", 0, 2, UnitGetPosition(auto0D50F1F9_var));
            libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
        }
        else if ((UnitGroupCount(UnitGroup(null, 1, RegionCircle(UnitGetPosition(auto0D50F1F9_var), lv_vPlayerDistance), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(lv_vDummies, c_unitCountAlive) > 0)) {
            UnitRemove(UnitGroupRandomUnit(UnitGroup("SoloDummy", 2, RegionCircle(UnitGetPosition(auto0D50F1F9_var), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
        }
    }
    auto27022542_g = UnitGroup("SoloDummy", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), 0), 0);
    auto27022542_u = UnitGroupCount(auto27022542_g, c_unitCountAll);
    for (;; auto27022542_u -= 1) {
        auto27022542_var = UnitGroupUnitFromEnd(auto27022542_g, auto27022542_u);
        if (auto27022542_var == null) { break; }
        lv_vStranded = true;
        auto6695E465_g = lv_vPOI_UG;
        auto6695E465_u = UnitGroupCount(auto6695E465_g, c_unitCountAll);
        for (;; auto6695E465_u -= 1) {
            lv_vIterUnit = UnitGroupUnitFromEnd(auto6695E465_g, auto6695E465_u);
            if (lv_vIterUnit == null) { break; }
            if ((DistanceBetweenPoints(UnitGetPosition(auto27022542_var), UnitGetPosition(lv_vIterUnit)) < 7.0)) {
                lv_vStranded = false;
                break;
            }

        }
        if ((lv_vStranded == true)) {
            UnitRemove(auto27022542_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Solo_LnL_CoA_Fix_Init () {
    libCOTF_gt_UT_Solo_LnL_CoA_Fix = TriggerCreate("libCOTF_gt_UT_Solo_LnL_CoA_Fix_Func");
    TriggerEnable(libCOTF_gt_UT_Solo_LnL_CoA_Fix, false);
    TriggerAddEventTimePeriodic(libCOTF_gt_UT_Solo_LnL_CoA_Fix, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Toggle Eco
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_ToggleEco_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOTF_gv_uT_EconomyTest == false)) {
        libCOTF_gv_uT_EconomyTest = true;
        TriggerEnable(libCOTF_gt_UT_WorkerSaturation, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_11E6F6BA"));
    }
    else {
        libCOTF_gv_uT_EconomyTest = false;
        TriggerEnable(libCOTF_gt_UT_WorkerSaturation, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_BB7AC333"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_ToggleEco_Init () {
    libCOTF_gt_UT_ToggleEco = TriggerCreate("libCOTF_gt_UT_ToggleEco_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_ToggleEco, c_playerAny, "-eco", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Economy Value
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_EconomyValue_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_mineral_count;
    fixed lv_gas_count;
    fixed lv_energy_count;

    // Automatic Variable Declarations
    unitgroup autoB10AA902_g;
    int autoB10AA902_u;
    unit autoB10AA902_var;
    string autoF4D2FA19_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOTF_gv_uT_EconomyTest == true))) {
            return false;
        }

        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB10AA902_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    autoB10AA902_u = UnitGroupCount(autoB10AA902_g, c_unitCountAll);
    for (;; autoB10AA902_u -= 1) {
        autoB10AA902_var = UnitGroupUnitFromEnd(autoB10AA902_g, autoB10AA902_u);
        if (autoB10AA902_var == null) { break; }
        autoF4D2FA19_val = UnitGetType(autoB10AA902_var);
        if (autoF4D2FA19_val == "Zergling") {
            lv_mineral_count = (lv_mineral_count+14.6667);
        }
        else if (autoF4D2FA19_val == "Baneling") {
            lv_mineral_count = (lv_mineral_count+36.6667);
            lv_gas_count = (lv_gas_count+14.0);
        }
        else if (autoF4D2FA19_val == "Drone") {
            lv_mineral_count = (lv_mineral_count+37.5);
        }
        else if (autoF4D2FA19_val == "GhostAcademyNova") {
        }
        else if (autoF4D2FA19_val == "OrbitalCommand") {
            lv_mineral_count = (lv_mineral_count+550);
            lv_energy_count = (lv_energy_count+UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent));
        }
        else {
            lv_mineral_count = (lv_mineral_count+IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(autoB10AA902_var), "CostResource[" + IntToString(0) + "]", c_playerAny)));
            lv_gas_count = (lv_gas_count+IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(autoB10AA902_var), "CostResource[" + IntToString(1) + "]", c_playerAny)));
        }
    }
    lv_mineral_count = (lv_mineral_count+lv_energy_count*4.43+PlayerGetPropertyFixed(1, c_playerPropMinerals));
    lv_gas_count = (lv_gas_count+PlayerGetPropertyFixed(1, c_playerPropVespene));
    TextExpressionSetToken("Param/Expression/lib_COTF_26114042", "A", IntToText(FixedToInt(lv_mineral_count)));
    TextExpressionSetToken("Param/Expression/lib_COTF_26114042", "B", IntToText(FixedToInt(lv_gas_count)));
    TextExpressionSetToken("Param/Expression/lib_COTF_26114042", "C", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(GameGetMissionTime())));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_26114042"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_EconomyValue_Init () {
    libCOTF_gt_UT_EconomyValue = TriggerCreate("libCOTF_gt_UT_EconomyValue_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_EconomyValue, c_playerAny, "-val", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Worker Saturation
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_WorkerSaturation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_worker_count;
    int lv_saturation_count;

    // Automatic Variable Declarations
    unitgroup auto3576EEE0_g;
    int auto3576EEE0_u;
    unit auto3576EEE0_var;
    unitgroup auto41A61094_g;
    int auto41A61094_u;
    unit auto41A61094_var;

    // Variable Initialization
    lv_saturation_count = 48;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gv_uT_EconomyTest == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitCreatedUnit()) == "SCV") || (UnitGetType(EventUnitCreatedUnit()) == "Probe") || (UnitGetType(EventUnitCreatedUnit()) == "Drone") || (UnitGetType(EventUnitCreatedUnit()) == "SISCV") || (UnitGetType(EventUnitCreatedUnit()) == "DehakaDrone") || (UnitGetType(EventUnitCreatedUnit()) == "HHSCV")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3576EEE0_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto3576EEE0_u = UnitGroupCount(auto3576EEE0_g, c_unitCountAll);
    for (;; auto3576EEE0_u -= 1) {
        auto3576EEE0_var = UnitGroupUnitFromEnd(auto3576EEE0_g, auto3576EEE0_u);
        if (auto3576EEE0_var == null) { break; }
        if (((UnitGetType(auto3576EEE0_var) == "AutomatedRefinery") || (UnitGetType(auto3576EEE0_var) == "AutomatedAssimilator"))) {
            lv_saturation_count = 36;
        }

    }
    auto41A61094_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto41A61094_u = UnitGroupCount(auto41A61094_g, c_unitCountAll);
    for (;; auto41A61094_u -= 1) {
        auto41A61094_var = UnitGroupUnitFromEnd(auto41A61094_g, auto41A61094_u);
        if (auto41A61094_var == null) { break; }
        if (((UnitGetType(auto41A61094_var) == "SCV") || (UnitGetType(auto41A61094_var) == "Probe") || (UnitGetType(auto41A61094_var) == "Drone") || (UnitGetType(auto41A61094_var) == "SISCV") || (UnitGetType(auto41A61094_var) == "DehakaDrone") || (UnitGetType(auto41A61094_var) == "HHSCV"))) {
            lv_worker_count = (lv_worker_count+1);
            if ((lv_worker_count >= lv_saturation_count)) {
                TextExpressionSetToken("Param/Expression/lib_COTF_6A6BD4AA", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(GameGetMissionTime())));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_6A6BD4AA"));
                TriggerExecute(libCOTF_gt_UT_EconomyValue, true, false);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_4AFD511D"));
                SoundPlayForPlayer(SoundLink("Alert_UniObjectiveCompleted", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                TriggerEnable(TriggerGetCurrent(), false);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_WorkerSaturation_Init () {
    libCOTF_gt_UT_WorkerSaturation = TriggerCreate("libCOTF_gt_UT_WorkerSaturation_Func");
    TriggerEnable(libCOTF_gt_UT_WorkerSaturation, false);
    TriggerAddEventUnitCreated(libCOTF_gt_UT_WorkerSaturation, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastConstruction
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_FastConstruction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gv_uT_FastBuildCheat == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnitProgressUnit()) == 1) || (UnitGetOwner(EventUnitProgressUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnitProgressUnit(), 1, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_FastConstruction_Init () {
    libCOTF_gt_UT_FastConstruction = TriggerCreate("libCOTF_gt_UT_FastConstruction_Func");
    TriggerEnable(libCOTF_gt_UT_FastConstruction, false);
    TriggerAddEventUnitConstructProgress(libCOTF_gt_UT_FastConstruction, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastTrain
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_FastTrain_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gv_uT_FastBuildCheat == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 99);
    UnitSetProgressComplete(EventUnit(), 2, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_FastTrain_Init () {
    libCOTF_gt_UT_FastTrain = TriggerCreate("libCOTF_gt_UT_FastTrain_Func");
    TriggerEnable(libCOTF_gt_UT_FastTrain, false);
    TriggerAddEventUnitTrainProgress(libCOTF_gt_UT_FastTrain, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastResearch
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_FastResearch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gv_uT_FastBuildCheat == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_FastResearch_Init () {
    libCOTF_gt_UT_FastResearch = TriggerCreate("libCOTF_gt_UT_FastResearch_Func");
    TriggerEnable(libCOTF_gt_UT_FastResearch, false);
    TriggerAddEventUnitResearchProgress(libCOTF_gt_UT_FastResearch, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastArrm
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_FastArrm_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gv_uT_FastBuildCheat == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_FastArrm_Init () {
    libCOTF_gt_UT_FastArrm = TriggerCreate("libCOTF_gt_UT_FastArrm_Func");
    TriggerEnable(libCOTF_gt_UT_FastArrm, false);
    TriggerAddEventUnitArmMagazineProgress(libCOTF_gt_UT_FastArrm, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastRevive
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_FastRevive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gv_uT_FastBuildCheat == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_FastRevive_Init () {
    libCOTF_gt_UT_FastRevive = TriggerCreate("libCOTF_gt_UT_FastRevive_Func");
    TriggerEnable(libCOTF_gt_UT_FastRevive, false);
    TriggerAddEventUnitReviveProgress(libCOTF_gt_UT_FastRevive, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastBuild
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_FastBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOTF_gv_uT_FastBuildCheat == false)) {
        libCOTF_gv_uT_FastBuildCheat = true;
        TechTreeUpgradeAddLevel(1, "FastBuild", 1);
        TechTreeUpgradeAddLevel(2, "FastBuild", 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_3586697E"));
        TriggerEnable(libCOTF_gt_UT_FastArrm, true);
        TriggerEnable(libCOTF_gt_UT_FastConstruction, true);
        TriggerEnable(libCOTF_gt_UT_FastResearch, true);
        TriggerEnable(libCOTF_gt_UT_FastRevive, true);
        TriggerEnable(libCOTF_gt_UT_FastTrain, true);
    }
    else {
        libCOTF_gv_uT_FastBuildCheat = false;
        libNtve_gf_SetUpgradeLevelForPlayer(1, "FastBuild", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(2, "FastBuild", 0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_01DEB3EB"));
        TriggerEnable(libCOTF_gt_UT_FastArrm, false);
        TriggerEnable(libCOTF_gt_UT_FastConstruction, false);
        TriggerEnable(libCOTF_gt_UT_FastResearch, false);
        TriggerEnable(libCOTF_gt_UT_FastRevive, false);
        TriggerEnable(libCOTF_gt_UT_FastTrain, false);
    }
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_FastBuild_Init () {
    libCOTF_gt_UT_FastBuild = TriggerCreate("libCOTF_gt_UT_FastBuild_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_FastBuild, c_playerAny, "-fastbuild", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_encomps
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_encomps_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_offsetBase = 50;
    int lv_offsetX;
    int lv_offsetY;
    const int lv_buttonSize = 54;
    int lv_iconSize;
    int lv_compositionCounter;
    int lv_iconCounter;
    string lv_enemyComp;
    color lv_color1;
    color lv_color2;
    color lv_color3;
    playergroup lv_vPG;

    // Automatic Variable Declarations
    fixed autoD4F3AC20_at;
    string auto1906A2E4_userType;
    int auto1906A2E4_i;
    const int auto201C740D_ae = 9;
    const int auto201C740D_ai = 1;
    int auto59DD747C_val;
    int auto38B2E54E_val;

    // Variable Initialization
    lv_iconSize = (lv_buttonSize-4);
    lv_enemyComp = "BioMechStar";
    lv_color1 = Color(1.57, 55.69, 100.00);
    lv_color2 = Color(0.00, 80.39, 22.75);
    lv_color3 = Color(90.59, 33.73, 12.16);
    lv_vPG = PlayerGroupSingle(EventPlayer());

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameGetMissionTime() < 2.0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        autoD4F3AC20_at = 0;
        while (!((GameGetMissionTime() >= 2.0)) && autoD4F3AC20_at <= 5.0) {
            Wait(0.5, c_timeGame);
            autoD4F3AC20_at = autoD4F3AC20_at + 0.5;
        }
        TriggerEnable(TriggerGetCurrent(), true);
    }

    if ((DialogIsVisible(libCOTF_gv_uT_encompsDialogs, EventPlayer()) == true)) {
        DialogSetVisible(libCOTF_gv_uT_encompsDialogs, lv_vPG, false);
        libNtve_gf_HideGameUI(true, lv_vPG);
        return true;
    }

    if ((libCOTF_gv_uT_encompsDialogs != c_invalidDialogId)) {
        DialogSetVisible(libCOTF_gv_uT_encompsDialogs, lv_vPG, true);
        libNtve_gf_HideGameUI(false, lv_vPG);
        return true;
    }

    libNtve_gf_HideGameUI(false, lv_vPG);
    DialogCreate(1920, 1120, c_anchorCenter, 0, -10, false);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), lv_vPG, true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libCOTF_gv_uT_encompsDialogs = DialogLastCreated();
    auto1906A2E4_userType = "CoopEnemyUnitsFormation";
    auto1906A2E4_i = 1;
    for ( ; auto1906A2E4_i <= UserDataInstanceCount(auto1906A2E4_userType) ; auto1906A2E4_i += 1 ) {
        lv_enemyComp = UserDataInstance(auto1906A2E4_userType, auto1906A2E4_i);
        lv_iconCounter = 1;
        for ( ; ( (auto201C740D_ai >= 0 && lv_iconCounter <= auto201C740D_ae) || (auto201C740D_ai < 0 && lv_iconCounter >= auto201C740D_ae) ) ; lv_iconCounter += auto201C740D_ai ) {
            if ((UserDataGetInt("CoopEnemyUnitsFormation", lv_enemyComp, "Units", lv_iconCounter) >= 1)) {
                lv_offsetX = (lv_offsetBase+lv_buttonSize*(lv_iconCounter - 1) - 10);
                lv_offsetY = (lv_offsetBase+lv_buttonSize*lv_compositionCounter);
                auto59DD747C_val = UserDataGetInt("CoopEnemyUnitsFormation", lv_enemyComp, "Race", 1);
                if (auto59DD747C_val == 1) {
                    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeButton, "UT_Button/StandardGlueButtonP");
                }
                else if (auto59DD747C_val == 2) {
                    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeButton, "UT_Button/StandardGlueButtonT");
                }
                else if (auto59DD747C_val == 3) {
                    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeButton, "UT_Button/StandardGlueButtonZ");
                }
                else {
                }
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_buttonSize, lv_buttonSize);
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lv_offsetX, lv_offsetY);
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 33.0);
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_iconSize, lv_iconSize, c_anchorTop, lv_offsetX, lv_offsetY, StringToText(""), UserDataGetImagePath("CoopEnemyUnits", UserDataInstance("CoopEnemyUnits", UserDataGetInt("CoopEnemyUnitsFormation", lv_enemyComp, "Units", lv_iconCounter)), "Unit", 1), c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 700, 50, c_anchorTop, -350, lv_offsetY, UserDataGetText("CoopAICommanders", UserDataGetUserInstance("CoopEnemyUnitsFormation", lv_enemyComp, "Comp", 1), "Name", 1), ColorWithAlpha(0,0,0,0), false, 2.0);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "EnemyCompStyle", PlayerGroupAll());
                auto38B2E54E_val = UserDataGetInt("CoopEnemyUnitsFormation", lv_enemyComp, "Race", 1);
                if (auto38B2E54E_val == 1) {
                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_color1, PlayerGroupAll());
                }
                else if (auto38B2E54E_val == 2) {
                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_color2, PlayerGroupAll());
                }
                else if (auto38B2E54E_val == 3) {
                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_color3, PlayerGroupAll());
                }
                else {
                }
            }
            else {
                break;
            }
        }
        lv_compositionCounter = (lv_compositionCounter+1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_encomps_Init () {
    libCOTF_gt_UT_encomps = TriggerCreate("libCOTF_gt_UT_encomps_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_encomps, c_playerAny, "-encomps", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Replace
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Replace_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vLife;
    unitgroup lv_vUG;
    int lv_vB;

    // Automatic Variable Declarations
    unitgroup auto741046AA_g;
    int auto741046AA_u;
    unit auto741046AA_var;

    // Variable Initialization
    lv_vUG = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "")) {
        return true;
    }

    auto741046AA_g = UnitGroup(UnitTypeFromString(StringWord(EventChatMessage(false), 2)), c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto741046AA_u = UnitGroupCount(auto741046AA_g, c_unitCountAll);
    for (;; auto741046AA_u -= 1) {
        auto741046AA_var = UnitGroupUnitFromEnd(auto741046AA_g, auto741046AA_u);
        if (auto741046AA_var == null) { break; }
        if ((UnitGetType(auto741046AA_var) != "SoloDummy") && (UnitGetType(auto741046AA_var) != "SoloDummyPreventDefeat") && (auto741046AA_var != libCOTF_gf_CM_PlayerGetGlobalCaster(1)) && (auto741046AA_var != libCOTF_gf_CM_PlayerGetGlobalCaster(2)) && (UnitGroupHasUnit(lv_vUG, auto741046AA_var) == false)) {
            UnitIssueOrder(auto741046AA_var, Order(AbilityCommand("que1", 1)), c_orderQueueReplace);
            UnitCreate(1, UnitGetType(auto741046AA_var), c_unitCreateIgnorePlacement, UnitGetOwner(auto741046AA_var), UnitGetPosition(auto741046AA_var), UnitGetFacing(auto741046AA_var));
            UnitGroupAdd(lv_vUG, UnitLastCreated());
            libCOTF_gf_UT_CopyProperties(auto741046AA_var, UnitLastCreated());
            UnitRemove(auto741046AA_var);
            lv_vB += 1;
        }

    }
    if ((lv_vB == 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_1F0B124E"));
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_COTF_EC0420BB", "C", IntToText(lv_vB));
        TextExpressionSetToken("Param/Expression/lib_COTF_EC0420BB", "A", UnitTypeGetName((StringWord(EventChatMessage(false), 2))));
        TextExpressionSetToken("Param/Expression/lib_COTF_EC0420BB", "B", StringToText(StringWord(EventChatMessage(false), 2)));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_EC0420BB"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Replace_Init () {
    libCOTF_gt_UT_Replace = TriggerCreate("libCOTF_gt_UT_Replace_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Replace, c_playerAny, "-replace", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_VoidRiftDebug
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_VoidRiftDebug_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vTime;

    // Automatic Variable Declarations
    unitgroup auto1603CEF4_g;
    int auto1603CEF4_u;
    unit auto1603CEF4_var;
    const int autoC3EF723E_n = 250;
    int autoC3EF723E_i;
    const int autoDA506354_n = 10;
    int autoDA506354_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "clear")) {
        auto1603CEF4_g = UnitGroup("ShapeSphere", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto1603CEF4_u = UnitGroupCount(auto1603CEF4_g, c_unitCountAll);
        for (;; auto1603CEF4_u -= 1) {
            auto1603CEF4_var = UnitGroupUnitFromEnd(auto1603CEF4_g, auto1603CEF4_u);
            if (auto1603CEF4_var == null) { break; }
            UnitRemove(auto1603CEF4_var);
        }
        TriggerStop(TriggerGetCurrent());
        return true;
    }

    lv_vTime = StringToFixed(StringWord(EventChatMessage(false), 2));
    if (((lv_vTime >= 1) && (lv_vTime <= 30))) {
        lv_vTime = StringToFixed(StringWord(EventChatMessage(false), 2));
    }
    else {
        lv_vTime = 15.0;
    }
    TextExpressionSetToken("Param/Expression/lib_COTF_A289D738", "A", FixedToText(lv_vTime, 0));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_A289D738"));
    for (autoC3EF723E_i = 1; autoC3EF723E_i <= autoC3EF723E_n; autoC3EF723E_i += 1) {
        for (autoDA506354_i = 1; autoDA506354_i <= autoDA506354_n; autoDA506354_i += 1) {
            libCOTF_gf_UT_VoidRiftDebugSpawn(1, lv_vTime);
            libCOTF_gf_UT_VoidRiftDebugSpawn(2, lv_vTime);
        }
        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_VoidRiftDebug_Init () {
    libCOTF_gt_UT_VoidRiftDebug = TriggerCreate("libCOTF_gt_UT_VoidRiftDebug_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_VoidRiftDebug, c_playerAny, "-voidrift", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_UnitInfo
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_UnitInfo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto70F86495_g;
    int auto70F86495_u;
    unit auto70F86495_var;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libCOTF_gt_UT_UnitInfoUpdate) == true)) {
        TriggerEnable(libCOTF_gt_UT_UnitInfoUpdate, false);
        auto70F86495_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto70F86495_u = UnitGroupCount(auto70F86495_g, c_unitCountAll);
        for (;; auto70F86495_u -= 1) {
            auto70F86495_var = UnitGroupUnitFromEnd(auto70F86495_g, auto70F86495_u);
            if (auto70F86495_var == null) { break; }
            libCOTF_gf_UT_RemoveUnitInfo(auto70F86495_var);
        }
    }
    else {
        TriggerEnable(libCOTF_gt_UT_UnitInfoUpdate, true);
        libCOMU_gf_CT_ToggleTrigger(libCOMU_ge_CT_TriggerType_UnitDeath, true);
        libCOMU_gf_CT_ToggleTrigger(libCOMU_ge_CT_TriggerType_UnitRemoved, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_UnitInfo_Init () {
    libCOTF_gt_UT_UnitInfo = TriggerCreate("libCOTF_gt_UT_UnitInfo_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_UnitInfo, c_playerAny, "-unitinfo", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_UnitInfoUpdate
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_UnitInfoUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF988A5F7_g;
    int autoF988A5F7_u;
    unit autoF988A5F7_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoF988A5F7_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoF988A5F7_u = UnitGroupCount(autoF988A5F7_g, c_unitCountAll);
    for (;; autoF988A5F7_u -= 1) {
        autoF988A5F7_var = UnitGroupUnitFromEnd(autoF988A5F7_g, autoF988A5F7_u);
        if (autoF988A5F7_var == null) { break; }
        libCOTF_gf_UT_UpdateUnitInfo(autoF988A5F7_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_UnitInfoUpdate_Init () {
    libCOTF_gt_UT_UnitInfoUpdate = TriggerCreate("libCOTF_gt_UT_UnitInfoUpdate_Func");
    TriggerEnable(libCOTF_gt_UT_UnitInfoUpdate, false);
    TriggerAddEventTimePeriodic(libCOTF_gt_UT_UnitInfoUpdate, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Startswitch
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_Startswitch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDE5E4AD3_g;
    int autoDE5E4AD3_u;
    unit autoDE5E4AD3_var;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameGetMissionTime() >= 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_630BB146"));
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_C90BB3A8"));
        autoDE5E4AD3_g = UnitGroup("ACHeroSpawnPlacement", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        autoDE5E4AD3_u = UnitGroupCount(autoDE5E4AD3_g, c_unitCountAll);
        for (;; autoDE5E4AD3_u -= 1) {
            autoDE5E4AD3_var = UnitGroupUnitFromEnd(autoDE5E4AD3_g, autoDE5E4AD3_u);
            if (autoDE5E4AD3_var == null) { break; }
            UnitSetOwner(autoDE5E4AD3_var, libCOTF_gf_UT_OtherPlayer(UnitGetOwner(autoDE5E4AD3_var)), true);
        }
        TriggerEnable(libCOTF_gt_StartswitchMoveTownHall, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_Startswitch_Init () {
    libCOTF_gt_Startswitch = TriggerCreate("libCOTF_gt_Startswitch_Func");
    TriggerAddEventChatMessage(libCOTF_gt_Startswitch, c_playerAny, "-startswitch", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Startswitch - MoveTownHall
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_StartswitchMoveTownHall_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unitgroup[3] lv_vUG;
    point lv_vResourceCenter;
    int lv_vPlayer;
    point lv_vPoint;
    fixed lv_vIter;
    const int lv_vNewPolarityPlayer = 2;
    const fixed lv_vCreepRadius = 12.0;

    // Automatic Variable Declarations
    const int auto59D22425_ae = 2;
    const int auto59D22425_ai = 1;
    unitgroup autoF0B4DB33_g;
    int autoF0B4DB33_u;
    unit autoF0B4DB33_var;
    const int auto8651E8ED_ae = 2;
    const int auto8651E8ED_ai = 1;
    unitgroup auto7B1566A7_g;
    int auto7B1566A7_u;
    unit auto7B1566A7_var;
    string autoE78EE24B_val;

    // Variable Initialization
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_vUG[init_i] = UnitGroupEmpty();
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vPlayer = 1;
    for ( ; ( (auto59D22425_ai >= 0 && lv_vPlayer <= auto59D22425_ae) || (auto59D22425_ai < 0 && lv_vPlayer >= auto59D22425_ae) ) ; lv_vPlayer += auto59D22425_ai ) {
        lv_vUG[lv_vPlayer] = UnitGroup(null, lv_vPlayer, RegionCircle(PlayerStartLocation(lv_vPlayer), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_vResourceCenter = UnitGroupCenterOfGroup(UnitGroup(null, c_playerAny, RegionCircle(PlayerStartLocation(libCOTF_gf_UT_OtherPlayer(lv_vPlayer)), 10.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        lv_vIter = 0.0;
        CameraPan(lv_vPlayer, PlayerStartLocation(libCOTF_gf_UT_OtherPlayer(lv_vPlayer)), 0.0, -1, 10.0, false);
        autoF0B4DB33_g = lv_vUG[lv_vPlayer];
        autoF0B4DB33_u = UnitGroupCount(autoF0B4DB33_g, c_unitCountAll);
        for (;; autoF0B4DB33_u -= 1) {
            autoF0B4DB33_var = UnitGroupUnitFromEnd(autoF0B4DB33_g, autoF0B4DB33_u);
            if (autoF0B4DB33_var == null) { break; }
            if ((UnitTypeTestFlag(UnitGetType(autoF0B4DB33_var), c_unitFlagWorker) == false)) {
                UnitSetPosition(autoF0B4DB33_var, PointWithOffsetPolar(PlayerStartLocation(libCOTF_gf_UT_OtherPlayer(lv_vPlayer)), DistanceBetweenPoints(UnitGetPosition(autoF0B4DB33_var), PlayerStartLocation(lv_vPlayer)), AngleBetweenPoints(UnitGetPosition(autoF0B4DB33_var), PlayerStartLocation(lv_vPlayer))), false);
                CreepModify(lv_vPoint, lv_vCreepRadius, false, false);
            }
            else {
                lv_vPoint = PointWithOffsetPolar(PlayerStartLocation(libCOTF_gf_UT_OtherPlayer(lv_vPlayer)), 3.0, (AngleBetweenPoints(PlayerStartLocation(libCOTF_gf_UT_OtherPlayer(lv_vPlayer)), lv_vResourceCenter) - 84 + 14*lv_vIter));
                UnitSetPosition(autoF0B4DB33_var, lv_vPoint, false);
                lv_vIter += 1.0;
            }
        }
    }
    lv_vPlayer = 1;
    for ( ; ( (auto8651E8ED_ai >= 0 && lv_vPlayer <= auto8651E8ED_ae) || (auto8651E8ED_ai < 0 && lv_vPlayer >= auto8651E8ED_ae) ) ; lv_vPlayer += auto8651E8ED_ai ) {
        auto7B1566A7_g = lv_vUG[lv_vPlayer];
        auto7B1566A7_u = UnitGroupCount(auto7B1566A7_g, c_unitCountAll);
        for (;; auto7B1566A7_u -= 1) {
            auto7B1566A7_var = UnitGroupUnitFromEnd(auto7B1566A7_g, auto7B1566A7_u);
            if (auto7B1566A7_var == null) { break; }
            if ((UnitGetPropertyFixed(auto7B1566A7_var, c_unitPropLife, c_unitPropCurrent) >= 1000.0)) {
                autoE78EE24B_val = UnitGetType(auto7B1566A7_var);
                if (autoE78EE24B_val == "Hatchery") {
                    CreepModify(UnitGetPosition(auto7B1566A7_var), lv_vCreepRadius, true, false);
                }
                else if (autoE78EE24B_val == "SICommandCenter") {
                    CreepModify(UnitGetPosition(auto7B1566A7_var), 14.0, true, false);
                }
                else {
                    libCOTF_gf_StartswitchCreepFix(UnitGetPosition(auto7B1566A7_var), lv_vCreepRadius);
                }
            }

        }
    }
    Wait(0.01, c_timeGame);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), 1);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), 2);
    libCOMU_gv_cT_PolarityPlayerTrains = lv_vNewPolarityPlayer;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_StartswitchMoveTownHall_Init () {
    libCOTF_gt_StartswitchMoveTownHall = TriggerCreate("libCOTF_gt_StartswitchMoveTownHall_Func");
    TriggerEnable(libCOTF_gt_StartswitchMoveTownHall, false);
    libCOUI_gf_CU_CommanderClosed(libCOTF_gt_StartswitchMoveTownHall);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_UI
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_UI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_vShowHide;
    playergroup lv_vPGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vShowHide = true;
    lv_vPGroup = PlayerGroupSingle(EventPlayer());

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libCOTF_gt_UT_UI_CtrlH) == false)) {
        TriggerEnable(libCOTF_gt_UT_UI_CtrlH, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_936AF369"));
    }
    else {
        TriggerEnable(libCOTF_gt_UT_UI_CtrlH, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_D039E04D"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_UI_Init () {
    libCOTF_gt_UT_UI = TriggerCreate("libCOTF_gt_UT_UI_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_UI, c_playerAny, "-ui", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_UI_Ctrl+H
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_UI_CtrlH_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_vShowHide;
    playergroup lv_vPGroup;

    // Automatic Variable Declarations
    bool auto86345304_val;

    // Variable Initialization
    lv_vShowHide = true;
    lv_vPGroup = PlayerGroupSingle(EventPlayer());

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto86345304_val = PlayerGroupHasPlayer(libCOTF_gv_uT_UI_Hidden, EventPlayer());
    if (auto86345304_val == false) {
        PlayerGroupAdd(libCOTF_gv_uT_UI_Hidden, EventPlayer());
        libCOUI_gf_CU_GPVisibilitySet(false, EventPlayer(), 1.0);
        DialogSetVisible(libCOTF_gv_aF_TopBarIconsDialog, lv_vPGroup, false);
        DialogControlSetVisible(libCOUI_gv_cU_GPPanel[EventPlayer()], lv_vPGroup, false);
        lv_vShowHide = false;
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer");
        DialogControlSetPosition(DialogControlLastCreated(), lv_vPGroup, c_anchorTopLeft, 0, -3000);
    }
    else if (auto86345304_val == true) {
        PlayerGroupRemove(libCOTF_gv_uT_UI_Hidden, EventPlayer());
        libCOUI_gf_CU_GPVisibilitySet(true, EventPlayer(), 1.0);
        Wait(1.0, c_timeReal);
        DialogSetVisible(libCOTF_gv_aF_TopBarIconsDialog, lv_vPGroup, true);
        DialogControlSetVisible(libCOUI_gv_cU_GPPanel[EventPlayer()], lv_vPGroup, true);
        lv_vShowHide = true;
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer");
        DialogControlSetPosition(DialogControlLastCreated(), lv_vPGroup, c_anchorTopLeft, 0, 0);
    }
    else {
    }
    UISetFrameVisible(lv_vPGroup, c_syncFrameTypeConsolePanel, lv_vShowHide);
    UISetFrameVisible(lv_vPGroup, c_syncFrameTypeSupply, lv_vShowHide);
    UISetFrameVisible(lv_vPGroup, c_syncFrameTypeMenuBar, lv_vShowHide);
    UISetFrameVisible(lv_vPGroup, c_syncFrameTypeResourcePanel, lv_vShowHide);
    UISetFrameVisible(lv_vPGroup, c_syncFrameTypeObjectivePanel, lv_vShowHide);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_UI_CtrlH_Init () {
    libCOTF_gt_UT_UI_CtrlH = TriggerCreate("libCOTF_gt_UT_UI_CtrlH_Func");
    TriggerEnable(libCOTF_gt_UT_UI_CtrlH, false);
    TriggerAddEventKeyPressed(libCOTF_gt_UT_UI_CtrlH, c_playerAny, c_keyH, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ButtonMonitor
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_ButtonMonitor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(libCOTF_gv_uT_ButtonUsagePlayerGroup, EventPlayer()) == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_355ADEB7"));
        PlayerGroupRemove(libCOTF_gv_uT_ButtonUsagePlayerGroup, EventPlayer());
        if ((PlayerGroupCount(libCOTF_gv_uT_ButtonUsagePlayerGroup) == 0)) {
            TriggerEnable(libCOTF_gt_UT_ButtonUsage, false);
        }

    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_F23F5910"));
        PlayerGroupAdd(libCOTF_gv_uT_ButtonUsagePlayerGroup, EventPlayer());
        TriggerEnable(libCOTF_gt_UT_ButtonUsage, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_ButtonMonitor_Init () {
    libCOTF_gt_UT_ButtonMonitor = TriggerCreate("libCOTF_gt_UT_ButtonMonitor_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_ButtonMonitor, c_playerAny, "-buttons", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ButtonUsage
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_ButtonUsage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vButton;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vButton = EventButtonPressed();

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_COTF_242A1570", "A", StringToText((lv_vButton)));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_242A1570"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_ButtonUsage_Init () {
    libCOTF_gt_UT_ButtonUsage = TriggerCreate("libCOTF_gt_UT_ButtonUsage_Func");
    TriggerEnable(libCOTF_gt_UT_ButtonUsage, false);
    TriggerAddEventButtonPressed(libCOTF_gt_UT_ButtonUsage, c_playerAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_HotkeyChange
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_HotkeyChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vIdx;

    // Automatic Variable Declarations
    const int autoE9FE455B_ae = libCOTF_gv_uT_HotkeyStoreLength;
    const int autoE9FE455B_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((StringContains(StringWord(EventChatMessage(false), 3), "Ctrl+", c_stringAnywhere, c_stringNoCase) == true) || (StringContains(StringWord(EventChatMessage(false), 3), "Alt+", c_stringAnywhere, c_stringNoCase) == true) || (StringContains(StringWord(EventChatMessage(false), 3), "Shift+", c_stringAnywhere, c_stringNoCase) == true))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_0736B601"));
        return true;
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_COTF_2E633CA7", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, (StringWord(EventChatMessage(false), 2)), "Name", c_playerAny)));
        TextExpressionSetToken("Param/Expression/lib_COTF_2E633CA7", "B", StringToText(StringWord(EventChatMessage(false), 3)));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_2E633CA7"));
    }
    CatalogFieldValueSet(c_gameCatalogButton, (StringWord(EventChatMessage(false), 2)), "Hotkey", EventPlayer(), ("Letter/" + StringWord(EventChatMessage(false), 3)));
    lv_vIdx = 1;
    for ( ; ( (autoE9FE455B_ai >= 0 && lv_vIdx <= autoE9FE455B_ae) || (autoE9FE455B_ai < 0 && lv_vIdx >= autoE9FE455B_ae) ) ; lv_vIdx += autoE9FE455B_ai ) {
        if ((libCOTF_gv_uT_HotkeyToStoreButton[lv_vIdx][EventPlayer()] == "")) {
            libCOTF_gv_uT_HotkeyToStoreButton[lv_vIdx][EventPlayer()] = StringWord(EventChatMessage(false), 2);
            libCOTF_gv_uT_HotkeyToStoreValue[lv_vIdx][EventPlayer()] = StringWord(EventChatMessage(false), 3);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_HotkeyChange_Init () {
    libCOTF_gt_UT_HotkeyChange = TriggerCreate("libCOTF_gt_UT_HotkeyChange_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_HotkeyChange, c_playerAny, "-hotkey", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Godmode
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Godmode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDA36FEF1_g;
    int autoDA36FEF1_u;
    unit autoDA36FEF1_var;
    unitgroup autoCBEEB429_g;
    int autoCBEEB429_u;
    unit autoCBEEB429_var;
    unitgroup autoFDF1A082_g;
    int autoFDF1A082_u;
    unit autoFDF1A082_var;
    unitgroup auto172DAD25_g;
    int auto172DAD25_u;
    unit auto172DAD25_var;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOTF_gv_uT_GodMode == false)) {
        libCOTF_gv_uT_GodMode = true;
        TriggerEnable(libCOTF_gt_UT_Godmode_unit_created, true);
        autoFDF1A082_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoFDF1A082_u = UnitGroupCount(autoFDF1A082_g, c_unitCountAll);
        for (;; autoFDF1A082_u -= 1) {
            autoFDF1A082_var = UnitGroupUnitFromEnd(autoFDF1A082_g, autoFDF1A082_u);
            if (autoFDF1A082_var == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(autoFDF1A082_var, true);
        }
        auto172DAD25_g = UnitGroup(null, 2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto172DAD25_u = UnitGroupCount(auto172DAD25_g, c_unitCountAll);
        for (;; auto172DAD25_u -= 1) {
            auto172DAD25_var = UnitGroupUnitFromEnd(auto172DAD25_g, auto172DAD25_u);
            if (auto172DAD25_var == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(auto172DAD25_var, true);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_828DE2F4"));
    }
    else {
        libCOTF_gv_uT_GodMode = false;
        TriggerEnable(libCOTF_gt_UT_Godmode_unit_created, false);
        autoDA36FEF1_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoDA36FEF1_u = UnitGroupCount(autoDA36FEF1_g, c_unitCountAll);
        for (;; autoDA36FEF1_u -= 1) {
            autoDA36FEF1_var = UnitGroupUnitFromEnd(autoDA36FEF1_g, autoDA36FEF1_u);
            if (autoDA36FEF1_var == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(autoDA36FEF1_var, false);
        }
        autoCBEEB429_g = UnitGroup(null, 2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoCBEEB429_u = UnitGroupCount(autoCBEEB429_g, c_unitCountAll);
        for (;; autoCBEEB429_u -= 1) {
            autoCBEEB429_var = UnitGroupUnitFromEnd(autoCBEEB429_g, autoCBEEB429_u);
            if (autoCBEEB429_var == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(autoCBEEB429_var, false);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_696ECC53"));
    }
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Godmode_Init () {
    libCOTF_gt_UT_Godmode = TriggerCreate("libCOTF_gt_UT_Godmode_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Godmode, c_playerAny, "-god", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Godmode_unit_created
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Godmode_unit_created_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gv_uT_GodMode == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnitCreatedUnit()) == 1) || (UnitGetOwner(EventUnitCreatedUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(EventUnitCreatedUnit(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Godmode_unit_created_Init () {
    libCOTF_gt_UT_Godmode_unit_created = TriggerCreate("libCOTF_gt_UT_Godmode_unit_created_Func");
    TriggerEnable(libCOTF_gt_UT_Godmode_unit_created, false);
    TriggerAddEventUnitCreated(libCOTF_gt_UT_Godmode_unit_created, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DifficultySet
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_DifficultySet_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_maxplayers;

    // Automatic Variable Declarations
    string autoD43379F5_val;
    const int auto717553CD_ae = 4;
    int auto717553CD_var;
    int autoD804D77F_ae;
    int autoD804D77F_var;
    int autoE8C39A6A_ae;
    int autoE8C39A6A_var;
    int auto423A4893_ae;
    int auto423A4893_var;
    int autoC426CBCD_ae;
    int autoC426CBCD_var;
    int auto43FB7C43_ae;
    int auto43FB7C43_var;
    int autoA405C3C3_ae;
    int autoA405C3C3_var;

    // Variable Initialization
    lv_maxplayers = 14;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD43379F5_val = StringWord(EventChatMessage(false), 2);
    if (autoD43379F5_val == "casual") {
        autoD804D77F_ae = lv_maxplayers;
        autoD804D77F_var = 1;
        for ( ; autoD804D77F_var <= autoD804D77F_ae; autoD804D77F_var += 1 ) {
            PlayerSetDifficulty(autoD804D77F_var, 1);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_COTF_40BB24DD") + StringToText(StringWord(EventChatMessage(false), 2))));
    }
    else if (autoD43379F5_val == "normal") {
        autoE8C39A6A_ae = lv_maxplayers;
        autoE8C39A6A_var = 1;
        for ( ; autoE8C39A6A_var <= autoE8C39A6A_ae; autoE8C39A6A_var += 1 ) {
            PlayerSetDifficulty(autoE8C39A6A_var, 2);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_COTF_FCA0EB89") + StringToText(StringWord(EventChatMessage(false), 2))));
    }
    else if (autoD43379F5_val == "hard") {
        auto423A4893_ae = lv_maxplayers;
        auto423A4893_var = 1;
        for ( ; auto423A4893_var <= auto423A4893_ae; auto423A4893_var += 1 ) {
            PlayerSetDifficulty(auto423A4893_var, 3);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_COTF_B500500E") + StringToText(StringWord(EventChatMessage(false), 2))));
    }
    else if (autoD43379F5_val == "brutal") {
        autoC426CBCD_ae = lv_maxplayers;
        autoC426CBCD_var = 1;
        for ( ; autoC426CBCD_var <= autoC426CBCD_ae; autoC426CBCD_var += 1 ) {
            PlayerSetDifficulty(autoC426CBCD_var, 4);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_COTF_1BDE3AF7") + StringToText(StringWord(EventChatMessage(false), 2))));
    }
    else if (autoD43379F5_val == "extreme") {
        auto43FB7C43_ae = lv_maxplayers;
        auto43FB7C43_var = 1;
        for ( ; auto43FB7C43_var <= auto43FB7C43_ae; auto43FB7C43_var += 1 ) {
            PlayerSetDifficulty(auto43FB7C43_var, 5);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_COTF_4DD1E44A") + StringToText(StringWord(EventChatMessage(false), 2))));
    }
    else if (autoD43379F5_val == "unlikely") {
        autoA405C3C3_ae = lv_maxplayers;
        autoA405C3C3_var = 1;
        for ( ; autoA405C3C3_var <= autoA405C3C3_ae; autoA405C3C3_var += 1 ) {
            PlayerSetDifficulty(autoA405C3C3_var, 5);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_COTF_91B4085C") + StringToText(StringWord(EventChatMessage(false), 2))));
    }
    else {
        auto717553CD_var = 1;
        for ( ; auto717553CD_var <= auto717553CD_ae; auto717553CD_var += 1 ) {
            TextExpressionSetToken("Param/Expression/lib_COTF_A308D62F", "A", IntToText(auto717553CD_var));
            TextExpressionSetToken("Param/Expression/lib_COTF_A308D62F", "B", IntToText(libCOTF_gf_UT_DiffForPlayer(auto717553CD_var)));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_A308D62F"));
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_04F0F235"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_DifficultySet_Init () {
    libCOTF_gt_UT_DifficultySet = TriggerCreate("libCOTF_gt_UT_DifficultySet_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_DifficultySet, c_playerAny, "-diff", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_AlarakCDR
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_AlarakCDR_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vRange;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vRange = StringToFixed(StringWord(EventChatMessage(false), 2));

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_vRange <= 15.0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_EDBD13A2"));
        lv_vRange = 0.0;
        PlayerGroupRemove(libCOTF_gv_uT_AlarakCDRPlayers, EventPlayer());
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_COTF_D4AFD153", "A", FixedToText(lv_vRange, 0));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_D4AFD153"));
        libCOTF_gv_uT_AlarakCDRRange = lv_vRange;
        PlayerGroupAdd(libCOTF_gv_uT_AlarakCDRPlayers, EventPlayer());
        TriggerEnable(libCOTF_gt_UT_AlarakCDREffectUsed, true);
    }
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_AlarakCDR_Init () {
    libCOTF_gt_UT_AlarakCDR = TriggerCreate("libCOTF_gt_UT_AlarakCDR_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_AlarakCDR, c_playerAny, "-alarakcdr", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_AlarakCDR EffectUsed
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_AlarakCDREffectUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto3044D47F_g;
    int auto3044D47F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto3044D47F_g = libCOTF_gv_uT_AlarakCDRPlayers;
    auto3044D47F_var = -1;
    while (true) {
        auto3044D47F_var = PlayerGroupNextPlayer(auto3044D47F_g, auto3044D47F_var);
        if (auto3044D47F_var < 0) { break; }
        if ((UnitGroupCount(UnitGroup("AlarakCoop", auto3044D47F_var, RegionCircle(EventPlayerEffectUsedPoint(c_effectLocationSourcePoint), libCOTF_gv_uT_AlarakCDRRange), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            libNtve_gf_PlayerRemoveCooldown(auto3044D47F_var, "Abil/AlarakACDeadlyCharge");
            libNtve_gf_PlayerRemoveCooldown(auto3044D47F_var, "Abil/AlarakKnockback");
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_AlarakCDREffectUsed_Init () {
    libCOTF_gt_UT_AlarakCDREffectUsed = TriggerCreate("libCOTF_gt_UT_AlarakCDREffectUsed_Func");
    TriggerEnable(libCOTF_gt_UT_AlarakCDREffectUsed, false);
    TriggerAddEventPlayerEffectUsed(libCOTF_gt_UT_AlarakCDREffectUsed, c_playerAny, "AlarakSupplicantSacrificeCDR");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_TopRefresh
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_TopRefresh_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoA17C2B1E_val;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_0E904F55"));
    autoA17C2B1E_val = libCOOC_gf_ActiveCommanderForPlayer(EventPlayer());
    if (autoA17C2B1E_val == "ProtossZeratul") {
        DialogControlSetVisible(libCOUI_gv_cU_GPPanel[EventPlayer()], PlayerGroupAll(), false);
        TriggerExecute(libCOUI_gt_CU_GPInitZeratul, true, false);
        libCOUI_gf_CU_GPSetUnit(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], EventPlayer());
        libCOTF_gf_UT_RefreshTopBarZeratul(EventPlayer());
    }
    else if (autoA17C2B1E_val == "TerranTychus") {
        DialogControlSetVisible(libCOUI_gv_cU_GPPanel[EventPlayer()], PlayerGroupAll(), false);
        TriggerExecute(libCOUI_gt_CU_GPInitTychus, true, false);
        libCOUI_gf_CU_GPSetUnit(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], EventPlayer());
        DialogControlSetVisible(libCOUI_gv_cU_GPPanel[EventPlayer()], PlayerGroupAll(), true);
        libCOTF_gf_UT_RefreshTopBarTychus(EventPlayer());
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_TopRefresh_Init () {
    libCOTF_gt_UT_TopRefresh = TriggerCreate("libCOTF_gt_UT_TopRefresh_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_TopRefresh, c_playerAny, "-toprefresh", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Trace
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Trace_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libCOTF_gt_UT_Tracing) == true)) {
        TriggerEnable(libCOTF_gt_UT_Tracing, false);
        TriggerEnable(libCOTF_gt_UT_DeTracing, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_2251B774"));
    }
    else {
        TriggerEnable(libCOTF_gt_UT_Tracing, true);
        TriggerEnable(libCOTF_gt_UT_DeTracing, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_68E723A5"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Trace_Init () {
    libCOTF_gt_UT_Trace = TriggerCreate("libCOTF_gt_UT_Trace_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Trace, c_playerAny, "-trace", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Tracing
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Tracing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogEffect, EventPlayerEffectUsed(), "DebugTrace", EventPlayer(), "1");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Tracing_Init () {
    libCOTF_gt_UT_Tracing = TriggerCreate("libCOTF_gt_UT_Tracing_Func");
    TriggerEnable(libCOTF_gt_UT_Tracing, false);
    TriggerAddEventPlayerEffectUsed(libCOTF_gt_UT_Tracing, c_playerAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DeTracing
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_DeTracing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogEffect, EventPlayerEffectUsed(), "DebugTrace", EventPlayer(), "0");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_DeTracing_Init () {
    libCOTF_gt_UT_DeTracing = TriggerCreate("libCOTF_gt_UT_DeTracing_Func");
    TriggerEnable(libCOTF_gt_UT_DeTracing, false);
    TriggerAddEventPlayerEffectUsed(libCOTF_gt_UT_DeTracing, c_playerAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_CopyPaste
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_CopyPaste_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libCOTF_gt_UT_CTRLC) == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_076046DA"));
        TriggerEnable(libCOTF_gt_UT_CTRLC, false);
        TriggerEnable(libCOTF_gt_UT_CTRLV, false);
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_084ABF8F"));
        TriggerEnable(libCOTF_gt_UT_CTRLC, true);
        TriggerEnable(libCOTF_gt_UT_CTRLV, true);
    }
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_CopyPaste_Init () {
    libCOTF_gt_UT_CopyPaste = TriggerCreate("libCOTF_gt_UT_CopyPaste_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_CopyPaste, c_playerAny, "-copypaste", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_CTRL+C
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_CTRLC_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vSelectedUnits;
    point lv_vCenter;
    int lv_vA;
    int lv_vB;
    int lv_vC;
    string lv_vBehavior;

    // Automatic Variable Declarations
    unitgroup autoE8DBD730_g;
    int autoE8DBD730_u;
    unit autoE8DBD730_var;
    int auto2420C3CA_ae;
    const int auto2420C3CA_ai = 1;
    int auto221B658F_ae;
    const int auto221B658F_ai = 1;
    int autoA68D5970_ae;
    const int autoA68D5970_ai = 1;

    // Variable Initialization
    lv_vSelectedUnits = UnitGroupSelected(EventPlayer());
    lv_vCenter = UnitGroupCenterOfGroup(UnitGroupSelected(1));

    // Actions
    if (!runActions) {
        return true;
    }

    autoE8DBD730_g = lv_vSelectedUnits;
    autoE8DBD730_u = UnitGroupCount(autoE8DBD730_g, c_unitCountAll);
    for (;; autoE8DBD730_u -= 1) {
        autoE8DBD730_var = UnitGroupUnitFromEnd(autoE8DBD730_g, autoE8DBD730_u);
        if (autoE8DBD730_var == null) { break; }
        lv_vA += 1;
        DataTableSetString(true, ("CopyPaste_UnitType_" + IntToString(lv_vA)), (UnitGetType(autoE8DBD730_var)));
        DataTableSetInt(true, ("CopyPaste_Owner_" + IntToString(lv_vA)), UnitGetOwner(autoE8DBD730_var));
        DataTableSetFixed(true, ("CopyPaste_Facing_" + IntToString(lv_vA)), UnitGetFacing(autoE8DBD730_var));
        DataTableSetFixed(true, ("CopyPaste_PositionAngle_" + IntToString(lv_vA)), AngleBetweenPoints(lv_vCenter, UnitGetPosition(autoE8DBD730_var)));
        DataTableSetFixed(true, ("CopyPaste_PositionDistance_" + IntToString(lv_vA)), DistanceBetweenPoints(UnitGetPosition(autoE8DBD730_var), lv_vCenter));
        DataTableSetFixed(true, ("CopyPaste_Life_" + IntToString(lv_vA)), UnitGetPropertyFixed(autoE8DBD730_var, c_unitPropLife, c_unitPropCurrent));
        DataTableSetFixed(true, ("CopyPaste_MaxLife_" + IntToString(lv_vA)), UnitGetPropertyFixed(autoE8DBD730_var, c_unitPropLifeMax, c_unitPropCurrent));
        DataTableSetFixed(true, ("CopyPaste_Energy_" + IntToString(lv_vA)), UnitGetPropertyFixed(autoE8DBD730_var, c_unitPropEnergy, c_unitPropCurrent));
        DataTableSetFixed(true, ("CopyPaste_MaxEnergy_" + IntToString(lv_vA)), UnitGetPropertyFixed(autoE8DBD730_var, c_unitPropEnergyMax, c_unitPropCurrent));
        DataTableSetFixed(true, ("CopyPaste_Shields_" + IntToString(lv_vA)), UnitGetPropertyFixed(autoE8DBD730_var, c_unitPropShields, c_unitPropCurrent));
        DataTableSetFixed(true, ("CopyPaste_MaxShields_" + IntToString(lv_vA)), UnitGetPropertyFixed(autoE8DBD730_var, c_unitPropShieldsMax, c_unitPropCurrent));
        DataTableSetInt(true, ("CopyPaste_BehCount_" + IntToString(lv_vA)), UnitBehaviorCountAll(autoE8DBD730_var));
        auto2420C3CA_ae = UnitBehaviorCountAll(autoE8DBD730_var);
        lv_vB = 0;
        for ( ; ( (auto2420C3CA_ai >= 0 && lv_vB <= auto2420C3CA_ae) || (auto2420C3CA_ai < 0 && lv_vB >= auto2420C3CA_ae) ) ; lv_vB += auto2420C3CA_ai ) {
            lv_vBehavior = UnitBehaviorGet(autoE8DBD730_var, lv_vB);
            if (((lv_vBehavior == "BiomassBuff1") || (lv_vBehavior == "BiomassBuff10") || (lv_vBehavior == "BiomassBuff100") || (lv_vBehavior == "BiomassBuff100PlusLife") || (lv_vBehavior == "BiomassBuff10PlusLife") || (lv_vBehavior == "AscendantSacrificeSelfBuff") || (lv_vBehavior == "DehakaEssenceDropPickupBuff") || (lv_vBehavior == "EssenceBuff1") || (lv_vBehavior == "EssenceBuff10") || (lv_vBehavior == "EssenceBuff100") || (lv_vBehavior == "EssenceBuff100PlusLife") || (lv_vBehavior == "EssenceBuff10PlusLife") || (lv_vBehavior == "DehakaGene4Creepers") || (lv_vBehavior == "DehakaGeneAttackSpeed") || (lv_vBehavior == "DehakaGeneCarapace") || (lv_vBehavior == "DehakaGeneCreeperHostGeneApply") || (lv_vBehavior == "DehakaGeneFireRoachGeneApply") || (lv_vBehavior == "DehakaGeneGuardianGeneApply") || (lv_vBehavior == "DehakaGeneImpalerGeneApply") || (lv_vBehavior == "DehakaGeneLifeLeech") || (lv_vBehavior == "DehakaGeneMutaliskGeneApply") || (lv_vBehavior == "DehakaGeneRavasaurGeneApply") || (lv_vBehavior == "DehakaGeneThorns") || (lv_vBehavior == "DehakaGeneTyrannosaurGeneApply"))) {
                DataTableSetString(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)), (lv_vBehavior));
                DataTableSetInt(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB) + "_s"), UnitBehaviorCount(autoE8DBD730_var, lv_vBehavior));
            }

        }
        DataTableSetInt(true, ("CopyPaste_CargoCount_" + IntToString(lv_vA)), UnitCargoValue(autoE8DBD730_var, c_unitCargoUnitCount));
        auto221B658F_ae = UnitCargoValue(autoE8DBD730_var, c_unitCargoUnitCount);
        lv_vB = 0;
        for ( ; ( (auto221B658F_ai >= 0 && lv_vB <= auto221B658F_ae) || (auto221B658F_ai < 0 && lv_vB >= auto221B658F_ae) ) ; lv_vB += auto221B658F_ai ) {
            DataTableSetString(true, ("CopyPaste_CargoUnit_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)), (UnitGetType(UnitCargo(autoE8DBD730_var, lv_vB))));
            DataTableSetInt(true, ("CopyPaste_BehCount_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)), UnitBehaviorCountAll(UnitCargo(autoE8DBD730_var, lv_vB)));
            DataTableSetFixed(true, ("CopyPaste_Life_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)), UnitGetPropertyFixed(UnitCargo(autoE8DBD730_var, lv_vB), c_unitPropLifePercent, c_unitPropCurrent));
            autoA68D5970_ae = UnitBehaviorCountAll(UnitCargo(autoE8DBD730_var, lv_vB));
            lv_vC = 0;
            for ( ; ( (autoA68D5970_ai >= 0 && lv_vC <= autoA68D5970_ae) || (autoA68D5970_ai < 0 && lv_vC >= autoA68D5970_ae) ) ; lv_vC += autoA68D5970_ai ) {
                DataTableSetString(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB) + "_" + IntToString(lv_vC)), (UnitBehaviorGet(UnitCargo(autoE8DBD730_var, lv_vB), lv_vC)));
                DataTableSetInt(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB) + "_" + IntToString(lv_vC) + "_s"), UnitBehaviorCount(UnitCargo(autoE8DBD730_var, lv_vB), UnitBehaviorGet(UnitCargo(autoE8DBD730_var, lv_vB), lv_vC)));
            }
        }
    }
    DataTableSetInt(true, ("CopyPaste_UnitCount"), lv_vA);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_CTRLC_Init () {
    libCOTF_gt_UT_CTRLC = TriggerCreate("libCOTF_gt_UT_CTRLC_Func");
    TriggerEnable(libCOTF_gt_UT_CTRLC, false);
    TriggerAddEventKeyPressed(libCOTF_gt_UT_CTRLC, c_playerAny, c_keyC, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_CTRL+V
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_CTRLV_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_vCenter;
    int lv_vA;
    int lv_vB;
    int lv_vC;

    // Automatic Variable Declarations
    int autoD4B79F6F_ae;
    int autoD4B79F6F_var;
    int autoB1E949E7_ae;
    const int autoB1E949E7_ai = 1;
    int auto9EB6B4D4_ae;
    const int auto9EB6B4D4_ai = 1;
    int auto4692070C_ae;
    const int auto4692070C_ai = 1;

    // Variable Initialization
    lv_vCenter = CameraGetTarget(EventPlayer());

    // Actions
    if (!runActions) {
        return true;
    }

    autoD4B79F6F_ae = DataTableGetInt(true, "CopyPaste_UnitCount");
    autoD4B79F6F_var = 1;
    for ( ; autoD4B79F6F_var <= autoD4B79F6F_ae; autoD4B79F6F_var += 1 ) {
        lv_vA += 1;
        UnitCreate(1, UnitTypeFromString(DataTableGetString(true, ("CopyPaste_UnitType_" + IntToString(lv_vA)))), 0, DataTableGetInt(true, ("CopyPaste_Owner_" + IntToString(lv_vA))), PointWithOffsetPolar(lv_vCenter, DataTableGetFixed(true, ("CopyPaste_PositionDistance_" + IntToString(lv_vA))), DataTableGetFixed(true, ("CopyPaste_PositionAngle_" + IntToString(lv_vA)))), DataTableGetFixed(true, ("CopyPaste_Facing_" + IntToString(lv_vA))));
        autoB1E949E7_ae = DataTableGetInt(true, ("CopyPaste_BehCount_" + IntToString(lv_vA)));
        lv_vB = 0;
        for ( ; ( (autoB1E949E7_ai >= 0 && lv_vB <= autoB1E949E7_ae) || (autoB1E949E7_ai < 0 && lv_vB >= autoB1E949E7_ae) ) ; lv_vB += autoB1E949E7_ai ) {
            UnitBehaviorAddPlayer(UnitLastCreated(), (DataTableGetString(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)))), UnitGetOwner(UnitLastCreated()), DataTableGetInt(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB) + "_s")));
        }
        auto9EB6B4D4_ae = DataTableGetInt(true, ("CopyPaste_CargoCount_" + IntToString(lv_vA)));
        lv_vB = 1;
        for ( ; ( (auto9EB6B4D4_ai >= 0 && lv_vB <= auto9EB6B4D4_ae) || (auto9EB6B4D4_ai < 0 && lv_vB >= auto9EB6B4D4_ae) ) ; lv_vB += auto9EB6B4D4_ai ) {
            UnitCargoCreate(UnitLastCreated(), UnitTypeFromString(DataTableGetString(true, ("CopyPaste_CargoUnit_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)))), 1);
            auto4692070C_ae = DataTableGetInt(true, ("CopyPaste_BehCount_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)));
            lv_vC = 0;
            for ( ; ( (auto4692070C_ai >= 0 && lv_vC <= auto4692070C_ae) || (auto4692070C_ai < 0 && lv_vC >= auto4692070C_ae) ) ; lv_vC += auto4692070C_ai ) {
                UnitBehaviorAddPlayer(UnitCargoLastCreated(), (DataTableGetString(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB) + "_" + IntToString(lv_vC)))), UnitGetOwner(UnitCargoLastCreated()), DataTableGetInt(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB) + "_" + IntToString(lv_vC) + "_s")));
            }
            UnitSetPropertyFixed(UnitCargoLastCreated(), c_unitPropLifePercent, DataTableGetFixed(true, ("CopyPaste_Life_" + IntToString(lv_vA) + "_" + IntToString(lv_vB))));
        }
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, DataTableGetFixed(true, ("CopyPaste_Life_" + IntToString(lv_vA))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, DataTableGetFixed(true, ("CopyPaste_MaxLife_" + IntToString(lv_vA))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShields, DataTableGetFixed(true, ("CopyPaste_Shields_" + IntToString(lv_vA))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, DataTableGetFixed(true, ("CopyPaste_MaxShields_" + IntToString(lv_vA))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergy, DataTableGetFixed(true, ("CopyPaste_Energy_" + IntToString(lv_vA))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyMax, DataTableGetFixed(true, ("CopyPaste_MaxEnergy_" + IntToString(lv_vA))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_CTRLV_Init () {
    libCOTF_gt_UT_CTRLV = TriggerCreate("libCOTF_gt_UT_CTRLV_Func");
    TriggerEnable(libCOTF_gt_UT_CTRLV, false);
    TriggerAddEventKeyPressed(libCOTF_gt_UT_CTRLV, c_playerAny, c_keyV, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_PathCheck
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_PathCheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libCOTF_gt_UT_PathCheckTAB) == false)) {
        TriggerEnable(libCOTF_gt_UT_PathCheckTAB, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_B84D79D0"));
    }
    else {
        TriggerEnable(libCOTF_gt_UT_PathCheckTAB, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_2A196C3D"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_PathCheck_Init () {
    libCOTF_gt_UT_PathCheck = TriggerCreate("libCOTF_gt_UT_PathCheck_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_PathCheck, c_playerAny, "-pathcheck", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_PathCheckTAB
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_PathCheckTAB_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vUnit;
    point lv_vPoint;
    bool lv_vPointsConnectedByPathing;
    int lv_vPathingCostBetweenPoints;
    bool lv_vUnitCanPathToPoint11000;
    bool lv_vPointIsPassable;
    fixed lv_vPathingCostBetweenPointsReal;
    fixed lv_vAIPathingCostUnit;
    int lv_vGround;
    text lv_vGroundType;

    // Automatic Variable Declarations
    int auto1A282E9B_val;

    // Variable Initialization
    lv_vUnit = UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive);
    lv_vPoint = CameraGetTarget(EventPlayer());
    lv_vPointsConnectedByPathing = PointPathingIsConnected(UnitGetPosition(lv_vUnit), lv_vPoint);
    lv_vPathingCostBetweenPoints = PointPathingCost(UnitGetPosition(lv_vUnit), lv_vPoint);
    lv_vUnitCanPathToPoint11000 = UnitPathableToPoint(lv_vUnit, lv_vPoint, 1.0, 1000.0);
    lv_vPointIsPassable = PointPathingPassable(lv_vPoint);
    lv_vPathingCostBetweenPointsReal = PointPathingCost(UnitGetPosition(lv_vUnit), lv_vPoint);
    lv_vAIPathingCostUnit = AIPathingCostUnit(lv_vUnit, lv_vPoint, c_includeAllBuildings);
    lv_vGround = PathingType(lv_vPoint);

    // Actions
    if (!runActions) {
        return true;
    }

    auto1A282E9B_val = lv_vGround;
    if (auto1A282E9B_val == c_pathingGround) {
        lv_vGroundType = StringExternal("Param/Value/lib_COTF_B8ACE83F");
    }
    else if (auto1A282E9B_val == c_pathingCliff) {
        lv_vGroundType = StringExternal("Param/Value/lib_COTF_0750E50E");
    }
    else if (auto1A282E9B_val == c_pathingBuilding) {
        lv_vGroundType = StringExternal("Param/Value/lib_COTF_72094092");
    }
    else if (auto1A282E9B_val == c_pathingUnpathable) {
        lv_vGroundType = StringExternal("Param/Value/lib_COTF_E3568423");
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/lib_COTF_0D0B8934", "B", IntToText(lv_vPathingCostBetweenPoints));
    TextExpressionSetToken("Param/Expression/lib_COTF_0D0B8934", "C", libNtve_gf_ConvertBooleanToText(lv_vUnitCanPathToPoint11000));
    TextExpressionSetToken("Param/Expression/lib_COTF_0D0B8934", "G", FixedToText(lv_vAIPathingCostUnit, c_fixedPrecisionAny));
    TextExpressionSetToken("Param/Expression/lib_COTF_0D0B8934", "A", libNtve_gf_ConvertBooleanToText(lv_vPointsConnectedByPathing));
    TextExpressionSetToken("Param/Expression/lib_COTF_0D0B8934", "E", libNtve_gf_ConvertBooleanToText(lv_vPointIsPassable));
    TextExpressionSetToken("Param/Expression/lib_COTF_0D0B8934", "D", lv_vGroundType);
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COTF_0D0B8934"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_PathCheckTAB_Init () {
    libCOTF_gt_UT_PathCheckTAB = TriggerCreate("libCOTF_gt_UT_PathCheckTAB_Func");
    TriggerEnable(libCOTF_gt_UT_PathCheckTAB, false);
    TriggerAddEventKeyPressed(libCOTF_gt_UT_PathCheckTAB, c_playerAny, c_keyTab, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ArtSpawn
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_ArtSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const string lv_vUnitType = "ShapeSphere";
    int lv_vIndex;
    point lv_vPoint;

    // Automatic Variable Declarations
    const int auto7ADE4326_ae = 15;
    int auto7ADE4326_var;
    unitgroup auto3E9EDA7C_g;
    int auto3E9EDA7C_u;
    unit auto3E9EDA7C_var;
    const int auto19687DBD_n = 200;
    int auto19687DBD_i;
    int autoCDD7122D_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIUnitColorStyleOverride(PlayerGroupSingle(EventPlayer()), c_unitColorStyleNormal);
    UIUnitColorStyleClearOverride(PlayerGroupSingle(EventPlayer()));
    auto7ADE4326_var = 1;
    for ( ; auto7ADE4326_var <= auto7ADE4326_ae; auto7ADE4326_var += 1 ) {
        libNtve_gf_SetAlliance(auto7ADE4326_var, libCOTF_gv_uT_ArtSpawnPlayer, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    }
    if ((StringWord(EventChatMessage(false), 2) == "clear")) {
        auto3E9EDA7C_g = UnitGroup(null, libCOTF_gv_uT_ArtSpawnPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto3E9EDA7C_u = UnitGroupCount(auto3E9EDA7C_g, c_unitCountAll);
        for (;; auto3E9EDA7C_u -= 1) {
            auto3E9EDA7C_var = UnitGroupUnitFromEnd(auto3E9EDA7C_g, auto3E9EDA7C_u);
            if (auto3E9EDA7C_var == null) { break; }
            UnitRemove(auto3E9EDA7C_var);
        }
    }
    else {
        for (auto19687DBD_i = 1; auto19687DBD_i <= auto19687DBD_n; auto19687DBD_i += 1) {
            lv_vIndex = RandomInt(1, 3);
            autoCDD7122D_val = lv_vIndex;
            if (autoCDD7122D_val == 1) {
                libCOTF_gv_uT_ArtSpawnColor = 6;
            }
            else if (autoCDD7122D_val == 2) {
                libCOTF_gv_uT_ArtSpawnColor = 4;
            }
            else {
                libCOTF_gv_uT_ArtSpawnColor = 3;
            }
            lv_vPoint = libCOTF_gf_UT_Zeratul_FindArtifactPlacementPointNewDebug(lv_vIndex);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_ArtSpawn_Init () {
    libCOTF_gt_UT_ArtSpawn = TriggerCreate("libCOTF_gt_UT_ArtSpawn_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_ArtSpawn, c_playerAny, "-artspawn", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Pie
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Pie_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOTF_gv_uT_Pie[1][EventPlayer()] == c_invalidDialogId) && (libCOTF_gv_uT_Pie[2][EventPlayer()] == c_invalidDialogId)) {
        libCOTF_gf_UT_Graph_HideAllGraphsExcept(0, EventPlayer());
        libCOTF_gf_UT_CreatePieChartfromDamageLog(1, -350, 50, c_anchorCenter, 0);
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(EventPlayer()), true);
        libCOTF_gv_uT_Pie[1][EventPlayer()] = DialogLastCreated();
        libCOTF_gf_UT_CreatePieChartfromDamageLog(2, 350, 50, c_anchorCenter, 8);
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(EventPlayer()), true);
        libCOTF_gv_uT_Pie[2][EventPlayer()] = DialogLastCreated();
    }
    else {
        DialogDestroy(libCOTF_gv_uT_Pie[1][EventPlayer()]);
        libCOTF_gv_uT_Pie[1][EventPlayer()] = c_invalidDialogId;
        DialogDestroy(libCOTF_gv_uT_Pie[2][EventPlayer()]);
        libCOTF_gv_uT_Pie[2][EventPlayer()] = c_invalidDialogId;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Pie_Init () {
    libCOTF_gt_UT_Pie = TriggerCreate("libCOTF_gt_UT_Pie_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Pie, c_playerAny, "-pie", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Light
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Light_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libCOTF_gt_UT_Plus) == false)) {
        TriggerEnable(libCOTF_gt_UT_Plus, true);
        TriggerEnable(libCOTF_gt_UT_Minus, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_BC97FF9D"));
        GameSetSpeedLocked(true);
    }
    else {
        TriggerEnable(libCOTF_gt_UT_Plus, false);
        TriggerEnable(libCOTF_gt_UT_Minus, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_EB349C96"));
        GameSetSpeedLocked(false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Light_Init () {
    libCOTF_gt_UT_Light = TriggerCreate("libCOTF_gt_UT_Light_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Light, c_playerAny, "-light", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Plus
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Plus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCOTF_gv_uT_LighIndex += 1;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText((((CatalogEntryGet(c_gameCatalogLight, libCOTF_gv_uT_LighIndex))))));
    GameSetLighting(((CatalogEntryGet(c_gameCatalogLight, libCOTF_gv_uT_LighIndex))), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Plus_Init () {
    libCOTF_gt_UT_Plus = TriggerCreate("libCOTF_gt_UT_Plus_Func");
    TriggerEnable(libCOTF_gt_UT_Plus, false);
    TriggerAddEventKeyPressed(libCOTF_gt_UT_Plus, c_playerAny, c_keyNumPadPlus, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Minus
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Minus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCOTF_gv_uT_LighIndex -= 1;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText((((CatalogEntryGet(c_gameCatalogLight, libCOTF_gv_uT_LighIndex))))));
    GameSetLighting(((CatalogEntryGet(c_gameCatalogLight, libCOTF_gv_uT_LighIndex))), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Minus_Init () {
    libCOTF_gt_UT_Minus = TriggerCreate("libCOTF_gt_UT_Minus_Func");
    TriggerEnable(libCOTF_gt_UT_Minus, false);
    TriggerAddEventKeyPressed(libCOTF_gt_UT_Minus, c_playerAny, c_keyNumPadMinus, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Graph_Initialization
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Graph_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0, c_timeGame);
    libCOTF_gv_graphsGeneral.lv_active = true;
    libCOTF_gv_graphsGeneral.lv_playerLeft = 1;
    libCOTF_gv_graphsGeneral.lv_teamLeft = 1;
    libCOTF_gv_graphsGeneral.lv_playerRight = 2;
    libCOTF_gv_graphsGeneral.lv_teamRight = 2;
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/GraphContainer");
    libCOTF_gv_graphsGeneral.lv_container = DialogControlLastCreated();
    libCOTF_gf_UT_Graph_DefineGraph(1, StringExternal("Param/Value/lib_COTF_85A5A906"), "IncomeGraph", "ResourceCollectionRate", libCOTF_ge_GraphStyle_Comparative, 350.0, 400.0, 200.0);
    libCOTF_gf_UT_Graph_DefineGraph(2, StringExternal("Param/Value/lib_COTF_ECAA2631"), "ArmySizeGraph", "ResourceValueArmySampled", libCOTF_ge_GraphStyle_Comparative, 40.0, 50.0, 50.0);
    libCOTF_gf_UT_Graph_DefineGraph(3, StringExternal("Param/Value/lib_COTF_7DED81C8"), "ApmGraph", "APM", libCOTF_ge_GraphStyle_Comparative, 40.0, 50.0, 50.0);
    libCOTF_gf_UT_Graph_DefineGraph(4, StringExternal("Param/Value/lib_COTF_6C49D680"), "KillsGraph", "UnitsKilledCount", libCOTF_ge_GraphStyle_Comparative, 40.0, 50.0, 50.0);
    libCOTF_gf_UT_Graph_DefineGraph(5, StringExternal("Param/Value/lib_COTF_5D5EE4D7"), "ValueLostGraph", "ResourceLostArmy", libCOTF_ge_GraphStyle_Comparative, 40.0, 50.0, 50.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Graph_Initialization_Init () {
    libCOTF_gt_UT_Graph_Initialization = TriggerCreate("libCOTF_gt_UT_Graph_Initialization_Func");
    libCOUI_gf_CU_CommanderClosed(libCOTF_gt_UT_Graph_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Graph_Timer
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Graph_Timer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_bar;
    int lv_graph;
    int lv_count;
    int lv_count2;

    // Automatic Variable Declarations
    int auto5EAB7164_ae;
    const int auto5EAB7164_ai = 1;
    int autoA998FE42_val;
    int auto77978057_ae;
    const int auto77978057_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/GraphContainer/KillsGraph/Graph/AdditionalGraphInfo"));
    TextExpressionSetToken("Param/Expression/lib_COTF_63CADF26", "A", IntToText(PlayerScoreValueGetAsInt(1, "UnitsKilledCount")));
    TextExpressionSetToken("Param/Expression/lib_COTF_63CADF26", "B", IntToText(PlayerScoreValueGetAsInt(2, "UnitsKilledCount")));
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_COTF_63CADF26"), PlayerGroupAll());
    libCOTF_gv_graphsGeneral.lv_currentInterval += 1;
    if ((libCOTF_gv_graphsGeneral.lv_currentInterval == libCOTF_gv_graphsGeneral.lv_intervals)) {
        libCOTF_gv_graphsGeneral.lv_currentNode += 1;
    }

    auto5EAB7164_ae = libCOTF_gv_graphsGeneral.lv_totalGraphs;
    lv_graph = 1;
    for ( ; ( (auto5EAB7164_ai >= 0 && lv_graph <= auto5EAB7164_ae) || (auto5EAB7164_ai < 0 && lv_graph >= auto5EAB7164_ae) ) ; lv_graph += auto5EAB7164_ai ) {
        libCOTF_gv_graphsData[lv_graph].lv_tempValues[libCOTF_gv_graphsGeneral.lv_teamLeft][libCOTF_gv_graphsGeneral.lv_currentInterval] = PlayerScoreValueGetAsInt(libCOTF_gv_graphsGeneral.lv_playerLeft, libCOTF_gv_graphsData[lv_graph].lv_scoreType);
        libCOTF_gv_graphsData[lv_graph].lv_tempValues[libCOTF_gv_graphsGeneral.lv_teamRight][libCOTF_gv_graphsGeneral.lv_currentInterval] = PlayerScoreValueGetAsInt(libCOTF_gv_graphsGeneral.lv_playerRight, libCOTF_gv_graphsData[lv_graph].lv_scoreType);
        if ((libCOTF_gv_graphsGeneral.lv_currentInterval == libCOTF_gv_graphsGeneral.lv_intervals)) {
            autoA998FE42_val = libCOTF_gv_graphsData[lv_graph].lv_style;
            if (autoA998FE42_val == libCOTF_ge_GraphStyle_Comparative) {
                libCOTF_gf_UT_Graph_UpdateDataComparative(lv_graph);
            }
            else if (autoA998FE42_val == libCOTF_ge_GraphStyle_Differential) {
                libCOTF_gf_UT_Graph_UpdateDataDifferential(lv_graph);
            }
            else {
            }
            auto77978057_ae = libCOTF_gv_graphsGeneral.lv_intervals;
            lv_count = 1;
            for ( ; ( (auto77978057_ai >= 0 && lv_count <= auto77978057_ae) || (auto77978057_ai < 0 && lv_count >= auto77978057_ae) ) ; lv_count += auto77978057_ai ) {
                libCOTF_gv_graphsData[lv_graph].lv_tempValues[libCOTF_gv_graphsGeneral.lv_teamLeft][lv_count] = 0;
                libCOTF_gv_graphsData[lv_graph].lv_tempValues[libCOTF_gv_graphsGeneral.lv_teamRight][lv_count] = 0;
            }
        }

    }
    if ((libCOTF_gv_graphsGeneral.lv_currentInterval == libCOTF_gv_graphsGeneral.lv_intervals)) {
        libCOTF_gv_graphsGeneral.lv_currentInterval = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Graph_Timer_Init () {
    libCOTF_gt_UT_Graph_Timer = TriggerCreate("libCOTF_gt_UT_Graph_Timer_Func");
    TriggerAddEventTimePeriodic(libCOTF_gt_UT_Graph_Timer, 2.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Graph_ShowIncome
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Graph_ShowIncome_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOTF_gf_UT_Graph_HideAllGraphsExcept(1, EventPlayer());
    TriggerExecute(libCOTF_gt_UT_Graph_ButtonCreate, true, true);
    DialogSetVisible(libCOTF_gv_uT_Graph_ButtonDialog, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Graph_ShowIncome_Init () {
    libCOTF_gt_UT_Graph_ShowIncome = TriggerCreate("libCOTF_gt_UT_Graph_ShowIncome_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Graph_ShowIncome, c_playerAny, "-gincome", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Graph_ShowArmyValue
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Graph_ShowArmyValue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOTF_gf_UT_Graph_HideAllGraphsExcept(2, EventPlayer());
    TriggerExecute(libCOTF_gt_UT_Graph_ButtonCreate, true, true);
    DialogSetVisible(libCOTF_gv_uT_Graph_ButtonDialog, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Graph_ShowArmyValue_Init () {
    libCOTF_gt_UT_Graph_ShowArmyValue = TriggerCreate("libCOTF_gt_UT_Graph_ShowArmyValue_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Graph_ShowArmyValue, c_playerAny, "-garmy", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Graph_ShowAPM
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Graph_ShowAPM_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOTF_gf_UT_Graph_HideAllGraphsExcept(3, EventPlayer());
    TriggerExecute(libCOTF_gt_UT_Graph_ButtonCreate, true, true);
    DialogSetVisible(libCOTF_gv_uT_Graph_ButtonDialog, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Graph_ShowAPM_Init () {
    libCOTF_gt_UT_Graph_ShowAPM = TriggerCreate("libCOTF_gt_UT_Graph_ShowAPM_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Graph_ShowAPM, c_playerAny, "-gapm", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Graph_ShowKills
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Graph_ShowKills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOTF_gf_UT_Graph_HideAllGraphsExcept(4, EventPlayer());
    TriggerExecute(libCOTF_gt_UT_Graph_ButtonCreate, true, true);
    DialogSetVisible(libCOTF_gv_uT_Graph_ButtonDialog, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Graph_ShowKills_Init () {
    libCOTF_gt_UT_Graph_ShowKills = TriggerCreate("libCOTF_gt_UT_Graph_ShowKills_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Graph_ShowKills, c_playerAny, "-gkills", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Graph_ShowValueLost
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Graph_ShowValueLost_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOTF_gf_UT_Graph_HideAllGraphsExcept(5, EventPlayer());
    TriggerExecute(libCOTF_gt_UT_Graph_ButtonCreate, true, true);
    DialogSetVisible(libCOTF_gv_uT_Graph_ButtonDialog, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Graph_ShowValueLost_Init () {
    libCOTF_gt_UT_Graph_ShowValueLost = TriggerCreate("libCOTF_gt_UT_Graph_ShowValueLost_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Graph_ShowValueLost, c_playerAny, "-glost", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Graph_Button Create
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Graph_ButtonCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(50, 50, c_anchorCenter, 530, -400, true);
    libCOTF_gv_uT_Graph_ButtonDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 2000);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 0, 0, StringToText(""), StringToText(""), "");
    libCOTF_gv_uT_Graph_Button = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Graph_ButtonCreate_Init () {
    libCOTF_gt_UT_Graph_ButtonCreate = TriggerCreate("libCOTF_gt_UT_Graph_ButtonCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Clicked
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Clicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOTF_gv_uT_Graph_Button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOTF_gf_UT_Graph_HideAllGraphsExcept(0, EventPlayer());
    DialogSetVisible(libCOTF_gv_uT_Graph_ButtonDialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Clicked_Init () {
    libCOTF_gt_UT_Clicked = TriggerCreate("libCOTF_gt_UT_Clicked_Func");
    TriggerAddEventDialogControl(libCOTF_gt_UT_Clicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_MissileMovers
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_MissileMovers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogBehavior, "MissileCoef", "Modification.TimeScale", EventPlayer(), StringWord(EventChatMessage(false), 2));
    UnitGroupAddUnitGroup(libCOTF_gv_uT_MissileCreators, UnitGroupSelected(EventPlayer()));
    TriggerEnable(libCOTF_gt_UT_MissileCreated, true);
    if ((StringWord(EventChatMessage(false), 2) == "clear")) {
        UnitGroupClear(libCOTF_gv_uT_MissileCreators);
        TriggerEnable(libCOTF_gt_UT_MissileCreated, false);
    }

    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_MissileMovers_Init () {
    libCOTF_gt_UT_MissileMovers = TriggerCreate("libCOTF_gt_UT_MissileMovers_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_MissileMovers, c_playerAny, "-mm", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_MissileCreated
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_MissileCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libCOTF_gv_uT_MissileCreators, EventUnit()) == true))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnitCreatedUnit()), c_unitFlagMissile) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnitCreatedUnit(), "MissileCoef", 1, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_MissileCreated_Init () {
    libCOTF_gt_UT_MissileCreated = TriggerCreate("libCOTF_gt_UT_MissileCreated_Func");
    TriggerEnable(libCOTF_gt_UT_MissileCreated, false);
    TriggerAddEventUnitCreated(libCOTF_gt_UT_MissileCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Height
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Height_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDC4C58BE_g;
    int autoDC4C58BE_u;
    unit autoDC4C58BE_var;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoDC4C58BE_g = UnitGroupSelected(EventPlayer());
    autoDC4C58BE_u = UnitGroupCount(autoDC4C58BE_g, c_unitCountAll);
    for (;; autoDC4C58BE_u -= 1) {
        autoDC4C58BE_var = UnitGroupUnitFromEnd(autoDC4C58BE_g, autoDC4C58BE_u);
        if (autoDC4C58BE_var == null) { break; }
        UnitSetPropertyFixed(autoDC4C58BE_var, c_unitPropHeight, StringToFixed(StringWord(EventChatMessage(false), 2)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Height_Init () {
    libCOTF_gt_UT_Height = TriggerCreate("libCOTF_gt_UT_Height_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Height, c_playerAny, "-height", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_AttackSpeed
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_AttackSpeed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    unitgroup autoC2BDEB05_g;
    int autoC2BDEB05_u;
    unit autoC2BDEB05_var;
    int autoCCC0C8E3_ae;
    const int autoCCC0C8E3_ai = 1;
    unitgroup autoC59B3DAE_g;
    int autoC59B3DAE_u;
    unit autoC59B3DAE_var;
    int auto115C7236_ae;
    const int auto115C7236_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != null)) {
        autoC59B3DAE_g = UnitGroupSelected(EventPlayer());
        autoC59B3DAE_u = UnitGroupCount(autoC59B3DAE_g, c_unitCountAll);
        for (;; autoC59B3DAE_u -= 1) {
            autoC59B3DAE_var = UnitGroupUnitFromEnd(autoC59B3DAE_g, autoC59B3DAE_u);
            if (autoC59B3DAE_var == null) { break; }
            auto115C7236_ae = UnitWeaponCount(autoC59B3DAE_var);
            lv_a = 1;
            for ( ; ( (auto115C7236_ai >= 0 && lv_a <= auto115C7236_ae) || (auto115C7236_ai < 0 && lv_a >= auto115C7236_ae) ) ; lv_a += auto115C7236_ai ) {
                CatalogFieldValueModify(c_gameCatalogWeapon, UnitWeaponGet(autoC59B3DAE_var, lv_a), "RateMultiplier", UnitGetOwner(autoC59B3DAE_var), StringWord(EventChatMessage(false), 2), c_upgradeOperationSet);
            }
        }
    }
    else {
        autoC2BDEB05_g = UnitGroupSelected(EventPlayer());
        autoC2BDEB05_u = UnitGroupCount(autoC2BDEB05_g, c_unitCountAll);
        for (;; autoC2BDEB05_u -= 1) {
            autoC2BDEB05_var = UnitGroupUnitFromEnd(autoC2BDEB05_g, autoC2BDEB05_u);
            if (autoC2BDEB05_var == null) { break; }
            autoCCC0C8E3_ae = UnitWeaponCount(autoC2BDEB05_var);
            lv_a = 1;
            for ( ; ( (autoCCC0C8E3_ai >= 0 && lv_a <= autoCCC0C8E3_ae) || (autoCCC0C8E3_ai < 0 && lv_a >= autoCCC0C8E3_ae) ) ; lv_a += autoCCC0C8E3_ai ) {
                CatalogFieldValueModify(c_gameCatalogWeapon, UnitWeaponGet(autoC2BDEB05_var, lv_a), "RateMultiplier", UnitGetOwner(autoC2BDEB05_var), "1", c_upgradeOperationSet);
            }
        }
    }
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_AttackSpeed_Init () {
    libCOTF_gt_UT_AttackSpeed = TriggerCreate("libCOTF_gt_UT_AttackSpeed_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_AttackSpeed, c_playerAny, "-as", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Damage
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Damage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_percent;

    // Automatic Variable Declarations
    unitgroup auto2840669B_g;
    int auto2840669B_u;
    unit auto2840669B_var;

    // Variable Initialization
    lv_percent = StringToInt(StringWord(EventChatMessage(false), 2));

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_percent /= 10;
    lv_percent *= 10;
    auto2840669B_g = UnitGroupSelected(EventPlayer());
    auto2840669B_u = UnitGroupCount(auto2840669B_g, c_unitCountAll);
    for (;; auto2840669B_u -= 1) {
        auto2840669B_var = UnitGroupUnitFromEnd(auto2840669B_g, auto2840669B_u);
        if (auto2840669B_var == null) { break; }
        UnitBehaviorRemovePlayer(auto2840669B_var, "DamageMultiplied", UnitGetOwner(auto2840669B_var), UnitBehaviorCount(auto2840669B_var, "DamageMultiplied"));
        UnitBehaviorRemovePlayer(auto2840669B_var, "DamageMultipliedNegative", UnitGetOwner(auto2840669B_var), UnitBehaviorCount(auto2840669B_var, "DamageMultipliedNegative"));
        if ((lv_percent <= 90)) {
            UnitBehaviorAddPlayer(auto2840669B_var, "DamageMultipliedNegative", UnitGetOwner(auto2840669B_var), (((100 - lv_percent) / 10)));
        }
        else {
            UnitBehaviorAddPlayer(auto2840669B_var, "DamageMultiplied", UnitGetOwner(auto2840669B_var), (((lv_percent - 100) / 10)));
        }
    }
    TextExpressionSetToken("Param/Expression/lib_COTF_BD322235", "A", IntToText(lv_percent));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_BD322235"));
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Damage_Init () {
    libCOTF_gt_UT_Damage = TriggerCreate("libCOTF_gt_UT_Damage_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Damage, c_playerAny, "-dmg", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Life
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Life_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoAB32FD36_g;
    int autoAB32FD36_u;
    unit autoAB32FD36_var;
    unitgroup auto045080F6_g;
    int auto045080F6_u;
    unit auto045080F6_var;
    unitgroup auto4E82E688_g;
    int auto4E82E688_u;
    unit auto4E82E688_var;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        autoAB32FD36_g = UnitGroupSelected(EventPlayer());
        autoAB32FD36_u = UnitGroupCount(autoAB32FD36_g, c_unitCountAll);
        for (;; autoAB32FD36_u -= 1) {
            autoAB32FD36_var = UnitGroupUnitFromEnd(autoAB32FD36_g, autoAB32FD36_u);
            if (autoAB32FD36_var == null) { break; }
            UnitSetPropertyFixed(autoAB32FD36_var, c_unitPropLifeMax, UnitTypeGetProperty(UnitGetType(autoAB32FD36_var), c_unitPropLifeMax));
            UnitSetPropertyFixed(autoAB32FD36_var, c_unitPropShieldsMax, UnitTypeGetProperty(UnitGetType(autoAB32FD36_var), c_unitPropShieldsMax));
            UnitSetPropertyFixed(autoAB32FD36_var, c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(autoAB32FD36_var, c_unitPropShieldsPercent, 100.0);
        }
    }
    else {
        if ((StringWord(EventChatMessage(false), 3) == "2")) {
            auto045080F6_g = UnitGroupSelected(EventPlayer());
            auto045080F6_u = UnitGroupCount(auto045080F6_g, c_unitCountAll);
            for (;; auto045080F6_u -= 1) {
                auto045080F6_var = UnitGroupUnitFromEnd(auto045080F6_g, auto045080F6_u);
                if (auto045080F6_var == null) { break; }
                UnitSetPropertyFixed(auto045080F6_var, c_unitPropShieldsMax, StringToFixed(StringWord(EventChatMessage(false), 2)));
                UnitSetPropertyFixed(auto045080F6_var, c_unitPropShieldsPercent, 100.0);
            }
        }
        else {
            auto4E82E688_g = UnitGroupSelected(EventPlayer());
            auto4E82E688_u = UnitGroupCount(auto4E82E688_g, c_unitCountAll);
            for (;; auto4E82E688_u -= 1) {
                auto4E82E688_var = UnitGroupUnitFromEnd(auto4E82E688_g, auto4E82E688_u);
                if (auto4E82E688_var == null) { break; }
                UnitSetPropertyFixed(auto4E82E688_var, c_unitPropLifeMax, StringToFixed(StringWord(EventChatMessage(false), 2)));
                UnitSetPropertyFixed(auto4E82E688_var, c_unitPropLifePercent, 100.0);
            }
        }
    }
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Life_Init () {
    libCOTF_gt_UT_Life = TriggerCreate("libCOTF_gt_UT_Life_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Life, c_playerAny, "-life", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Energy
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Energy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC7537207_g;
    int autoC7537207_u;
    unit autoC7537207_var;
    unitgroup auto8AB8F83C_g;
    int auto8AB8F83C_u;
    unit auto8AB8F83C_var;
    unitgroup auto8C88BEC3_g;
    int auto8C88BEC3_u;
    unit auto8C88BEC3_var;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        autoC7537207_g = UnitGroupSelected(EventPlayer());
        autoC7537207_u = UnitGroupCount(autoC7537207_g, c_unitCountAll);
        for (;; autoC7537207_u -= 1) {
            autoC7537207_var = UnitGroupUnitFromEnd(autoC7537207_g, autoC7537207_u);
            if (autoC7537207_var == null) { break; }
            UnitSetPropertyFixed(autoC7537207_var, c_unitPropEnergyMax, UnitTypeGetProperty(UnitGetType(autoC7537207_var), c_unitPropEnergyMax));
            UnitSetPropertyFixed(autoC7537207_var, c_unitPropLifeRegen, UnitTypeGetProperty(UnitGetType(autoC7537207_var), c_unitPropEnergyRegen));
            UnitSetPropertyFixed(autoC7537207_var, c_unitPropEnergyPercent, 100.0);
        }
    }
    else {
        if ((StringWord(EventChatMessage(false), 3) == "regen")) {
            auto8AB8F83C_g = UnitGroupSelected(EventPlayer());
            auto8AB8F83C_u = UnitGroupCount(auto8AB8F83C_g, c_unitCountAll);
            for (;; auto8AB8F83C_u -= 1) {
                auto8AB8F83C_var = UnitGroupUnitFromEnd(auto8AB8F83C_g, auto8AB8F83C_u);
                if (auto8AB8F83C_var == null) { break; }
                UnitSetPropertyFixed(auto8AB8F83C_var, c_unitPropEnergyRegen, StringToFixed(StringWord(EventChatMessage(false), 2)));
            }
        }
        else {
            auto8C88BEC3_g = UnitGroupSelected(EventPlayer());
            auto8C88BEC3_u = UnitGroupCount(auto8C88BEC3_g, c_unitCountAll);
            for (;; auto8C88BEC3_u -= 1) {
                auto8C88BEC3_var = UnitGroupUnitFromEnd(auto8C88BEC3_g, auto8C88BEC3_u);
                if (auto8C88BEC3_var == null) { break; }
                UnitSetPropertyFixed(auto8C88BEC3_var, c_unitPropEnergyMax, StringToFixed(StringWord(EventChatMessage(false), 2)));
                UnitSetPropertyFixed(auto8C88BEC3_var, c_unitPropEnergyPercent, 100.0);
            }
        }
    }
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Energy_Init () {
    libCOTF_gt_UT_Energy = TriggerCreate("libCOTF_gt_UT_Energy_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Energy, c_playerAny, "-energy", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Movement Speed
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_MovementSpeed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto07A0E7C7_g;
    int auto07A0E7C7_u;
    unit auto07A0E7C7_var;
    unitgroup auto6440A0CD_g;
    int auto6440A0CD_u;
    unit auto6440A0CD_var;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        auto07A0E7C7_g = UnitGroupSelected(EventPlayer());
        auto07A0E7C7_u = UnitGroupCount(auto07A0E7C7_g, c_unitCountAll);
        for (;; auto07A0E7C7_u -= 1) {
            auto07A0E7C7_var = UnitGroupUnitFromEnd(auto07A0E7C7_g, auto07A0E7C7_u);
            if (auto07A0E7C7_var == null) { break; }
            UnitSetPropertyFixed(auto07A0E7C7_var, c_unitPropMovementSpeed, UnitTypeGetProperty(UnitGetType(auto07A0E7C7_var), c_unitPropMovementSpeed));
        }
    }
    else {
        auto6440A0CD_g = UnitGroupSelected(EventPlayer());
        auto6440A0CD_u = UnitGroupCount(auto6440A0CD_g, c_unitCountAll);
        for (;; auto6440A0CD_u -= 1) {
            auto6440A0CD_var = UnitGroupUnitFromEnd(auto6440A0CD_g, auto6440A0CD_u);
            if (auto6440A0CD_var == null) { break; }
            UnitSetPropertyFixed(auto6440A0CD_var, c_unitPropMovementSpeed, StringToFixed(StringWord(EventChatMessage(false), 2)));
        }
    }
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_MovementSpeed_Init () {
    libCOTF_gt_UT_MovementSpeed = TriggerCreate("libCOTF_gt_UT_MovementSpeed_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_MovementSpeed, c_playerAny, "-ms", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Acceleration
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Acceleration_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC342E881_g;
    int autoC342E881_u;
    unit autoC342E881_var;
    unitgroup auto5C6BFBFF_g;
    int auto5C6BFBFF_u;
    unit auto5C6BFBFF_var;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        autoC342E881_g = UnitGroupSelected(EventPlayer());
        autoC342E881_u = UnitGroupCount(autoC342E881_g, c_unitCountAll);
        for (;; autoC342E881_u -= 1) {
            autoC342E881_var = UnitGroupUnitFromEnd(autoC342E881_g, autoC342E881_u);
            if (autoC342E881_var == null) { break; }
            CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(autoC342E881_var), "Acceleration", EventPlayer(), CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(autoC342E881_var), "Acceleration", 7), c_upgradeOperationSet);
            TextTagCreate(StringToText(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(autoC342E881_var), "Acceleration", 3)), 24, UnitGetPosition(autoC342E881_var), 1.0, true, false, PlayerGroupAll());
            TextTagAttachToUnit(TextTagLastCreated(), autoC342E881_var, 1.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 15.0);
            TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
        }
    }
    else {
        auto5C6BFBFF_g = UnitGroupSelected(EventPlayer());
        auto5C6BFBFF_u = UnitGroupCount(auto5C6BFBFF_g, c_unitCountAll);
        for (;; auto5C6BFBFF_u -= 1) {
            auto5C6BFBFF_var = UnitGroupUnitFromEnd(auto5C6BFBFF_g, auto5C6BFBFF_u);
            if (auto5C6BFBFF_var == null) { break; }
            CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(auto5C6BFBFF_var), "Acceleration", EventPlayer(), StringWord(EventChatMessage(false), 2));
        }
    }
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Acceleration_Init () {
    libCOTF_gt_UT_Acceleration = TriggerCreate("libCOTF_gt_UT_Acceleration_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Acceleration, c_playerAny, "-acc", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Range
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Range_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoF77A17D8_g;
    int autoF77A17D8_u;
    unit autoF77A17D8_var;
    int autoD936206F_ae;
    const int autoD936206F_ai = 1;
    unitgroup autoE6B50C5D_g;
    int autoE6B50C5D_u;
    unit autoE6B50C5D_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != null)) {
        autoE6B50C5D_g = UnitGroupSelected(EventPlayer());
        autoE6B50C5D_u = UnitGroupCount(autoE6B50C5D_g, c_unitCountAll);
        for (;; autoE6B50C5D_u -= 1) {
            autoE6B50C5D_var = UnitGroupUnitFromEnd(autoE6B50C5D_g, autoE6B50C5D_u);
            if (autoE6B50C5D_var == null) { break; }
            if ((StringWord(EventChatMessage(false), 3) != null)) {
                CatalogFieldValueModify(c_gameCatalogWeapon, UnitWeaponGet(autoE6B50C5D_var, StringToInt(StringWord(EventChatMessage(false), 3))), "Range", UnitGetOwner(autoE6B50C5D_var), StringWord(EventChatMessage(false), 2), c_upgradeOperationSet);
            }
            else {
                CatalogFieldValueModify(c_gameCatalogWeapon, UnitWeaponGet(autoE6B50C5D_var, 1), "Range", UnitGetOwner(autoE6B50C5D_var), StringWord(EventChatMessage(false), 2), c_upgradeOperationSet);
            }
        }
    }
    else {
        autoF77A17D8_g = UnitGroupSelected(EventPlayer());
        autoF77A17D8_u = UnitGroupCount(autoF77A17D8_g, c_unitCountAll);
        for (;; autoF77A17D8_u -= 1) {
            autoF77A17D8_var = UnitGroupUnitFromEnd(autoF77A17D8_g, autoF77A17D8_u);
            if (autoF77A17D8_var == null) { break; }
            autoD936206F_ae = UnitWeaponCount(autoF77A17D8_var);
            lv_i = 1;
            for ( ; ( (autoD936206F_ai >= 0 && lv_i <= autoD936206F_ae) || (autoD936206F_ai < 0 && lv_i >= autoD936206F_ae) ) ; lv_i += autoD936206F_ai ) {
                CatalogFieldValueModify(c_gameCatalogWeapon, UnitWeaponGet(autoF77A17D8_var, lv_i), "Range", UnitGetOwner(autoF77A17D8_var), CatalogFieldValueGet(c_gameCatalogWeapon, UnitWeaponGet(autoF77A17D8_var, lv_i), "Range", 7), c_upgradeOperationSet);
            }
        }
    }
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Range_Init () {
    libCOTF_gt_UT_Range = TriggerCreate("libCOTF_gt_UT_Range_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Range, c_playerAny, "-range", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ARange
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_ARange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vAbility;
    string lv_vAbv;

    // Automatic Variable Declarations
    unitgroup autoB7DE726C_g;
    int autoB7DE726C_u;
    unit autoB7DE726C_var;
    unit autoB895D7A9_unit;
    int autoB895D7A9_i;
    unitgroup auto2A7F8822_g;
    int auto2A7F8822_u;
    unit auto2A7F8822_var;
    unit autoEF88868E_unit;
    int autoEF88868E_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != null)) {
        autoB7DE726C_g = UnitGroupSelected(EventPlayer());
        autoB7DE726C_u = UnitGroupCount(autoB7DE726C_g, c_unitCountAll);
        for (;; autoB7DE726C_u -= 1) {
            autoB7DE726C_var = UnitGroupUnitFromEnd(autoB7DE726C_g, autoB7DE726C_u);
            if (autoB7DE726C_var == null) { break; }
            autoB895D7A9_unit = autoB7DE726C_var;
            autoB895D7A9_i = 1;
            for ( ; autoB895D7A9_i <= UnitAbilityCount(autoB895D7A9_unit) ; autoB895D7A9_i += 1 ) {
                lv_vAbility = UnitAbilityGet(autoB895D7A9_unit, autoB895D7A9_i);
                if ((AbilityClass(lv_vAbility) != c_classIdCAbilAttack) && (AbilityClass(lv_vAbility) != c_classIdCAbilMove) && (AbilityClass(lv_vAbility) != c_classIdCAbilStop) && (AbilityClass(lv_vAbility) != c_classIdCAbilMorph) && (AbilityClass(lv_vAbility) != c_classIdCAbilRally)) {
                    lv_vAbv = (lv_vAbility);
                    CatalogFieldValueSet(c_gameCatalogAbil, lv_vAbv, "Range[" + IntToString(0) + "]", UnitGetOwner(autoB7DE726C_var), StringWord(EventChatMessage(false), 2));
                    TextExpressionSetToken("Param/Expression/lib_COTF_B8C349D9", "A", StringToText((lv_vAbility)));
                    TextExpressionSetToken("Param/Expression/lib_COTF_B8C349D9", "C", StringToText(StringWord(EventChatMessage(false), 2)));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COTF_B8C349D9"), true);
                }

            }
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_612734FF"));
        auto2A7F8822_g = UnitGroupSelected(EventPlayer());
        auto2A7F8822_u = UnitGroupCount(auto2A7F8822_g, c_unitCountAll);
        for (;; auto2A7F8822_u -= 1) {
            auto2A7F8822_var = UnitGroupUnitFromEnd(auto2A7F8822_g, auto2A7F8822_u);
            if (auto2A7F8822_var == null) { break; }
            autoEF88868E_unit = auto2A7F8822_var;
            autoEF88868E_i = 1;
            for ( ; autoEF88868E_i <= UnitAbilityCount(autoEF88868E_unit) ; autoEF88868E_i += 1 ) {
                lv_vAbility = UnitAbilityGet(autoEF88868E_unit, autoEF88868E_i);
                if ((AbilityClass(lv_vAbility) != c_classIdCAbilAttack) && (AbilityClass(lv_vAbility) != c_classIdCAbilMove) && (AbilityClass(lv_vAbility) != c_classIdCAbilStop) && (AbilityClass(lv_vAbility) != c_classIdCAbilMorph) && (AbilityClass(lv_vAbility) != c_classIdCAbilRally)) {
                    lv_vAbv = (lv_vAbility);
                    CatalogFieldValueSet(c_gameCatalogAbil, lv_vAbv, "Range[" + IntToString(0) + "]", UnitGetOwner(auto2A7F8822_var), CatalogFieldValueGet(c_gameCatalogAbil, lv_vAbv, "Range[" + IntToString(0) + "]", 0));
                    TextExpressionSetToken("Param/Expression/lib_COTF_E2B61A79", "A", StringToText((lv_vAbility)));
                    TextExpressionSetToken("Param/Expression/lib_COTF_E2B61A79", "C", StringToText(StringWord(EventChatMessage(false), 2)));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COTF_E2B61A79"), false);
                }

            }
        }
    }
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_ARange_Init () {
    libCOTF_gt_UT_ARange = TriggerCreate("libCOTF_gt_UT_ARange_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_ARange, c_playerAny, "-arange", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Armor
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Armor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto606D35EE_g;
    int auto606D35EE_u;
    unit auto606D35EE_var;
    unitgroup auto5F29BF93_g;
    int auto5F29BF93_u;
    unit auto5F29BF93_var;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != null)) {
        auto5F29BF93_g = UnitGroupSelected(EventPlayer());
        auto5F29BF93_u = UnitGroupCount(auto5F29BF93_g, c_unitCountAll);
        for (;; auto5F29BF93_u -= 1) {
            auto5F29BF93_var = UnitGroupUnitFromEnd(auto5F29BF93_g, auto5F29BF93_u);
            if (auto5F29BF93_var == null) { break; }
            if ((StringWord(EventChatMessage(false), 3) != null)) {
                CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(auto5F29BF93_var), "ShieldArmor", UnitGetOwner(auto5F29BF93_var), StringWord(EventChatMessage(false), 2), c_upgradeOperationSet);
            }
            else {
                CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(auto5F29BF93_var), "LifeArmor", UnitGetOwner(auto5F29BF93_var), StringWord(EventChatMessage(false), 2), c_upgradeOperationSet);
            }
        }
    }
    else {
        auto606D35EE_g = UnitGroupSelected(EventPlayer());
        auto606D35EE_u = UnitGroupCount(auto606D35EE_g, c_unitCountAll);
        for (;; auto606D35EE_u -= 1) {
            auto606D35EE_var = UnitGroupUnitFromEnd(auto606D35EE_g, auto606D35EE_u);
            if (auto606D35EE_var == null) { break; }
            CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(auto606D35EE_var), "LifeArmor", UnitGetOwner(auto606D35EE_var), CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(auto606D35EE_var), "LifeArmor", 7), c_upgradeOperationSet);
            CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(auto606D35EE_var), "ShieldArmor", UnitGetOwner(auto606D35EE_var), CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(auto606D35EE_var), "ShieldArmor", 7), c_upgradeOperationSet);
        }
    }
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Armor_Init () {
    libCOTF_gt_UT_Armor = TriggerCreate("libCOTF_gt_UT_Armor_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Armor, c_playerAny, "-armor", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_TintColor
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_TintColor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3686CFC4_g;
    int auto3686CFC4_u;
    unit auto3686CFC4_var;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3686CFC4_g = UnitGroupSelected(EventPlayer());
    auto3686CFC4_u = UnitGroupCount(auto3686CFC4_g, c_unitCountAll);
    for (;; auto3686CFC4_u -= 1) {
        auto3686CFC4_var = UnitGroupUnitFromEnd(auto3686CFC4_g, auto3686CFC4_u);
        if (auto3686CFC4_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto3686CFC4_var, (("SetTintColor " + StringWord(EventChatMessage(false), 2))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_TintColor_Init () {
    libCOTF_gt_UT_TintColor = TriggerCreate("libCOTF_gt_UT_TintColor_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_TintColor, c_playerAny, "-tint", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Behavior
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Behavior_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vBehavior;
    int lv_vAmount;

    // Automatic Variable Declarations
    unitgroup autoFB32AD92_g;
    int autoFB32AD92_u;
    unit autoFB32AD92_var;
    unitgroup auto19282C2F_g;
    int auto19282C2F_u;
    unit auto19282C2F_var;

    // Variable Initialization
    lv_vBehavior = (StringWord(EventChatMessage(false), 2));
    lv_vAmount = StringToInt(StringWord(EventChatMessage(false), 3));

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }

        if (!((lv_vBehavior != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_vAmount == 0)) {
        lv_vAmount = 1;
    }

    if ((lv_vAmount > 0)) {
        TextExpressionSetToken("Param/Expression/lib_COTF_E85255FA", "A", IntToText(lv_vAmount));
        TextExpressionSetToken("Param/Expression/lib_COTF_E85255FA", "B", StringToText((lv_vBehavior)));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_E85255FA"));
        autoFB32AD92_g = UnitGroupSelected(EventPlayer());
        autoFB32AD92_u = UnitGroupCount(autoFB32AD92_g, c_unitCountAll);
        for (;; autoFB32AD92_u -= 1) {
            autoFB32AD92_var = UnitGroupUnitFromEnd(autoFB32AD92_g, autoFB32AD92_u);
            if (autoFB32AD92_var == null) { break; }
            UnitBehaviorAddPlayer(autoFB32AD92_var, lv_vBehavior, EventPlayer(), lv_vAmount);
        }
    }
    else if ((lv_vAmount < 0)) {
        TextExpressionSetToken("Param/Expression/lib_COTF_EFE9AFE0", "A", IntToText(lv_vAmount));
        TextExpressionSetToken("Param/Expression/lib_COTF_EFE9AFE0", "B", StringToText((lv_vBehavior)));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_EFE9AFE0"));
        auto19282C2F_g = UnitGroupSelected(EventPlayer());
        auto19282C2F_u = UnitGroupCount(auto19282C2F_g, c_unitCountAll);
        for (;; auto19282C2F_u -= 1) {
            auto19282C2F_var = UnitGroupUnitFromEnd(auto19282C2F_g, auto19282C2F_u);
            if (auto19282C2F_var == null) { break; }
            UnitBehaviorRemovePlayer(auto19282C2F_var, lv_vBehavior, EventPlayer(), lv_vAmount);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Behavior_Init () {
    libCOTF_gt_UT_Behavior = TriggerCreate("libCOTF_gt_UT_Behavior_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Behavior, c_playerAny, "-behavior", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Scale
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Scale_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5951ED5E_g;
    int auto5951ED5E_u;
    unit auto5951ED5E_var;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto5951ED5E_g = UnitGroupSelected(EventPlayer());
    auto5951ED5E_u = UnitGroupCount(auto5951ED5E_g, c_unitCountAll);
    for (;; auto5951ED5E_u -= 1) {
        auto5951ED5E_var = UnitGroupUnitFromEnd(auto5951ED5E_g, auto5951ED5E_u);
        if (auto5951ED5E_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto5951ED5E_var, (("SetScale " + StringWord(EventChatMessage(false), 2))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Scale_Init () {
    libCOTF_gt_UT_Scale = TriggerCreate("libCOTF_gt_UT_Scale_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Scale, c_playerAny, "-scale", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_TimeScale
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_TimeScale_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vAmount;

    // Automatic Variable Declarations
    unitgroup auto3E3B6761_g;
    int auto3E3B6761_u;
    unit auto3E3B6761_var;

    // Variable Initialization
    lv_vAmount = StringToFixed(StringWord(EventChatMessage(false), 2));

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_vAmount >= 0.01)) {
        CatalogFieldValueSet(c_gameCatalogBehavior, "TimeScaleIncreased", "Modification.TimeScale", EventPlayer(), StringWord(EventChatMessage(false), 2));
        TextExpressionSetToken("Param/Expression/lib_COTF_4B801ADC", "A", FixedToText(lv_vAmount, 2));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_4B801ADC"));
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_COTF_9595374F", "A", StringExternal("Param/Value/lib_COTF_4DF62401"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_9595374F"));
    }
    auto3E3B6761_g = UnitGroupSelected(EventPlayer());
    auto3E3B6761_u = UnitGroupCount(auto3E3B6761_g, c_unitCountAll);
    for (;; auto3E3B6761_u -= 1) {
        auto3E3B6761_var = UnitGroupUnitFromEnd(auto3E3B6761_g, auto3E3B6761_u);
        if (auto3E3B6761_var == null) { break; }
        UnitBehaviorAddPlayer(auto3E3B6761_var, "TimeScaleIncreased", EventPlayer(), 1);
    }
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_TimeScale_Init () {
    libCOTF_gt_UT_TimeScale = TriggerCreate("libCOTF_gt_UT_TimeScale_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_TimeScale, c_playerAny, "-timescale", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ActorMsg
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_ActorMsg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE4358A0A_g;
    int autoE4358A0A_u;
    unit autoE4358A0A_var;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE4358A0A_g = UnitGroupSelected(EventPlayer());
    autoE4358A0A_u = UnitGroupCount(autoE4358A0A_g, c_unitCountAll);
    for (;; autoE4358A0A_u -= 1) {
        autoE4358A0A_var = UnitGroupUnitFromEnd(autoE4358A0A_g, autoE4358A0A_u);
        if (autoE4358A0A_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(autoE4358A0A_var, (StringSub(EventChatMessage(false), (StringLength(StringWord(EventChatMessage(false), 1))+1), StringLength(EventChatMessage(false)))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_ActorMsg_Init () {
    libCOTF_gt_UT_ActorMsg = TriggerCreate("libCOTF_gt_UT_ActorMsg_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_ActorMsg, c_playerAny, "-actorsend", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Air & Ground
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_AirGround_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto115E6F95_g;
    int auto115E6F95_u;
    unit auto115E6F95_var;
    unitgroup autoF27D74D0_g;
    int autoF27D74D0_u;
    unit autoF27D74D0_var;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventChatMessage(false) == "-airbeh")) {
        autoF27D74D0_g = UnitGroupSelected(EventPlayer());
        autoF27D74D0_u = UnitGroupCount(autoF27D74D0_g, c_unitCountAll);
        for (;; autoF27D74D0_u -= 1) {
            autoF27D74D0_var = UnitGroupUnitFromEnd(autoF27D74D0_g, autoF27D74D0_u);
            if (autoF27D74D0_var == null) { break; }
            if ((UnitBehaviorCount(autoF27D74D0_var, "GroundBeh") > 0)) {
                UnitBehaviorRemovePlayer(autoF27D74D0_var, "GroundBeh", 1, 1);
            }

            UnitBehaviorAddPlayer(autoF27D74D0_var, "AirBeh", 1, 1);
        }
    }
    else {
        auto115E6F95_g = UnitGroupSelected(EventPlayer());
        auto115E6F95_u = UnitGroupCount(auto115E6F95_g, c_unitCountAll);
        for (;; auto115E6F95_u -= 1) {
            auto115E6F95_var = UnitGroupUnitFromEnd(auto115E6F95_g, auto115E6F95_u);
            if (auto115E6F95_var == null) { break; }
            if ((UnitBehaviorCount(auto115E6F95_var, "AirBeh") > 0)) {
                UnitBehaviorRemovePlayer(auto115E6F95_var, "AirBeh", 1, 1);
            }

            UnitBehaviorAddPlayer(auto115E6F95_var, "GroundBeh", 1, 1);
        }
    }
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_AirGround_Init () {
    libCOTF_gt_UT_AirGround = TriggerCreate("libCOTF_gt_UT_AirGround_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_AirGround, c_playerAny, "-airbeh", false);
    TriggerAddEventChatMessage(libCOTF_gt_UT_AirGround, c_playerAny, "-groundbeh", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_EmpowerInit
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_EmpowerInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vHeath;
    string lv_vDamage;

    // Automatic Variable Declarations
    playergroup auto4BE99316_g;
    int auto4BE99316_var;
    unitgroup autoDE38203D_g;
    int autoDE38203D_u;
    unit autoDE38203D_var;

    // Variable Initialization
    lv_vHeath = "1";
    lv_vDamage = "1";

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vHeath = StringWord(EventChatMessage(false), 2);
    lv_vDamage = StringWord(EventChatMessage(false), 3);
    if ((StringWord(EventChatMessage(false), 2) == null)) {
        lv_vHeath = "0";
    }

    if ((StringWord(EventChatMessage(false), 3) == null)) {
        lv_vDamage = "0";
    }

    auto4BE99316_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto4BE99316_var = -1;
    while (true) {
        auto4BE99316_var = PlayerGroupNextPlayer(auto4BE99316_g, auto4BE99316_var);
        if (auto4BE99316_var < 0) { break; }
        if ((auto4BE99316_var == 2)) {
        }
        else {
            CatalogFieldValueSet(c_gameCatalogBehavior, "Empower", "Modification.DamageDealtFraction[" + IntToString(c_unitDamageTypeSpell) + "]", auto4BE99316_var, lv_vDamage);
            CatalogFieldValueSet(c_gameCatalogBehavior, "Empower", "Modification.DamageDealtFraction[" + IntToString(c_unitDamageTypeRanged) + "]", auto4BE99316_var, lv_vDamage);
            CatalogFieldValueSet(c_gameCatalogBehavior, "Empower", "Modification.DamageDealtFraction[" + IntToString(c_unitDamageTypeMelee) + "]", auto4BE99316_var, lv_vDamage);
            CatalogFieldValueSet(c_gameCatalogBehavior, "Empower", "Modification.DamageDealtFraction[" + IntToString(c_unitDamageTypeSplash) + "]", auto4BE99316_var, lv_vDamage);
            CatalogFieldValueSet(c_gameCatalogBehavior, "Empower", "Modification.VitalMaxAdditiveMultiplierArray[" + IntToString(c_unitVitalLife) + "]", auto4BE99316_var, lv_vHeath);
            CatalogFieldValueSet(c_gameCatalogBehavior, "Empower", "Modification.VitalMaxAdditiveMultiplierArray[" + IntToString(c_unitVitalShields) + "]", auto4BE99316_var, lv_vHeath);
        }
    }
    autoDE38203D_g = UnitGroupAlliance(1, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDE38203D_u = UnitGroupCount(autoDE38203D_g, c_unitCountAll);
    for (;; autoDE38203D_u -= 1) {
        autoDE38203D_var = UnitGroupUnitFromEnd(autoDE38203D_g, autoDE38203D_u);
        if (autoDE38203D_var == null) { break; }
        UnitBehaviorAddPlayer(autoDE38203D_var, "Empower", 3, 1);
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_5D07B742"));
    TriggerEnable(libCOTF_gt_UT_EmpowerUnitCreated, true);
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_EmpowerInit_Init () {
    libCOTF_gt_UT_EmpowerInit = TriggerCreate("libCOTF_gt_UT_EmpowerInit_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_EmpowerInit, c_playerAny, "-empower", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_EmpowerUnitCreated
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_EmpowerUnitCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), UnitGetOwner(EventUnitCreatedUnit())) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 2), UnitGetOwner(EventUnitCreatedUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnitCreatedUnit(), "Empower", 3, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_EmpowerUnitCreated_Init () {
    libCOTF_gt_UT_EmpowerUnitCreated = TriggerCreate("libCOTF_gt_UT_EmpowerUnitCreated_Func");
    TriggerEnable(libCOTF_gt_UT_EmpowerUnitCreated, false);
    TriggerAddEventUnitCreated(libCOTF_gt_UT_EmpowerUnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Horde_Init
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Horde_Init_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7292606F_g;
    int auto7292606F_u;
    unit auto7292606F_var;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOTF_gv_uT_Horde_Chance = StringToFixed(StringWord(EventChatMessage(false), 2));
    auto7292606F_g = UnitGroupAlliance(1, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    auto7292606F_u = UnitGroupCount(auto7292606F_g, c_unitCountAll);
    for (;; auto7292606F_u -= 1) {
        auto7292606F_var = UnitGroupUnitFromEnd(auto7292606F_g, auto7292606F_u);
        if (auto7292606F_var == null) { break; }
        libCOTF_gf_UT_Horde_Multiply(auto7292606F_var, libCOTF_gv_uT_Horde_Chance);
    }
    TextExpressionSetToken("Param/Expression/lib_COTF_38F4CC46", "A", IntToText(UnitGroupCount(libCOTF_gv_uT_Horde_UG, c_unitCountAlive)));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_38F4CC46"));
    TriggerEnable(libCOTF_gt_UT_Horde_UnitCreated, true);
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Horde_Init_Init () {
    libCOTF_gt_UT_Horde_Init = TriggerCreate("libCOTF_gt_UT_Horde_Init_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Horde_Init, c_playerAny, "-horde", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Horde_Remove
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Horde_Remove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vAmount;
    int lv_vCreated;

    // Automatic Variable Declarations
    unitgroup autoB55F480F_g;
    int autoB55F480F_u;
    unit autoB55F480F_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoB55F480F_g = libCOTF_gv_uT_Horde_UG;
    autoB55F480F_u = UnitGroupCount(autoB55F480F_g, c_unitCountAll);
    for (;; autoB55F480F_u -= 1) {
        autoB55F480F_var = UnitGroupUnitFromEnd(autoB55F480F_g, autoB55F480F_u);
        if (autoB55F480F_var == null) { break; }
        UnitRemove(autoB55F480F_var);
        UnitGroupRemove(libCOTF_gv_uT_Horde_UG, autoB55F480F_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Horde_Remove_Init () {
    libCOTF_gt_UT_Horde_Remove = TriggerCreate("libCOTF_gt_UT_Horde_Remove_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Horde_Remove, c_playerAny, "-remhorde", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Horde_Unit Created
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Horde_UnitCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_vIndexPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(UnitGroupAlliance(1, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterWorker) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0), EventUnitCreatedUnit()) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(libCOTF_gv_uT_Horde_UG, EventUnitCreatedUnit()) == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "InterceptorAiur"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Larva"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DehakaLarva"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "KerriganInfestBroodling"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Broodling"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "StukovInfestBroodling"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "BroodlingEscort"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOTF_gf_UT_Horde_Multiply(EventUnitCreatedUnit(), libCOTF_gv_uT_Horde_Chance);
    UnitGroupAddUnitGroup(libCOTF_gv_uT_Horde_UG_Wave, UnitLastCreatedGroup());
    TriggerExecute(libCOTF_gt_UT_Horde_SendWave, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Horde_UnitCreated_Init () {
    libCOTF_gt_UT_Horde_UnitCreated = TriggerCreate("libCOTF_gt_UT_Horde_UnitCreated_Func");
    TriggerEnable(libCOTF_gt_UT_Horde_UnitCreated, false);
    TriggerAddEventUnitCreated(libCOTF_gt_UT_Horde_UnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Horde_SendWave
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Horde_SendWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(5.0, c_timeAI);
    AIAttackWaveUseGroup(3, libCOTF_gv_uT_Horde_UG_Wave);
    AIAttackWaveSetGatherPoint(3, UnitGroupCenterOfGroup(libCOTF_gv_uT_Horde_UG_Wave));
    AIAttackWaveSetTargetPoint(3, PlayerStartLocation(RandomInt(1, 2)));
    AIAttackWaveSend(3, 1, false);
    UnitGroupClear(libCOTF_gv_uT_Horde_UG_Wave);
    Wait(2.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Horde_SendWave_Init () {
    libCOTF_gt_UT_Horde_SendWave = TriggerCreate("libCOTF_gt_UT_Horde_SendWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Mastery
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Mastery_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_v2String;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_v2String = StringWord(EventChatMessage(false), 2);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_v2String == null)) {
        libCOTF_gv_uT_MasteryTargetPlayer = 1;
    }
    else {
        libCOTF_gv_uT_MasteryTargetPlayer = StringToInt(lv_v2String);
    }
    TriggerEnable(libCOTF_gt_UT_CommanderSwitched, true);
    libCOTF_gf_UT_MasteryChoiceCreateUpdate(libCOTF_gv_uT_MasteryTargetPlayer);
    DialogSetVisible(libCOTF_gv_uT_MasteryDialog, PlayerGroupSingle(EventPlayer()), true);
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Mastery_Init () {
    libCOTF_gt_UT_Mastery = TriggerCreate("libCOTF_gt_UT_Mastery_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Mastery, c_playerAny, "-mastery", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_MasteryButtonClicked
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_MasteryButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOTF_gv_uT_MasteryButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOTF_gf_UT_MasteryPointsUpdate(libCOTF_gv_uT_MasteryTargetPlayer);
    DialogSetVisible(libCOTF_gv_uT_MasteryDialog, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_MasteryButtonClicked_Init () {
    libCOTF_gt_UT_MasteryButtonClicked = TriggerCreate("libCOTF_gt_UT_MasteryButtonClicked_Func");
    TriggerEnable(libCOTF_gt_UT_MasteryButtonClicked, false);
    TriggerAddEventDialogControl(libCOTF_gt_UT_MasteryButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_CommanderSwitched
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_CommanderSwitched_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_commIndex;

    // Automatic Variable Declarations
    const int auto653A2A6C_ae = libCOUI_gv_cUC_COMMSELECTMAX;
    const int auto653A2A6C_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_commIndex = 1;
    for ( ; ( (auto653A2A6C_ai >= 0 && lv_commIndex <= auto653A2A6C_ae) || (auto653A2A6C_ai < 0 && lv_commIndex >= auto653A2A6C_ae) ) ; lv_commIndex += auto653A2A6C_ai ) {
        if ((EventDialogControl() == libCOUI_gv_cU_CommanderButton[lv_commIndex])) {
            libCOTF_gf_UT_MasteryPointsUpdate(libCOTF_gv_uT_MasteryTargetPlayer);
            libCOTF_gf_UT_MasteryChoiceCreateUpdate(libCOTF_gv_uT_MasteryTargetPlayer);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_CommanderSwitched_Init () {
    libCOTF_gt_UT_CommanderSwitched = TriggerCreate("libCOTF_gt_UT_CommanderSwitched_Func");
    TriggerEnable(libCOTF_gt_UT_CommanderSwitched, false);
    TriggerAddEventDialogControl(libCOTF_gt_UT_CommanderSwitched, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Spawn Attack Wave
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_SpawnAttackWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vTech;
    int lv_vSize;
    fixed lv_vSupply;
    fixed lv_vVitals;
    int lv_vCost;

    // Automatic Variable Declarations
    string auto6B689F9F_val;
    string autoA7A08D54_val;
    unitgroup autoBC763B46_g;
    int autoBC763B46_u;
    unit autoBC763B46_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6B689F9F_val = StringWord(EventChatMessage(false), 2);
    if (auto6B689F9F_val == "1") {
        lv_vSize = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    }
    else if (auto6B689F9F_val == "2") {
        lv_vSize = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    }
    else if (auto6B689F9F_val == "3") {
        lv_vSize = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    }
    else if (auto6B689F9F_val == "4") {
        lv_vSize = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    }
    else if (auto6B689F9F_val == "5") {
        lv_vSize = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    }
    else if (auto6B689F9F_val == "6") {
        lv_vSize = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    }
    else {
        lv_vSize = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    }
    autoA7A08D54_val = StringWord(EventChatMessage(false), 3);
    if (autoA7A08D54_val == "1") {
        lv_vTech = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    }
    else if (autoA7A08D54_val == "2") {
        lv_vTech = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    }
    else if (autoA7A08D54_val == "3") {
        lv_vTech = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    }
    else if (autoA7A08D54_val == "4") {
        lv_vTech = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    }
    else if (autoA7A08D54_val == "5") {
        lv_vTech = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    }
    else if (autoA7A08D54_val == "6") {
        lv_vTech = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    }
    else {
        lv_vTech = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    }
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(3, 4, lv_vSize, lv_vTech, CameraGetTarget(EventPlayer()), false);
    autoBC763B46_g = libCOMI_gf_LastCreatedCoopAttackForce();
    autoBC763B46_u = UnitGroupCount(autoBC763B46_g, c_unitCountAll);
    for (;; autoBC763B46_u -= 1) {
        autoBC763B46_var = UnitGroupUnitFromEnd(autoBC763B46_g, autoBC763B46_u);
        if (autoBC763B46_var == null) { break; }
        lv_vCost += UnitTypeGetCost(UnitGetType(autoBC763B46_var), c_unitCostSumMineralsVespene);
        lv_vSupply += UnitGetPropertyFixed(autoBC763B46_var, c_unitPropSuppliesUsed, c_unitPropCurrent);
        lv_vVitals += UnitGetPropertyFixed(autoBC763B46_var, c_unitPropVitality, c_unitPropCurrent);
    }
    UnitGroupAddUnitGroup(libCOTF_gv_uT_LastAttackWave, libCOMI_gf_LastCreatedCoopAttackForce());
    if ((StringContains(EventChatMessage(false), "none", c_stringAnywhere, c_stringNoCase) == false)) {
        TextExpressionSetToken("Param/Expression/lib_COTF_E55F704B", "A", IntToText(lv_vCost));
        TextExpressionSetToken("Param/Expression/lib_COTF_E55F704B", "B", FixedToText(lv_vSupply, c_fixedPrecisionAny));
        TextExpressionSetToken("Param/Expression/lib_COTF_E55F704B", "C", FixedToText(lv_vVitals, c_fixedPrecisionAny));
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_COTF_E55F704B"), 30, UnitGroupCenterOfGroup(libCOMI_gf_LastCreatedCoopAttackForce()), 5.0, true, false, PlayerGroupAll());
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 30.0);
        TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_SpawnAttackWave_Init () {
    libCOTF_gt_UT_SpawnAttackWave = TriggerCreate("libCOTF_gt_UT_SpawnAttackWave_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_SpawnAttackWave, c_playerAny, "-aw", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_AttackWaveAttack
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_AttackWaveAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;
    unitgroup lv_vUG;

    // Automatic Variable Declarations
    const int auto15F65BF9_ae = 4;
    const int auto15F65BF9_ai = 1;

    // Variable Initialization
    lv_vUG = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((AITimeIsPaused() == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_E3BAFEFE"));
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_A32B0306"));
        lv_vPlayer = 3;
        for ( ; ( (auto15F65BF9_ai >= 0 && lv_vPlayer <= auto15F65BF9_ae) || (auto15F65BF9_ai < 0 && lv_vPlayer >= auto15F65BF9_ae) ) ; lv_vPlayer += auto15F65BF9_ai ) {
            lv_vUG = UnitGroupFilterPlayer(libCOTF_gv_uT_LastAttackWave, lv_vPlayer, 0);
            AIAttackWaveUseGroup(lv_vPlayer, lv_vUG);
            AIAttackWaveSetGatherPoint(lv_vPlayer, UnitGroupCenterOfGroup(lv_vUG));
            AIAttackWaveSetTargetPoint(lv_vPlayer, PlayerStartLocation(EventPlayer()));
            AIAttackWaveSend(lv_vPlayer, 0, false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_AttackWaveAttack_Init () {
    libCOTF_gt_UT_AttackWaveAttack = TriggerCreate("libCOTF_gt_UT_AttackWaveAttack_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_AttackWaveAttack, c_playerAny, "-attack", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Remove Wave
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_RemoveWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1D98A6DD_g;
    int auto1D98A6DD_u;
    unit auto1D98A6DD_var;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto1D98A6DD_g = libCOTF_gv_uT_LastAttackWave;
    auto1D98A6DD_u = UnitGroupCount(auto1D98A6DD_g, c_unitCountAll);
    for (;; auto1D98A6DD_u -= 1) {
        auto1D98A6DD_var = UnitGroupUnitFromEnd(auto1D98A6DD_g, auto1D98A6DD_u);
        if (auto1D98A6DD_var == null) { break; }
        UnitRemove(auto1D98A6DD_var);
        UnitGroupRemove(libCOTF_gv_uT_LastAttackWave, auto1D98A6DD_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_RemoveWave_Init () {
    libCOTF_gt_UT_RemoveWave = TriggerCreate("libCOTF_gt_UT_RemoveWave_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_RemoveWave, c_playerAny, "-remw", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Camera_TurnOnOff
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Camera_TurnOnOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOTF_gv_uT_Camera_CameraActive == false)) {
        libCOTF_gv_uT_Camera_CameraActive = true;
        TriggerExecute(libCOTF_gt_UT_Camera_PeriodicUpdate, true, false);
        TriggerEnable(libCOTF_gt_UT_Camera_KeyDown, true);
        TriggerEnable(libCOTF_gt_UT_Camera_KeyUp, true);
        UnitClearSelection(EventPlayer());
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_4B7A9763"));
    }
    else {
        libCOTF_gv_uT_Camera_CameraActive = false;
        TriggerEnable(libCOTF_gt_UT_Camera_KeyDown, false);
        TriggerEnable(libCOTF_gt_UT_Camera_KeyUp, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_D54D5CBF"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Camera_TurnOnOff_Init () {
    libCOTF_gt_UT_Camera_TurnOnOff = TriggerCreate("libCOTF_gt_UT_Camera_TurnOnOff_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Camera_TurnOnOff, c_playerAny, "-cam", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Camera_Reset
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Camera_Reset_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraSetValue(EventPlayer(), c_cameraValueYaw, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueYaw), 1.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValuePitch, CameraInfoGetValue(CameraInfoDefault(), c_cameraValuePitch), 1.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueDistance, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), 1.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueDepthOfField, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDepthOfField), 1.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueRoll, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueRoll), 1.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueFieldOfView, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueFieldOfView), 1.0, -1, 10.0);
    libCOTF_gv_uT_Camera_AngleofAttack[EventPlayer()] = CameraInfoGetValue(CameraInfoDefault(), c_cameraValuePitch);
    libCOTF_gv_uT_Camera_Rotation[EventPlayer()] = CameraInfoGetValue(CameraInfoDefault(), c_cameraValueYaw);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_A7A15CEC"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Camera_Reset_Init () {
    libCOTF_gt_UT_Camera_Reset = TriggerCreate("libCOTF_gt_UT_Camera_Reset_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Camera_Reset, c_playerAny, "-cam reset", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Camera_Top
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Camera_Top_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraPan(EventPlayer(), RegionGetCenter(RegionPlayableMap()), 2.0, -1, 10.0, false);
    CameraSetValue(EventPlayer(), c_cameraValueFieldOfView, 45.0, 2.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueRoll, 0.0, 2.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueDepthOfField, 0.0, 2.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueDistance, (libNtve_gf_WidthOfRegion(RegionPlayableMap()) * 1.5), 2.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValuePitch, 90.0, 2.0, -1, 10.0);
    libCOTF_gv_uT_Camera_AngleofAttack[EventPlayer()] = 90.0;
    CameraSetValue(EventPlayer(), c_cameraValueYaw, 90.0, 2.0, -1, 10.0);
    libCOTF_gv_uT_Camera_Rotation[EventPlayer()] = 90.0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Camera_Top_Init () {
    libCOTF_gt_UT_Camera_Top = TriggerCreate("libCOTF_gt_UT_Camera_Top_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Camera_Top, c_playerAny, "-cam top", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Camera_Key Up
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Camera_KeyUp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto98A4B46A_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto98A4B46A_val = EventKeyPressed();
    if (auto98A4B46A_val == c_keyQ) {
        libCOTF_gv_uT_Camera_ActiveKeys[(libCOTF_ge_UT_Camera_Keys_Q)][EventPlayer()] = false;
    }
    else if (auto98A4B46A_val == c_keyE) {
        libCOTF_gv_uT_Camera_ActiveKeys[(libCOTF_ge_UT_Camera_Keys_E)][EventPlayer()] = false;
    }
    else if (auto98A4B46A_val == c_keyW) {
        libCOTF_gv_uT_Camera_ActiveKeys[(libCOTF_ge_UT_Camera_Keys_W)][EventPlayer()] = false;
    }
    else if (auto98A4B46A_val == c_keyS) {
        libCOTF_gv_uT_Camera_ActiveKeys[(libCOTF_ge_UT_Camera_Keys_S)][EventPlayer()] = false;
    }
    else if (auto98A4B46A_val == c_keyA) {
        libCOTF_gv_uT_Camera_ActiveKeys[(libCOTF_ge_UT_Camera_Keys_A)][EventPlayer()] = false;
    }
    else if (auto98A4B46A_val == c_keyD) {
        libCOTF_gv_uT_Camera_ActiveKeys[(libCOTF_ge_UT_Camera_Keys_D)][EventPlayer()] = false;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Camera_KeyUp_Init () {
    libCOTF_gt_UT_Camera_KeyUp = TriggerCreate("libCOTF_gt_UT_Camera_KeyUp_Func");
    TriggerEnable(libCOTF_gt_UT_Camera_KeyUp, false);
    TriggerAddEventKeyPressed(libCOTF_gt_UT_Camera_KeyUp, c_playerAny, c_keyNone, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Camera_Key Down
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Camera_KeyDown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto43C785AB_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto43C785AB_val = EventKeyPressed();
    if (auto43C785AB_val == c_keyQ) {
        libCOTF_gv_uT_Camera_ActiveKeys[(libCOTF_ge_UT_Camera_Keys_Q)][EventPlayer()] = true;
    }
    else if (auto43C785AB_val == c_keyE) {
        libCOTF_gv_uT_Camera_ActiveKeys[(libCOTF_ge_UT_Camera_Keys_E)][EventPlayer()] = true;
    }
    else if (auto43C785AB_val == c_keyW) {
        libCOTF_gv_uT_Camera_ActiveKeys[(libCOTF_ge_UT_Camera_Keys_W)][EventPlayer()] = true;
    }
    else if (auto43C785AB_val == c_keyS) {
        libCOTF_gv_uT_Camera_ActiveKeys[(libCOTF_ge_UT_Camera_Keys_S)][EventPlayer()] = true;
    }
    else if (auto43C785AB_val == c_keyA) {
        libCOTF_gv_uT_Camera_ActiveKeys[(libCOTF_ge_UT_Camera_Keys_A)][EventPlayer()] = true;
    }
    else if (auto43C785AB_val == c_keyD) {
        libCOTF_gv_uT_Camera_ActiveKeys[(libCOTF_ge_UT_Camera_Keys_D)][EventPlayer()] = true;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Camera_KeyDown_Init () {
    libCOTF_gt_UT_Camera_KeyDown = TriggerCreate("libCOTF_gt_UT_Camera_KeyDown_Func");
    TriggerEnable(libCOTF_gt_UT_Camera_KeyDown, false);
    TriggerAddEventKeyPressed(libCOTF_gt_UT_Camera_KeyDown, c_playerAny, c_keyNone, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Camera_PeriodicUpdate
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Camera_PeriodicUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vDuration;
    fixed lv_vDistanceStep;
    fixed lv_vBaseDistanceStep;
    fixed lv_vAngleStep;
    fixed lv_vRotationStep;
    int lv_vPlayer;

    // Automatic Variable Declarations
    const int auto6E088A1C_ae = 2;
    const int auto6E088A1C_ai = 1;

    // Variable Initialization
    lv_vDuration = 0.5;
    lv_vDistanceStep = 6.0;
    lv_vBaseDistanceStep = 8.0;
    lv_vAngleStep = 0.5;
    lv_vRotationStep = 1.5;
    lv_vPlayer = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libCOTF_gv_uT_Camera_CameraActive == true)) {
        lv_vPlayer = 1;
        for ( ; ( (auto6E088A1C_ai >= 0 && lv_vPlayer <= auto6E088A1C_ae) || (auto6E088A1C_ai < 0 && lv_vPlayer >= auto6E088A1C_ae) ) ; lv_vPlayer += auto6E088A1C_ai ) {
            if ((libCOTF_gv_uT_Camera_ActiveKeys[(libCOTF_ge_UT_Camera_Keys_Q)][lv_vPlayer] == true)) {
                if ((CameraGetDistance(lv_vPlayer) >= 60.0)) {
                    lv_vDistanceStep = (lv_vBaseDistanceStep * 2.0);
                }
                else {
                    lv_vDistanceStep = lv_vBaseDistanceStep;
                }
                if ((CameraGetDistance(lv_vPlayer) <= 20.0)) {
                    lv_vDistanceStep = (lv_vBaseDistanceStep * 0.33);
                }
                else {
                    lv_vDistanceStep = lv_vBaseDistanceStep;
                }
                CameraSetValue(lv_vPlayer, c_cameraValueDistance, (CameraGetDistance(lv_vPlayer) - lv_vDistanceStep), lv_vDuration, -1, 10.0);
            }

            if ((libCOTF_gv_uT_Camera_ActiveKeys[(libCOTF_ge_UT_Camera_Keys_E)][lv_vPlayer] == true)) {
                if ((CameraGetDistance(lv_vPlayer) >= 60.0)) {
                    lv_vDistanceStep = (lv_vBaseDistanceStep * 2.0);
                }
                else {
                    lv_vDistanceStep = lv_vBaseDistanceStep;
                }
                if ((CameraGetDistance(lv_vPlayer) <= 20.0)) {
                    lv_vDistanceStep = (lv_vBaseDistanceStep * 0.33);
                }
                else {
                    lv_vDistanceStep = lv_vBaseDistanceStep;
                }
                CameraSetValue(lv_vPlayer, c_cameraValueDistance, (CameraGetDistance(lv_vPlayer) + lv_vDistanceStep), lv_vDuration, -1, 10.0);
            }

            if ((libCOTF_gv_uT_Camera_ActiveKeys[(libCOTF_ge_UT_Camera_Keys_W)][lv_vPlayer] == true)) {
                libCOTF_gv_uT_Camera_AngleofAttack[lv_vPlayer] += lv_vAngleStep;
                if ((libCOTF_gv_uT_Camera_AngleofAttack[lv_vPlayer] > 90.0)) {
                    libCOTF_gv_uT_Camera_AngleofAttack[lv_vPlayer] = 90.0;
                }

                CameraSetValue(lv_vPlayer, c_cameraValuePitch, libCOTF_gv_uT_Camera_AngleofAttack[lv_vPlayer], lv_vDuration, -1, 10.0);
            }

            if ((libCOTF_gv_uT_Camera_ActiveKeys[(libCOTF_ge_UT_Camera_Keys_S)][lv_vPlayer] == true)) {
                libCOTF_gv_uT_Camera_AngleofAttack[lv_vPlayer] -= lv_vAngleStep;
                if ((libCOTF_gv_uT_Camera_AngleofAttack[lv_vPlayer] < -90.0)) {
                    libCOTF_gv_uT_Camera_AngleofAttack[lv_vPlayer] = -90.0;
                }

                CameraSetValue(lv_vPlayer, c_cameraValuePitch, libCOTF_gv_uT_Camera_AngleofAttack[lv_vPlayer], lv_vDuration, -1, 10.0);
            }

            if ((libCOTF_gv_uT_Camera_ActiveKeys[(libCOTF_ge_UT_Camera_Keys_A)][lv_vPlayer] == true)) {
                libCOTF_gv_uT_Camera_Rotation[lv_vPlayer] -= lv_vRotationStep;
                CameraSetValue(lv_vPlayer, c_cameraValueYaw, libCOTF_gv_uT_Camera_Rotation[lv_vPlayer], lv_vDuration, -1, 10.0);
            }

            if ((libCOTF_gv_uT_Camera_ActiveKeys[(libCOTF_ge_UT_Camera_Keys_D)][lv_vPlayer] == true)) {
                libCOTF_gv_uT_Camera_Rotation[lv_vPlayer] += lv_vRotationStep;
                CameraSetValue(lv_vPlayer, c_cameraValueYaw, libCOTF_gv_uT_Camera_Rotation[lv_vPlayer], lv_vDuration, -1, 10.0);
            }

        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Camera_PeriodicUpdate_Init () {
    libCOTF_gt_UT_Camera_PeriodicUpdate = TriggerCreate("libCOTF_gt_UT_Camera_PeriodicUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DoF
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_DoF_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_COTF_FB62DE2D", "B", FixedToText(StringToFixed(StringWord(EventChatMessage(false), 2)), 0));
    TextExpressionSetToken("Param/Expression/lib_COTF_FB62DE2D", "A", FixedToText(CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDepthOfField), 0));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_FB62DE2D"));
    CameraSetValue(EventPlayer(), c_cameraValueDepthOfField, StringToFixed(StringWord(EventChatMessage(false), 2)), 0.5, -1, 10.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_DoF_Init () {
    libCOTF_gt_UT_DoF = TriggerCreate("libCOTF_gt_UT_DoF_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_DoF, c_playerAny, "-dof", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FoV
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_FoV_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_COTF_EDAB19E3", "B", FixedToText(StringToFixed(StringWord(EventChatMessage(false), 2)), 0));
    TextExpressionSetToken("Param/Expression/lib_COTF_EDAB19E3", "A", FixedToText(CameraInfoGetValue(CameraInfoDefault(), c_cameraValueFieldOfView), 0));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_EDAB19E3"));
    CameraSetValue(EventPlayer(), c_cameraValueFieldOfView, StringToFixed(StringWord(EventChatMessage(false), 2)), 0.5, -1, 10.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_FoV_Init () {
    libCOTF_gt_UT_FoV = TriggerCreate("libCOTF_gt_UT_FoV_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_FoV, c_playerAny, "-fov", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Dummy
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Dummy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;

    // Automatic Variable Declarations
    string auto394621A5_val;
    const int autoB2B54C12_ae = 20;
    int autoB2B54C12_var;

    // Variable Initialization
    lv_vPlayer = 3;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto394621A5_val = StringWord(EventChatMessage(false), 2);
    if (auto394621A5_val == "armored") {
        UnitCreate(1, "DummyArmored", 0, lv_vPlayer, CameraGetTarget(EventPlayer()), 240.0);
    }
    else if (auto394621A5_val == "light") {
        UnitCreate(1, "DummyLight", 0, lv_vPlayer, CameraGetTarget(EventPlayer()), 240.0);
    }
    else if (auto394621A5_val == "structure") {
        UnitCreate(1, "DummyStructure", 0, lv_vPlayer, CameraGetTarget(EventPlayer()), 240.0);
    }
    else {
        UnitCreate(1, "Dummy", 0, lv_vPlayer, CameraGetTarget(EventPlayer()), 240.0);
    }
    TextTagCreate(StringExternal("Param/Value/lib_COTF_AD44F633"), 18, UnitGetPosition(UnitLastCreated()), 1.0, true, false, PlayerGroupAll());
    TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 1.0);
    TextTagSetBackgroundImage(TextTagLastCreated(), "Assets\\Textures\\void_pure_black_backgroundcolor_diff.dds", true);
    TextTagShowBackground(TextTagLastCreated(), true);
    libCOTF_gf_StoreTextTagForUnit(UnitLastCreated(), 1, TextTagLastCreated());
    autoB2B54C12_var = 1;
    for ( ; autoB2B54C12_var <= autoB2B54C12_ae; autoB2B54C12_var += 1 ) {
        if ((UnitIsAlive(libCOTF_gv_uT_DummyUnits[autoB2B54C12_var]) == false)) {
            libCOTF_gv_uT_DummyUnits[autoB2B54C12_var] = UnitLastCreated();
            UnitSetCustomValue(UnitLastCreated(), libCOTF_gv_uT_DummyCustomValue, autoB2B54C12_var);
            break;
        }

    }
    UnitGroupAdd(libCOTF_gv_uT_Dummies, UnitLastCreated());
    TriggerEnable(libCOTF_gt_UT_DummyTakesDamage, true);
    TriggerEnable(libCOTF_gt_UT_DummyUpdate, true);
    TriggerEnable(libCOTF_gt_UT_DummyDestroyed, true);
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Dummy_Init () {
    libCOTF_gt_UT_Dummy = TriggerCreate("libCOTF_gt_UT_Dummy_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Dummy, c_playerAny, "-dummy", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DummyTakesDamage
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_DummyTakesDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vIndex = FixedToInt(UnitGetCustomValue(EventUnit(), libCOTF_gv_uT_DummyCustomValue));

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libCOTF_gv_uT_Dummies, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOTF_gv_uT_DummyDamage[lv_vIndex][0] += EventUnitDamageAmount();
    libCOTF_gv_uT_DummyDamage[lv_vIndex][1] += EventUnitDamageAmount();
    if ((TimerGetElapsed(libCOTF_gv_uT_DummyTimer[lv_vIndex][0]) <= 0.0)) {
        TimerStart(libCOTF_gv_uT_DummyTimer[lv_vIndex][0], 5.0, false, c_timeGame);
        if ((TimerGetElapsed(libCOTF_gv_uT_DummyTimer[lv_vIndex][1]) <= 0.0)) {
            TimerStart(libCOTF_gv_uT_DummyTimer[lv_vIndex][1], 524287.0, false, c_timeGame);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_DummyTakesDamage_Init () {
    libCOTF_gt_UT_DummyTakesDamage = TriggerCreate("libCOTF_gt_UT_DummyTakesDamage_Func");
    TriggerEnable(libCOTF_gt_UT_DummyTakesDamage, false);
    TriggerAddEventUnitDamaged(libCOTF_gt_UT_DummyTakesDamage, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DummyUpdate
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_DummyUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto21BFCC3A_ae = 20;
    const int auto21BFCC3A_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    for ( ; ( (auto21BFCC3A_ai >= 0 && lv_index <= auto21BFCC3A_ae) || (auto21BFCC3A_ai < 0 && lv_index >= auto21BFCC3A_ae) ) ; lv_index += auto21BFCC3A_ai ) {
        if ((EventTimer() == libCOTF_gv_uT_DummyTimer[lv_index][0])) {
            if ((libCOTF_gv_uT_DummyDamage[lv_index][0] <= 0.5)) {
                TextExpressionSetToken("Param/Expression/lib_COTF_0854C1B4", "A", FixedToText((libCOTF_gv_uT_DummyDamage[lv_index][0] / 5.0), 0));
                TextExpressionSetToken("Param/Expression/lib_COTF_0854C1B4", "B", FixedToText((TimerGetElapsed(libCOTF_gv_uT_DummyTimer[lv_index][1]) - 5.0), 0));
                TextExpressionSetToken("Param/Expression/lib_COTF_0854C1B4", "C", FixedToText((libCOTF_gv_uT_DummyDamage[lv_index][1] / (TimerGetElapsed(libCOTF_gv_uT_DummyTimer[lv_index][1]) - 5.0)), 1));
                TextTagSetText(libCOTF_gf_TextTagForUnit(libCOTF_gv_uT_DummyUnits[lv_index], 1), TextExpressionAssemble("Param/Expression/lib_COTF_0854C1B4"));
                libCOTF_gv_uT_DummyDamage[lv_index][0] = 0.0;
                libCOTF_gv_uT_DummyDamage[lv_index][1] = 0.0;
                TimerStart(libCOTF_gv_uT_DummyTimer[lv_index][1], 524287.0, false, c_timeGame);
                TimerPause(libCOTF_gv_uT_DummyTimer[lv_index][1], true);
                TimerStart(libCOTF_gv_uT_DummyTimer[lv_index][0], 5.0, false, c_timeGame);
                TimerPause(libCOTF_gv_uT_DummyTimer[lv_index][0], true);
                break;
            }
            else {
                TextExpressionSetToken("Param/Expression/lib_COTF_9AD7DC29", "A", FixedToText((libCOTF_gv_uT_DummyDamage[lv_index][0] / 5.0), 0));
                TextExpressionSetToken("Param/Expression/lib_COTF_9AD7DC29", "B", FixedToText(TimerGetElapsed(libCOTF_gv_uT_DummyTimer[lv_index][1]), 0));
                TextExpressionSetToken("Param/Expression/lib_COTF_9AD7DC29", "C", FixedToText((libCOTF_gv_uT_DummyDamage[lv_index][1] / TimerGetElapsed(libCOTF_gv_uT_DummyTimer[lv_index][1])), 1));
                TextTagSetText(libCOTF_gf_TextTagForUnit(libCOTF_gv_uT_DummyUnits[lv_index], 1), TextExpressionAssemble("Param/Expression/lib_COTF_9AD7DC29"));
                libCOTF_gv_uT_DummyDamage[lv_index][0] = 0.0;
                TimerStart(libCOTF_gv_uT_DummyTimer[lv_index][0], 5.0, false, c_timeGame);
                break;
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_DummyUpdate_Init () {
    libCOTF_gt_UT_DummyUpdate = TriggerCreate("libCOTF_gt_UT_DummyUpdate_Func");
    TriggerEnable(libCOTF_gt_UT_DummyUpdate, false);
    TriggerAddEventTimer(libCOTF_gt_UT_DummyUpdate, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DummyDestroyed
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_DummyDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libCOTF_gv_uT_Dummies, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagShow(libCOTF_gf_TextTagForUnit(EventUnit(), 1), PlayerGroupAll(), false);
    TextTagDestroy(libCOTF_gf_TextTagForUnit(EventUnit(), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_DummyDestroyed_Init () {
    libCOTF_gt_UT_DummyDestroyed = TriggerCreate("libCOTF_gt_UT_DummyDestroyed_Func");
    TriggerEnable(libCOTF_gt_UT_DummyDestroyed, false);
    TriggerAddEventUnitDied(libCOTF_gt_UT_DummyDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DPS
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_DPS_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unit lv_vUnit;

    // Automatic Variable Declarations
    const int auto993A66CE_ae = libCOTF_gv_uT_DPS_MaxUnits;
    const int auto993A66CE_ai = 1;
    unitgroup auto64C503CE_g;
    int auto64C503CE_u;
    unit auto64C503CE_var;
    const int auto460C9249_ae = libCOTF_gv_uT_DPS_MaxUnits;
    const int auto460C9249_ai = 1;
    unitgroup autoA9005345_g;
    int autoA9005345_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(libCOTF_gv_uT_DPS_UG, UnitGroupSelected(EventPlayer()));
    lv_i = 1;
    for ( ; ( (auto993A66CE_ai >= 0 && lv_i <= auto993A66CE_ae) || (auto993A66CE_ai < 0 && lv_i >= auto993A66CE_ae) ) ; lv_i += auto993A66CE_ai ) {
        libCOTF_gv_uT_DPS_Damage[lv_i][0] = 0.0;
        libCOTF_gv_uT_DPS_Damage[lv_i][1] = 0.0;
        libNtve_gf_StopTimer(libCOTF_gv_uT_DPS_Timer[lv_i][0]);
        libNtve_gf_StopTimer(libCOTF_gv_uT_DPS_Timer[lv_i][1]);
    }
    auto64C503CE_g = UnitGroupSelected(EventPlayer());
    auto64C503CE_u = UnitGroupCount(auto64C503CE_g, c_unitCountAll);
    for (;; auto64C503CE_u -= 1) {
        auto64C503CE_var = UnitGroupUnitFromEnd(auto64C503CE_g, auto64C503CE_u);
        if (auto64C503CE_var == null) { break; }
        if ((TextTagVisible(libCOTF_gf_TextTagForUnit(auto64C503CE_var, 1), EventPlayer()) == false)) {
            lv_i = 1;
            for ( ; ( (auto460C9249_ai >= 0 && lv_i <= auto460C9249_ae) || (auto460C9249_ai < 0 && lv_i >= auto460C9249_ae) ) ; lv_i += auto460C9249_ai ) {
                if ((libCOTF_gv_uT_DPS_Units[lv_i] == null)) {
                    libCOTF_gv_uT_DPS_Units[lv_i] = auto64C503CE_var;
                    UnitSetCustomValue(auto64C503CE_var, libCOTF_gv_uT_DPS_CustomValueIndex, lv_i);
                    UnitBehaviorAddPlayer(auto64C503CE_var, "DPSTESTBEGH", 1, 1);
                    libCOMI_gf_CopyBehaviorToMagazineAmmos(auto64C503CE_var, "DPSTESTBEGH");
                    autoA9005345_g = UnitGroup(null, UnitGetOwner(auto64C503CE_var), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    autoA9005345_u = UnitGroupCount(autoA9005345_g, c_unitCountAll);
                    for (;; autoA9005345_u -= 1) {
                        lv_vUnit = UnitGroupUnitFromEnd(autoA9005345_g, autoA9005345_u);
                        if (lv_vUnit == null) { break; }
                        if ((UnitHasBehavior2(lv_vUnit, "DPSTESTBEGH") == true)) {
                            UnitSetCustomValue(lv_vUnit, libCOTF_gv_uT_DPS_CustomValueIndex, lv_i);
                            UnitGroupAdd(libCOTF_gv_uT_DPS_UG, lv_vUnit);
                            UnitBehaviorRemovePlayer(lv_vUnit, "DPSTESTBEGH", 1, 1);
                        }

                    }
                    break;
                }

            }
            TextTagCreate(StringExternal("Param/Value/lib_COTF_86CA5AC7"), 24, UnitGetPosition(auto64C503CE_var), 1.0, true, false, PlayerGroupAll());
            TextTagAttachToUnit(TextTagLastCreated(), auto64C503CE_var, 1.0);
            TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
            libCOTF_gf_StoreTextTagForUnit(auto64C503CE_var, 1, TextTagLastCreated());
        }

    }
    TriggerEnable(libCOTF_gt_UT_DPS_DealsDamage, true);
    TriggerEnable(libCOTF_gt_UT_DPS_Summon, true);
    TriggerEnable(libCOTF_gt_UT_DPS_Dies, true);
    TriggerEnable(libCOTF_gt_UT_DPS_PauseGlobal, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_DPS_Init () {
    libCOTF_gt_UT_DPS = TriggerCreate("libCOTF_gt_UT_DPS_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_DPS, c_playerAny, "-dps", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DPS_Stop
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_DPS_Stop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto055C564F_g;
    int auto055C564F_u;
    unit auto055C564F_var;
    const int auto87172B02_ae = libCOTF_gv_uT_DPS_MaxUnits;
    const int auto87172B02_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto055C564F_g = libCOTF_gv_uT_DPS_UG;
    auto055C564F_u = UnitGroupCount(auto055C564F_g, c_unitCountAll);
    for (;; auto055C564F_u -= 1) {
        auto055C564F_var = UnitGroupUnitFromEnd(auto055C564F_g, auto055C564F_u);
        if (auto055C564F_var == null) { break; }
        UnitGroupRemove(libCOTF_gv_uT_DPS_UG, auto055C564F_var);
        TextTagDestroy(libCOTF_gf_TextTagForUnit(auto055C564F_var, 1));
    }
    lv_i = 1;
    for ( ; ( (auto87172B02_ai >= 0 && lv_i <= auto87172B02_ae) || (auto87172B02_ai < 0 && lv_i >= auto87172B02_ae) ) ; lv_i += auto87172B02_ai ) {
        libCOTF_gv_uT_DPS_Units[lv_i] = null;
        libCOTF_gv_uT_DPS_Damage[lv_i][0] = 0.0;
        libCOTF_gv_uT_DPS_Damage[lv_i][1] = 0.0;
        libNtve_gf_StopTimer(libCOTF_gv_uT_DPS_Timer[lv_i][0]);
        libNtve_gf_StopTimer(libCOTF_gv_uT_DPS_Timer[lv_i][1]);
    }
    TriggerEnable(libCOTF_gt_UT_DPS_DealsDamage, false);
    TriggerEnable(libCOTF_gt_UT_DPS_Summon, false);
    TriggerEnable(libCOTF_gt_UT_DPS_PauseGlobal, false);
    TriggerEnable(libCOTF_gt_UT_DPS_Dies, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_DPS_Stop_Init () {
    libCOTF_gt_UT_DPS_Stop = TriggerCreate("libCOTF_gt_UT_DPS_Stop_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_DPS_Stop, c_playerAny, "-dpsstop", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DPS_DealsDamage
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_DPS_DealsDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vCustomValue;
    fixed lv_vElapsedTime;
    fixed lv_vDPS_Now;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libCOTF_gv_uT_DPS_UG, EventUnitDamageSourceUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vCustomValue = FixedToInt(UnitGetCustomValue(EventUnitDamageSourceUnit(), libCOTF_gv_uT_DPS_CustomValueIndex));
    lv_vElapsedTime = TimerGetElapsed(libCOTF_gv_uT_DPS_Timer[lv_vCustomValue][0]);
    if ((TimerGetElapsed(libCOTF_gv_uT_DPS_Timer[lv_vCustomValue][1]) <= 0.0)) {
        TimerStart(libCOTF_gv_uT_DPS_Timer[lv_vCustomValue][1], 524287.0, false, c_timeGame);
        TimerStart(libCOTF_gv_uT_DPS_Timer[lv_vCustomValue][0], 5.0, false, c_timeGame);
    }
    else {
        if ((TimerIsPaused(libCOTF_gv_uT_DPS_Timer[lv_vCustomValue][1]) == true)) {
            TimerRestart(libCOTF_gv_uT_DPS_Timer[lv_vCustomValue][1]);
            libCOTF_gv_uT_DPS_Damage[lv_vCustomValue][1] = 0.0;
        }
        else {
            libCOTF_gv_uT_DPS_Damage[lv_vCustomValue][0] += EventUnitDamageAmount();
            libCOTF_gv_uT_DPS_Damage[lv_vCustomValue][1] += EventUnitDamageAmount();
            if ((lv_vElapsedTime >= 2.0)) {
                lv_vDPS_Now = (libCOTF_gv_uT_DPS_Damage[lv_vCustomValue][0] / lv_vElapsedTime);
                libCOTF_gv_uT_DPS_Avg[lv_vCustomValue] = (libCOTF_gv_uT_DPS_Damage[lv_vCustomValue][1] / TimerGetElapsed(libCOTF_gv_uT_DPS_Timer[lv_vCustomValue][1]));
                TextExpressionSetToken("Param/Expression/lib_COTF_B51FB54C", "A", FixedToText(libCOTF_gv_uT_DPS_Avg[lv_vCustomValue], 1));
                TextExpressionSetToken("Param/Expression/lib_COTF_B51FB54C", "B", FixedToText(lv_vDPS_Now, 1));
                TextTagSetText(libCOTF_gf_TextTagForUnit(libCOTF_gv_uT_DPS_Units[lv_vCustomValue], 1), TextExpressionAssemble("Param/Expression/lib_COTF_B51FB54C"));
                libCOTF_gv_uT_DPS_Damage[lv_vCustomValue][0] = 0.0;
                TimerRestart(libCOTF_gv_uT_DPS_Timer[lv_vCustomValue][0]);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_DPS_DealsDamage_Init () {
    libCOTF_gt_UT_DPS_DealsDamage = TriggerCreate("libCOTF_gt_UT_DPS_DealsDamage_Func");
    TriggerEnable(libCOTF_gt_UT_DPS_DealsDamage, false);
    TriggerAddEventUnitDamaged(libCOTF_gt_UT_DPS_DealsDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DPS_Summon
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_DPS_Summon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libCOTF_gv_uT_DPS_UG, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOTF_gv_uT_DPS_UG, EventUnitCreatedUnit());
    UnitSetCustomValue(EventUnitCreatedUnit(), libCOTF_gv_uT_DPS_CustomValueIndex, UnitGetCustomValue(EventUnit(), libCOTF_gv_uT_DPS_CustomValueIndex));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_DPS_Summon_Init () {
    libCOTF_gt_UT_DPS_Summon = TriggerCreate("libCOTF_gt_UT_DPS_Summon_Func");
    TriggerEnable(libCOTF_gt_UT_DPS_Summon, false);
    TriggerAddEventUnitCreated(libCOTF_gt_UT_DPS_Summon, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DPS_Dies
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_DPS_Dies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libCOTF_gv_uT_DPS_UG, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagDestroy(libCOTF_gf_TextTagForUnit(EventUnit(), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_DPS_Dies_Init () {
    libCOTF_gt_UT_DPS_Dies = TriggerCreate("libCOTF_gt_UT_DPS_Dies_Func");
    TriggerEnable(libCOTF_gt_UT_DPS_Dies, false);
    TriggerAddEventUnitDied(libCOTF_gt_UT_DPS_Dies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DPS_PauseGlobal
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_DPS_PauseGlobal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto486837FD_ae = libCOTF_gv_uT_DPS_MaxUnits;
    int auto486837FD_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto486837FD_var = 1;
    for ( ; auto486837FD_var <= auto486837FD_ae; auto486837FD_var += 1 ) {
        if ((EventTimer() == libCOTF_gv_uT_DPS_Timer[auto486837FD_var][0])) {
            TimerPause(libCOTF_gv_uT_DPS_Timer[auto486837FD_var][1], true);
            TextExpressionSetToken("Param/Expression/lib_COTF_B29C2CC9", "A", FixedToText(libCOTF_gv_uT_DPS_Avg[auto486837FD_var], 1));
            TextTagSetText(libCOTF_gf_TextTagForUnit(libCOTF_gv_uT_DPS_Units[auto486837FD_var], 1), TextExpressionAssemble("Param/Expression/lib_COTF_B29C2CC9"));
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_DPS_PauseGlobal_Init () {
    libCOTF_gt_UT_DPS_PauseGlobal = TriggerCreate("libCOTF_gt_UT_DPS_PauseGlobal_Func");
    TriggerEnable(libCOTF_gt_UT_DPS_PauseGlobal, false);
    TriggerAddEventTimer(libCOTF_gt_UT_DPS_PauseGlobal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Vision
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Vision_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOTF_gv_uT_Revealed == false)) {
        VisRevealerCreate(EventPlayer(), RegionEntireMap());
        libCOTF_gv_uT_Revealer = VisRevealerLastCreated();
        libCOTF_gv_uT_Revealed = true;
    }
    else {
        VisRevealerDestroy(libCOTF_gv_uT_Revealer);
        libCOTF_gv_uT_Revealed = false;
    }
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Vision_Init () {
    libCOTF_gt_UT_Vision = TriggerCreate("libCOTF_gt_UT_Vision_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Vision, c_playerAny, "-vision", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Cooldown
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Cooldown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOTF_gf_UT_Cooldown(EventPlayer());
    if ((PlayerGetAlliance(1, c_allianceIdControl, 2) == true)) {
        libCOTF_gf_UT_Cooldown(2);
    }

    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Cooldown_Init () {
    libCOTF_gt_UT_Cooldown = TriggerCreate("libCOTF_gt_UT_Cooldown_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Cooldown, c_playerAny, "-cdr", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Numbers toggle
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_Numberstoggle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((PlayerGroupHasPlayer(libCOTF_gv_uT_PlayersWithNumbers, EventPlayer()) == false) || (TriggerIsEnabled(libCOTF_gt_UT_NumbersHeal) == false))) {
        PlayerGroupAdd(libCOTF_gv_uT_PlayersWithNumbers, EventPlayer());
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_BDB7A507"));
        TriggerEnable(libCOTF_gt_UT_NumbersDamage, true);
        TriggerEnable(libCOTF_gt_UT_NumbersHeal, true);
    }
    else {
        PlayerGroupRemove(libCOTF_gv_uT_PlayersWithNumbers, EventPlayer());
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_D78B9B7D"));
        if ((PlayerGroupCount(libCOTF_gv_uT_PlayersWithNumbers) == 0)) {
            TriggerEnable(libCOTF_gt_UT_NumbersDamage, false);
            TriggerEnable(libCOTF_gt_UT_NumbersHeal, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_Numberstoggle_Init () {
    libCOTF_gt_UT_Numberstoggle = TriggerCreate("libCOTF_gt_UT_Numberstoggle_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_Numberstoggle, c_playerAny, "-numbers", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Numbers Damage
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_NumbersDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageAmount() >= 0.5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(FixedToText(EventUnitDamageAmount(), 0), 24, UnitGetPosition(EventUnit()), 1.0, true, false, libCOTF_gv_uT_PlayersWithNumbers);
    TextTagSetVelocity(TextTagLastCreated(), 2.0, RandomInt(55, 125));
    if (((EventUnitDamageSourcePlayer() == 1) || (EventUnitDamageSourcePlayer() == 2))) {
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 59.22, 18.43));
    }
    else {
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    }
    if ((EventUnitDamageAmount() > 20.0)) {
        TextTagSetFontSize(TextTagLastCreated(), 32);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.5);
        if ((EventUnitDamageAmount() > 100.0)) {
            TextTagSetFontSize(TextTagLastCreated(), 50);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 4.5);
        }

    }
    else {
        if ((EventUnitDamageAmount() < 5.0)) {
            TextTagSetFontSize(TextTagLastCreated(), 14);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
        }
        else {
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
        }
    }
    TextTagShow(TextTagLastCreated(), libCOTF_gv_uT_PlayersWithNumbers, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_NumbersDamage_Init () {
    libCOTF_gt_UT_NumbersDamage = TriggerCreate("libCOTF_gt_UT_NumbersDamage_Func");
    TriggerEnable(libCOTF_gt_UT_NumbersDamage, false);
    TriggerAddEventUnitDamaged(libCOTF_gt_UT_NumbersDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Numbers Heal 
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_NumbersHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitHealAmount() >= 0.1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(FixedToText(EventUnitHealAmount(), 0), 24, UnitGetPosition(EventUnit()), 1.0, true, false, libCOTF_gv_uT_PlayersWithNumbers);
    TextTagSetVelocity(TextTagLastCreated(), 2.0, RandomInt(55, 125));
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 0.00));
    if ((EventUnitHealAmount() > 20.0)) {
        TextTagSetFontSize(TextTagLastCreated(), 32);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.5);
        if ((EventUnitHealAmount() > 100.0)) {
            TextTagSetFontSize(TextTagLastCreated(), 50);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.5);
        }

    }
    else {
        if ((EventUnitHealAmount() < 5.0)) {
            TextTagSetFontSize(TextTagLastCreated(), 12);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
        }
        else {
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
        }
    }
    TextTagShow(TextTagLastCreated(), libCOTF_gv_uT_PlayersWithNumbers, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_NumbersHeal_Init () {
    libCOTF_gt_UT_NumbersHeal = TriggerCreate("libCOTF_gt_UT_NumbersHeal_Func");
    TriggerEnable(libCOTF_gt_UT_NumbersHeal, false);
    TriggerAddEventUnitHealed(libCOTF_gt_UT_NumbersHeal, null, c_unitVitalAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DL_LogDisplay
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_DL_LogDisplay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_vChangeInDataPlayer;

    // Automatic Variable Declarations
    string auto838E57B5_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOTF_gt_UT_DL_DamageLogging, true);
    TriggerEnable(libCOTF_gt_UT_DL_HealLogging, true);
    auto838E57B5_val = StringWord(EventChatMessage(false), 2);
    if (auto838E57B5_val == "2") {
        if ((libCOTF_gv_uT_DL_PlayerData[EventPlayer()] != libCOTF_gf_UT_OtherPlayer(EventPlayer()))) {
            libCOTF_gv_uT_DL_PlayerData[EventPlayer()] = libCOTF_gf_UT_OtherPlayer(EventPlayer());
            lv_vChangeInDataPlayer = true;
        }

    }
    else if (auto838E57B5_val == "clear") {
        libCOTF_gf_UT_DL_LogClear(EventPlayer());
        return true;
    }
    else if (auto838E57B5_val == "stop") {
        PlayerGroupRemove(libCOTF_gv_uT_DL_LoggingPlayers, EventPlayer());
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_F0C286F1"));
        if (((PlayerGroupHasPlayer(libCOTF_gv_uT_DL_LoggingPlayers, 1) == false) || (PlayerStatus(1) != c_playerStatusActive)) && ((PlayerGroupHasPlayer(libCOTF_gv_uT_DL_LoggingPlayers, 2) == false) || (PlayerStatus(2) != c_playerStatusActive))) {
            TriggerEnable(libCOTF_gt_UT_DL_DamageLogging, false);
            TriggerEnable(libCOTF_gt_UT_DL_HealLogging, false);
        }

        return true;
    }
    else {
        if ((libCOTF_gv_uT_DL_PlayerData[EventPlayer()] != EventPlayer())) {
            libCOTF_gv_uT_DL_PlayerData[EventPlayer()] = EventPlayer();
            lv_vChangeInDataPlayer = true;
        }

    }
    if (((libCOTF_gv_uT_DL_LogDialog == c_invalidDialogId) || (lv_vChangeInDataPlayer == true) || (DialogIsVisible(libCOTF_gv_uT_DL_LogDialog, EventPlayer()) == false))) {
        libCOTF_gf_UT_DL_DialogCreate();
        libCOTF_gf_UT_DL_DialogUpdate(libCOTF_gv_uT_DL_PlayerData[EventPlayer()], EventPlayer());
        DialogSetVisible(libCOTF_gv_uT_DL_LogDialog, PlayerGroupSingle(EventPlayer()), true);
        TriggerExecute(libCOTF_gt_UT_DL_PeriodicUpdate, true, false);
    }
    else {
        DialogSetVisible(libCOTF_gv_uT_DL_LogDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_DL_LogDisplay_Init () {
    libCOTF_gt_UT_DL_LogDisplay = TriggerCreate("libCOTF_gt_UT_DL_LogDisplay_Func");
    TriggerAddEventChatMessage(libCOTF_gt_UT_DL_LogDisplay, c_playerAny, "-log", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DL_PeriodicUpdate
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_DL_PeriodicUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    while (((DialogIsVisible(libCOTF_gv_uT_DL_LogDialog, 1) == true) || (DialogIsVisible(libCOTF_gv_uT_DL_LogDialog, 2) == true))) {
        libCOTF_gf_UT_DL_DialogUpdate(libCOTF_gv_uT_DL_PlayerData[1], 1);
        libCOTF_gf_UT_DL_DialogUpdate(libCOTF_gv_uT_DL_PlayerData[2], 2);
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_DL_PeriodicUpdate_Init () {
    libCOTF_gt_UT_DL_PeriodicUpdate = TriggerCreate("libCOTF_gt_UT_DL_PeriodicUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DL_Damage Logging
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_DL_DamageLogging_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto78DF18E7_ae = libCOTF_gv_uT_DL_MaxUnits;
    int auto78DF18E7_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOTF_gv_uT_DL_LoggingPlayers, EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((EventUnitDamageSourceUnit() != EventUnit()))) {
            return false;
        }

        if (!((EventUnitDamageAmount() >= 0.1))) {
            return false;
        }

        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto78DF18E7_var = 1;
    for ( ; auto78DF18E7_var <= auto78DF18E7_ae; auto78DF18E7_var += 1 ) {
        if (((UnitGetType(EventUnitDamageSourceUnit()) == libCOTF_gv_uT_DL_Data[auto78DF18E7_var][0][EventUnitDamageSourcePlayer()].lv_unitType) || (libCOTF_gf_UT_AreMorphUnits(UnitGetType(EventUnitDamageSourceUnit()), libCOTF_gv_uT_DL_Data[auto78DF18E7_var][0][EventUnitDamageSourcePlayer()].lv_unitType) == true))) {
            libCOTF_gf_UT_DL_AddHealingDamage(auto78DF18E7_var, 0, EventUnitDamageSourcePlayer(), EventUnitDamageAmount());
            break;
        }
        else {
            if ((libCOTF_gv_uT_DL_Data[auto78DF18E7_var][0][EventUnitDamageSourcePlayer()].lv_unitType == null)) {
                libCOTF_gv_uT_DL_Data[auto78DF18E7_var][0][EventUnitDamageSourcePlayer()].lv_unitType = UnitGetType(EventUnitDamageSourceUnit());
                libCOTF_gf_UT_DL_AddHealingDamage(auto78DF18E7_var, 0, EventUnitDamageSourcePlayer(), EventUnitDamageAmount());
                break;
            }
            else {
                if ((auto78DF18E7_var == libCOTF_gv_uT_DL_MaxUnits)) {
                    UIDisplayMessage(PlayerGroupSingle(EventUnitDamageSourcePlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_5C2D23BC"));
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_DL_DamageLogging_Init () {
    libCOTF_gt_UT_DL_DamageLogging = TriggerCreate("libCOTF_gt_UT_DL_DamageLogging_Func");
    TriggerEnable(libCOTF_gt_UT_DL_DamageLogging, false);
    TriggerAddEventUnitDamaged(libCOTF_gt_UT_DL_DamageLogging, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DL_Heal Logging
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_UT_DL_HealLogging_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto3259CEC7_ae = libCOTF_gv_uT_DL_MaxUnits;
    int auto3259CEC7_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOTF_gv_uT_DL_LoggingPlayers, EventUnitHealLaunchPlayer()) == true))) {
            return false;
        }

        if (!((EventUnitHealAmount() >= 0.1))) {
            return false;
        }

        if (!((EventUnitHealLaunchUnit() != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3259CEC7_var = 1;
    for ( ; auto3259CEC7_var <= auto3259CEC7_ae; auto3259CEC7_var += 1 ) {
        if ((UnitGetType(EventUnitHealLaunchUnit()) == libCOTF_gv_uT_DL_Data[auto3259CEC7_var][1][EventUnitHealLaunchPlayer()].lv_unitType)) {
            libCOTF_gf_UT_DL_AddHealingDamage(auto3259CEC7_var, 1, EventUnitHealLaunchPlayer(), EventUnitHealAmount());
            break;
        }
        else {
            if ((libCOTF_gv_uT_DL_Data[auto3259CEC7_var][1][EventUnitHealLaunchPlayer()].lv_unitType == null)) {
                libCOTF_gv_uT_DL_Data[auto3259CEC7_var][1][EventUnitHealLaunchPlayer()].lv_unitType = UnitGetType(EventUnitHealLaunchUnit());
                libCOTF_gf_UT_DL_AddHealingDamage(auto3259CEC7_var, 1, EventUnitHealLaunchPlayer(), EventUnitHealAmount());
                break;
            }
            else {
                if ((auto3259CEC7_var == libCOTF_gv_uT_DL_MaxUnits)) {
                    UIDisplayMessage(PlayerGroupSingle(EventUnitHealLaunchPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_38848E22"));
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_UT_DL_HealLogging_Init () {
    libCOTF_gt_UT_DL_HealLogging = TriggerCreate("libCOTF_gt_UT_DL_HealLogging_Func");
    TriggerEnable(libCOTF_gt_UT_DL_HealLogging, false);
    TriggerAddEventUnitHealed(libCOTF_gt_UT_DL_HealLogging, null, c_unitVitalAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Init
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_AF_Init_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    text lv_tooltip;
    int lv_dimensionsX;
    int lv_dimensionsY;
    int lv_imageDimensionsX;
    int lv_imageDimensionsY;
    int lv_offsetY;

    // Automatic Variable Declarations
    const int auto66B1249C_ae = 2;
    int auto66B1249C_var;
    const int autoDE942A53_ae = 3;
    const int autoDE942A53_ai = 1;

    // Variable Initialization
    lv_tooltip = StringExternal("Param/Value/lib_COTF_6B770CC3");
    lv_dimensionsX = 40;
    lv_dimensionsY = 25;
    lv_imageDimensionsX = 30;
    lv_imageDimensionsY = 13;
    lv_offsetY = 17;

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_F3820618"));
    TriggerEnable(libCOTF_gt_AF_ButtonClicked, true);
    TriggerEnable(libCOTF_gt_AF_HeroPurchased, true);
    auto66B1249C_var = 1;
    for ( ; auto66B1249C_var <= auto66B1249C_ae; auto66B1249C_var += 1 ) {
        if ((TechTreeUpgradeCount(auto66B1249C_var, "TychusCommander", c_techCountCompleteOnly) >= 1)) {
            libCOTF_gv_aF_TychusPlayer = auto66B1249C_var;
            break;
        }

    }
    DialogCreate(500, 500, c_anchorTop, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libCOTF_gv_aF_TopBarIconsDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(libCOTF_gv_aF_TychusPlayer), true);
    lv_i = 1;
    for ( ; ( (autoDE942A53_ai >= 0 && lv_i <= autoDE942A53_ae) || (autoDE942A53_ai < 0 && lv_i >= autoDE942A53_ae) ) ; lv_i += autoDE942A53_ai ) {
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_dimensionsX, lv_dimensionsY, c_anchorTop, ((92 * (lv_i - 1)) + 7), lv_offsetY, lv_tooltip, StringToText(""), "");
        libCOTF_gv_aF_TopBarIcons[lv_i][0] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_imageDimensionsX, lv_imageDimensionsY, c_anchorTopLeft, 0, 0, StringToText(""), "Tychus_SwitchOutlaw.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libCOTF_gv_aF_TopBarIcons[lv_i][1] = DialogControlLastCreated();
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, libCOTF_gv_aF_TopBarIcons[lv_i][0], c_anchorCenter, 0, 0);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
    TriggerExecute(libCOTF_gt_AF_HeroPurchased, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_AF_Init_Init () {
    libCOTF_gt_AF_Init = TriggerCreate("libCOTF_gt_AF_Init_Func");
    TriggerAddEventChatMessage(libCOTF_gt_AF_Init, c_playerAny, "-tychui", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_ButtonClicked
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_AF_ButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_firsthero;
    unit lv_hero;
    string lv_squadinstance;
    int lv_squadindex;
    int lv_a;

    // Automatic Variable Declarations
    int autoC3FDCECA_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libCOTF_gv_aF_TopBarIcons[1][0]) || (EventDialogControl() == libCOTF_gv_aF_TopBarIcons[2][0]) || (EventDialogControl() == libCOTF_gv_aF_TopBarIcons[3][0])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC3FDCECA_val = EventDialogControl();
    if (autoC3FDCECA_val == libCOTF_gv_aF_TopBarIcons[1][0]) {
        lv_a = 1;
    }
    else if (autoC3FDCECA_val == libCOTF_gv_aF_TopBarIcons[2][0]) {
        lv_a = 2;
    }
    else if (autoC3FDCECA_val == libCOTF_gv_aF_TopBarIcons[3][0]) {
        lv_a = 3;
    }
    else {
    }
    lv_firsthero = libCOUI_gv_cU_TychusSquadHeroes[lv_a];
    lv_squadinstance = libCOTF_gf_AF_GetTychusSquadInstance(lv_firsthero);
    lv_squadindex = (lv_a + 1);
    libCOTF_gf_AF_SetTychusSquadMember(lv_firsthero, lv_squadindex, lv_squadinstance);
    UnitBehaviorRemovePlayer(lv_firsthero, "TychusHeroSubGroup", 1, UnitBehaviorCount(lv_firsthero, "TychusHeroSubGroup"));
    UnitBehaviorAdd(lv_firsthero, "TychusHeroSubGroup", lv_firsthero, lv_squadindex);
    lv_hero = libCOUI_gv_cU_TychusSquadHeroes[(lv_a + 1)];
    lv_squadinstance = libCOTF_gf_AF_GetTychusSquadInstance(lv_hero);
    lv_squadindex = lv_a;
    libCOTF_gf_AF_SetTychusSquadMember(lv_hero, lv_squadindex, lv_squadinstance);
    UnitBehaviorRemovePlayer(lv_hero, "TychusHeroSubGroup", 1, UnitBehaviorCount(lv_hero, "TychusHeroSubGroup"));
    UnitBehaviorAdd(lv_hero, "TychusHeroSubGroup", lv_hero, lv_squadindex);
    libCOUI_gv_cU_TychusSquadHeroes[lv_a] = lv_hero;
    libCOUI_gv_cU_TychusSquadHeroes[(lv_a + 1)] = lv_firsthero;
    if ((UnitIsAlive(lv_firsthero) == false)) {
        DialogControlSetAnimationState(libCOUI_gv_cU_TychusSquadUnitFrames[(lv_a + 1)], PlayerGroupAll(), "DeathState", "Dead");
    }

    if ((UnitIsAlive(lv_hero) == false)) {
        DialogControlSetAnimationState(libCOUI_gv_cU_TychusSquadUnitFrames[lv_a], PlayerGroupAll(), "DeathState", "Dead");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_AF_ButtonClicked_Init () {
    libCOTF_gt_AF_ButtonClicked = TriggerCreate("libCOTF_gt_AF_ButtonClicked_Func");
    TriggerEnable(libCOTF_gt_AF_ButtonClicked, false);
    TriggerAddEventDialogControl(libCOTF_gt_AF_ButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_HeroPurchased
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_AF_HeroPurchased_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoAE35AD8A_ae;
    int autoAE35AD8A_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeReal);
    lv_index = (libCOTF_gf_AF_GetTychusSquadIndex() - 2);
    if ((((lv_index >= 1) && (lv_index <= 3)) == true)) {
        autoAE35AD8A_ae = lv_index;
        autoAE35AD8A_var = 1;
        for ( ; autoAE35AD8A_var <= autoAE35AD8A_ae; autoAE35AD8A_var += 1 ) {
            if ((DialogControlIsVisible(libCOTF_gv_aF_TopBarIcons[autoAE35AD8A_var][0], libCOTF_gv_aF_TychusPlayer) == false)) {
                DialogControlSetVisible(libCOTF_gv_aF_TopBarIcons[autoAE35AD8A_var][0], PlayerGroupSingle(libCOTF_gv_aF_TychusPlayer), true);
                DialogControlSetVisible(libCOTF_gv_aF_TopBarIcons[autoAE35AD8A_var][1], PlayerGroupSingle(libCOTF_gv_aF_TychusPlayer), true);
                DialogControlFadeTransparency(libCOTF_gv_aF_TopBarIcons[autoAE35AD8A_var][1], PlayerGroupAll(), 0.0, 100.0);
                Wait(0.0, c_timeReal);
                DialogControlFadeTransparency(libCOTF_gv_aF_TopBarIcons[autoAE35AD8A_var][1], PlayerGroupAll(), 0.7, 40.0);
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_AF_HeroPurchased_Init () {
    libCOTF_gt_AF_HeroPurchased = TriggerCreate("libCOTF_gt_AF_HeroPurchased_Func");
    TriggerEnable(libCOTF_gt_AF_HeroPurchased, false);
    libCOMI_gf_TychusHeroEvent(libCOTF_gt_AF_HeroPurchased, "Event_TychusHeroCreate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_EnableHeroicUnload
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_AF_EnableHeroicUnload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeAbilityIsAllowed(EventPlayer(), AbilityCommand("DummyUnloadAbil", 0)) == false)) {
        TechTreeAbilityAllow(EventPlayer(), AbilityCommand("DummyUnloadAbil", 0), true);
        TriggerEnable(libCOTF_gt_AF_UnloadHeroic, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_CB638D17"));
    }
    else {
        TechTreeAbilityAllow(EventPlayer(), AbilityCommand("DummyUnloadAbil", 0), false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_55B0111D"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_AF_EnableHeroicUnload_Init () {
    libCOTF_gt_AF_EnableHeroicUnload = TriggerCreate("libCOTF_gt_AF_EnableHeroicUnload_Func");
    TriggerAddEventChatMessage(libCOTF_gt_AF_EnableHeroicUnload, c_playerAny, "-unload", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_UnloadHeroic
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_AF_UnloadHeroic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv_vOrder;

    // Automatic Variable Declarations
    int autoBB9C5E62_ae;
    int autoBB9C5E62_var;

    // Variable Initialization
    lv_vOrder = Order(AbilityCommand("NydusCanalTransport", 3));

    // Actions
    if (!runActions) {
        return true;
    }

    autoBB9C5E62_ae = UnitCargoValue(EventUnit(), c_unitCargoUnitCount);
    autoBB9C5E62_var = 1;
    for ( ; autoBB9C5E62_var <= autoBB9C5E62_ae; autoBB9C5E62_var += 1 ) {
        if ((UnitTypeTestAttribute(UnitGetType(UnitCargo(EventUnit(), autoBB9C5E62_var)), c_unitAttributeHeroic) == true)) {
            OrderSetTargetPassenger(lv_vOrder, UnitCargo(EventUnit(), autoBB9C5E62_var));
            UnitIssueOrder(EventUnit(), lv_vOrder, c_orderQueueReplace);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_AF_UnloadHeroic_Init () {
    libCOTF_gt_AF_UnloadHeroic = TriggerCreate("libCOTF_gt_AF_UnloadHeroic_Func");
    TriggerEnable(libCOTF_gt_AF_UnloadHeroic, false);
    TriggerAddEventUnitAbility(libCOTF_gt_AF_UnloadHeroic, null, AbilityCommand("DummyUnloadAbil", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Score
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_AF_Score_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vBackgroundDialogPanel;
    string lv_vCommander;
    string lv_vCommander2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vBackgroundDialogPanel = c_invalidDialogControlId;
    lv_vCommander = libCOOC_gf_CommanderLinkForPlayerHealingplayer2(1);
    lv_vCommander2 = libCOOC_gf_CommanderLinkForPlayerHealingplayer2(2);

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOUI_gv_cU_FanfareCloseButton))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libCOMI_gt_CM_AbortMission, false);
    Wait(0.0, c_timeReal);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    UISetWorldVisible(PlayerGroupAll(), false);
    DialogSetVisible(libCOUI_gv_cU_ScoreDialog, PlayerGroupAll(), false);
    DialogControlSetVisible(libCOUI_gv_cU_GPPanel[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(libCOTF_gt_UT_Graph_Timer, false);
    libCOTF_gf_UT_Graph_HideAllGraphsExcept(0, 1);
    libCOTF_gf_UT_Graph_HideAllGraphsExcept(0, 2);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/AllySupplyPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libCOOC_gf_MuteUnmuteAllSoundChannelsExcept(true, c_soundCategoryUI, PlayerGroupAll());
    GameSetMissionTimePaused(true);
    UnitPauseAll(true);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetRenderPriority(DialogLastCreated(), 550);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.5, 0.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1100, 50, c_anchorTop, 0, 90, GameMapName(), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AF_MapTitle", PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 1050, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.5, 0.0);
    TextExpressionSetToken("Param/Expression/lib_COTF_9C9A0B7C", "A", UserDataGetText("CoopAICommanders", libCOMI_gv_cM_CoopAIPlayer_Commander[3], "Name", 1));
    TextExpressionSetToken("Param/Expression/lib_COTF_9C9A0B7C", "C", StringExternal(("Race/Name/" + (UserDataGetGameLink("CoopAICommanders", libCOMI_gv_cM_CoopAIPlayer_Commander[3], "Race", 1)))));
    TextExpressionSetToken("Param/Expression/lib_COTF_9C9A0B7C", "B", TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(libCOTF_gv_aF_MissionTime)));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 800, 50, c_anchorTop, 0, 125, TextExpressionAssemble("Param/Expression/lib_COTF_9C9A0B7C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), UserDataGetText("CoopAICommanders", libCOMI_gv_cM_CoopAIPlayer_Commander[3], "Description", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 1050, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AF_EnemyCompName", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.5, 15.0);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 1050, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "TW_UserKills", PlayerGroupAll());
    libCOTF_gf_AF_MutatorIconsCreate(DialogLastCreated());
    libCOTF_gf_AF_MasteryInfoCreate(DialogLastCreated(), 1);
    libCOTF_gf_AF_MasteryInfoCreate(DialogLastCreated(), 2);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "AF_ScoreBackground/Scorebackgrond");
    lv_vBackgroundDialogPanel = DialogControlLastCreated();
    DialogControlHookup(lv_vBackgroundDialogPanel, c_triggerControlTypeImage, "Scorebackgrond_Image");
    DialogControlHookup(lv_vBackgroundDialogPanel, c_triggerControlTypeImage, "Scorebackgrond_PlayerImageLeft");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), libCOTF_gf_UT_CommanderLoadingImage(lv_vCommander), PlayerGroupAll());
    DialogControlHookup(lv_vBackgroundDialogPanel, c_triggerControlTypeImage, "Scorebackgrond_PlayerImageRight");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), libCOTF_gf_UT_CommanderLoadingImage(lv_vCommander2), PlayerGroupAll());
    DialogControlFadeTransparency(lv_vBackgroundDialogPanel, PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(lv_vBackgroundDialogPanel, PlayerGroupAll(), 1.5, 0.0);
    if ((libCOTF_gv_uT_CheatUsed == true)) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 40, 30, c_anchorTopRight, 5, 5, StringExternal("Param/Value/lib_COTF_0E2874BA"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_COTF_DA45C7DB"), PlayerGroupAll());
    }

    Wait(1.5, c_timeGame);
    TriggerExecute(libCOTF_gt_AF_Score_GraphsandCharts, true, false);
    TriggerExecute(libCOTF_gt_AF_Score_SwitchButtonCreate, true, false);
    TriggerExecute(libCOTF_gt_AF_Score_QuitButtonCreate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_AF_Score_Init () {
    libCOTF_gt_AF_Score = TriggerCreate("libCOTF_gt_AF_Score_Func");
    TriggerAddEventDialogControl(libCOTF_gt_AF_Score, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Score_Graphs and Charts
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_AF_Score_GraphsandCharts_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;
    int lv_vIndex;
    string[11] lv_vUnitTemp;
    int[11] lv_vDamageTemp;
    int lv_vTotalDamage;

    // Automatic Variable Declarations
    const int auto1D83BC3F_ae = 2;
    int auto1D83BC3F_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/GraphContainer/KillsGraph/Graph"));
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libCOTF_gv_aF_Score_KillGraph = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/GraphContainer/KillsGraph/Graph/FullBackground"));
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/GraphContainer/KillsGraph/Graph/CloseImage"));
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/GraphContainer/KillsGraph/Graph/GraphFrame/InnerBackground"));
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\white.dds", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_SetDialogItemBlendMode(DialogControlLastCreated(), c_triggerBlendModeAdd, PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/GraphContainer/KillsGraph/Graph/GraphFrame/LeftAxisImage"));
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemBlendMode(DialogControlLastCreated(), c_triggerBlendModeAdd, PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/GraphContainer/KillsGraph/Graph/GraphFrame/RightAxisImage"));
    libNtve_gf_SetDialogItemBlendMode(DialogControlLastCreated(), c_triggerBlendModeAdd, PlayerGroupAll());
    auto1D83BC3F_var = 1;
    for ( ; auto1D83BC3F_var <= auto1D83BC3F_ae; auto1D83BC3F_var += 1 ) {
        libCOTF_gf_UT_Graph_HideAllGraphsExcept(4, auto1D83BC3F_var);
    }
    libCOTF_gf_UT_CreatePieChartfromDamageLog(1, -350, 75, c_anchorCenter, 0);
    libCOTF_gv_aF_Score_PieCharts[1] = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libCOTF_gf_UT_CreatePieChartfromDamageLog(2, 350, 75, c_anchorCenter, 8);
    libCOTF_gv_aF_Score_PieCharts[2] = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libCOTF_gv_aF_KillNumbers = DialogLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_AF_Score_GraphsandCharts_Init () {
    libCOTF_gt_AF_Score_GraphsandCharts = TriggerCreate("libCOTF_gt_AF_Score_GraphsandCharts_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Score_SwitchButtonCreate
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_AF_Score_SwitchButtonCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(400, 50, c_anchorBottomLeft, 80, 50, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 610);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorBottomLeft, 0, 0, StringExternal("Param/Value/lib_COTF_A7224326"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "FinalScoreButton", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 4.0, 20.0);
    libCOTF_gv_aF_Score_FinalButtonLabel[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorBottomLeft, 0, 0, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libCOTF_gv_aF_Score_FinalButton[0] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_COTF_6B32901E"), PlayerGroupAll());
    TriggerEnable(libCOTF_gt_AF_Score_FinalButtonClicked, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_AF_Score_SwitchButtonCreate_Init () {
    libCOTF_gt_AF_Score_SwitchButtonCreate = TriggerCreate("libCOTF_gt_AF_Score_SwitchButtonCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Score_QuitButtonCreate
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_AF_Score_QuitButtonCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(200, 50, c_anchorBottomRight, 75, 50, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 610);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorBottomRight, 0, 0, StringExternal("Param/Value/lib_COTF_8D54E1D6"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "FinalScoreButton", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 4.0, 20.0);
    libCOTF_gv_aF_Score_FinalButtonLabel[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, 50, c_anchorBottomRight, 0, 0, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libCOTF_gv_aF_Score_FinalButton[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_COTF_821218E7"), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_AF_Score_QuitButtonCreate_Init () {
    libCOTF_gt_AF_Score_QuitButtonCreate = TriggerCreate("libCOTF_gt_AF_Score_QuitButtonCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Score_Final Button Clicked
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_AF_Score_FinalButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto29BBB5B8_val;

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libCOTF_gv_aF_Score_FinalButton[0]) || (EventDialogControl() == libCOTF_gv_aF_Score_FinalButton[1])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto29BBB5B8_val = EventDialogControl();
    if (auto29BBB5B8_val == libCOTF_gv_aF_Score_FinalButton[0]) {
        if ((libCOTF_gv_aF_Score_GraphVisible[EventPlayer()] == true)) {
            DialogControlFadeTransparency(libCOTF_gv_aF_Score_KillGraph, PlayerGroupSingle(EventPlayer()), 0.3, 100.0);
            Wait(0.5, c_timeGame);
            DialogSetVisible(libCOTF_gv_aF_Score_PieCharts[1], PlayerGroupSingle(EventPlayer()), true);
            DialogSetVisible(libCOTF_gv_aF_Score_PieCharts[2], PlayerGroupSingle(EventPlayer()), true);
            libCOTF_gv_aF_Score_GraphVisible[EventPlayer()] = false;
        }
        else {
            DialogSetVisible(libCOTF_gv_aF_Score_PieCharts[1], PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(libCOTF_gv_aF_Score_PieCharts[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlFadeTransparency(libCOTF_gv_aF_Score_KillGraph, PlayerGroupSingle(EventPlayer()), 0.3, 0.0);
            libCOTF_gv_aF_Score_GraphVisible[EventPlayer()] = true;
        }
    }
    else if (auto29BBB5B8_val == libCOTF_gv_aF_Score_FinalButton[1]) {
        SoundPlayForPlayer(SoundLink("UI_Void_Error_Back", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        Wait(1.0, c_timeGame);
        GameOver(EventPlayer(), libCOMI_gv_cM_EndMissionResult[EventPlayer()], false, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_AF_Score_FinalButtonClicked_Init () {
    libCOTF_gt_AF_Score_FinalButtonClicked = TriggerCreate("libCOTF_gt_AF_Score_FinalButtonClicked_Func");
    TriggerEnable(libCOTF_gt_AF_Score_FinalButtonClicked, false);
    TriggerAddEventDialogControl(libCOTF_gt_AF_Score_FinalButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_MissionEnds
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_AF_MissionEnds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOTF_gv_aF_MissionTime = GameGetMissionTime();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_AF_MissionEnds_Init () {
    libCOTF_gt_AF_MissionEnds = TriggerCreate("libCOTF_gt_AF_MissionEnds_Func");
    TriggerAddEventGeneric(libCOTF_gt_AF_MissionEnds, "UT_MissionEnd");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Blizzcon Challenge Execute
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_AF_BlizzconChallengeExecute_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((GameGetMissionTime() >= 30.0))) {
        Wait(1.0, c_timeGame);
    }
    libCOMU_gf_CT_EnableMutator("PurifierBeam", true, true, 0);
    while (!((GameGetMissionTime() >= 180.0))) {
        Wait(1.0, c_timeGame);
    }
    libCOMU_gf_CT_EnableMutator("OopsAllCasters", true, true, 0);
    while (!((GameGetMissionTime() >= 300.0))) {
        Wait(1.0, c_timeGame);
    }
    libCOMU_gf_CT_EnableMutator("UnitSpeed", true, true, 0);
    while (!((GameGetMissionTime() >= 420.0))) {
        Wait(1.0, c_timeGame);
    }
    libCOMU_gf_CT_EnableMutator("SpawnBroodlings", true, true, 0);
    while (!((GameGetMissionTime() >= 600.0))) {
        Wait(1.0, c_timeGame);
    }
    libCOMU_gf_CT_EnableMutator("Blizzard", true, true, 0);
    while (!((GameGetMissionTime() >= 780.0))) {
        Wait(1.0, c_timeGame);
    }
    libCOMU_gf_CT_EnableMutator("MissileBarrage", true, true, 0);
    while (!((GameGetMissionTime() >= 900.0))) {
        Wait(1.0, c_timeGame);
    }
    libCOMU_gf_CT_EnableMutator("Avenger", true, true, 0);
    while (!((GameGetMissionTime() >= 1080.0))) {
        Wait(1.0, c_timeGame);
    }
    libCOMU_gf_CT_EnableMutator("VoidRifts", true, true, 0);
    while (!((GameGetMissionTime() >= 1260.0))) {
        Wait(1.0, c_timeGame);
    }
    libCOMU_gf_CT_EnableMutator("Polarity", true, true, 0);
    while (!((GameGetMissionTime() >= 1440.0))) {
        Wait(1.0, c_timeGame);
    }
    libCOMU_gf_CT_EnableMutator("Nukes", true, true, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_AF_BlizzconChallengeExecute_Init () {
    libCOTF_gt_AF_BlizzconChallengeExecute = TriggerCreate("libCOTF_gt_AF_BlizzconChallengeExecute_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_SlimUI
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_AF_SlimUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameIsMissionTimePaused() == true)) {
        if ((PlayerGroupHasPlayer(libCOTF_gv_aF_SlimUI_PlayerGroup, EventPlayer()) == false)) {
            PlayerGroupAdd(libCOTF_gv_aF_SlimUI_PlayerGroup, EventPlayer());
            TriggerEnable(libCOTF_gt_AF_SlimUI_Delayed, true);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_6EE45CF5"));
        }
        else {
            PlayerGroupRemove(libCOTF_gv_aF_SlimUI_PlayerGroup, EventPlayer());
            TriggerEnable(libCOTF_gt_AF_SlimUI_Delayed, false);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_8A06AD67"));
        }
    }
    else {
        if ((GameGetMissionTime() < 5.0)) {
            PlayerGroupAdd(libCOTF_gv_aF_SlimUI_PlayerGroup, EventPlayer());
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_BE2E14B1"));
            TriggerExecute(libCOTF_gt_AF_SlimUI_Delayed, true, false);
        }
        else {
            DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer");
            if ((PlayerGroupHasPlayer(libCOTF_gv_aF_SlimUI_PlayerGroup, EventPlayer()) == false)) {
                PlayerGroupAdd(libCOTF_gv_aF_SlimUI_PlayerGroup, EventPlayer());
                UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeConsolePanel, false);
                DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupSingle(EventPlayer()), "SlimUI_On");
            }
            else {
                PlayerGroupRemove(libCOTF_gv_aF_SlimUI_PlayerGroup, EventPlayer());
                UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeConsolePanel, true);
                DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupSingle(EventPlayer()), "SlimUI_Off");
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_AF_SlimUI_Init () {
    libCOTF_gt_AF_SlimUI = TriggerCreate("libCOTF_gt_AF_SlimUI_Func");
    TriggerAddEventChatMessage(libCOTF_gt_AF_SlimUI, c_playerAny, "-slim", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_SlimUI_Delayed
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_AF_SlimUI_Delayed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((GameGetMissionTime() >= 5.0))) {
        Wait(0.5, c_timeGame);
    }
    UISetFrameVisible(libCOTF_gv_aF_SlimUI_PlayerGroup, c_syncFrameTypeConsolePanel, false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer");
    DialogControlSendAnimationEvent(DialogControlLastCreated(), libCOTF_gv_aF_SlimUI_PlayerGroup, "SlimUI_On");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_AF_SlimUI_Delayed_Init () {
    libCOTF_gt_AF_SlimUI_Delayed = TriggerCreate("libCOTF_gt_AF_SlimUI_Delayed_Func");
    TriggerEnable(libCOTF_gt_AF_SlimUI_Delayed, false);
    libCOUI_gf_CU_CommanderClosed(libCOTF_gt_AF_SlimUI_Delayed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_TopBar Notifications Enable/Disable
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_AF_TopBarNotificationsEnableDisable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libCOTF_gt_AF_TopBarClicked) == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_18C45E55"));
        TriggerEnable(libCOTF_gt_AF_TopBarClicked, true);
        TriggerEnable(libCOTF_gt_AF_MouseEntersTopBar, true);
        TriggerEnable(libCOTF_gt_AF_MouseExitsTopBar, true);
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_1D3C296B"));
        TriggerEnable(libCOTF_gt_AF_TopBarClicked, false);
        TriggerEnable(libCOTF_gt_AF_MouseEntersTopBar, false);
        TriggerEnable(libCOTF_gt_AF_MouseExitsTopBar, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_AF_TopBarNotificationsEnableDisable_Init () {
    libCOTF_gt_AF_TopBarNotificationsEnableDisable = TriggerCreate("libCOTF_gt_AF_TopBarNotificationsEnableDisable_Func");
    TriggerAddEventChatMessage(libCOTF_gt_AF_TopBarNotificationsEnableDisable, c_playerAny, "-topbar", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_TopBar Notifications Initialization
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_AF_TopBarNotificationsInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;
    int lv_vButton;

    // Automatic Variable Declarations
    playergroup autoBED3298B_g;
    const int auto4C197DED_ae = 4;
    const int auto4C197DED_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    autoBED3298B_g = libCOTF_gf_UT_ActiveCommanderPlayers();
    lv_vPlayer = -1;
    while (true) {
        lv_vPlayer = PlayerGroupNextPlayer(autoBED3298B_g, lv_vPlayer);
        if (lv_vPlayer < 0) { break; }
        if (((libCOOC_gf_ActiveCommanderForPlayer(lv_vPlayer) == "ZergZagara") || (libCOOC_gf_ActiveCommanderForPlayer(lv_vPlayer) == "ZergKerrigan"))) {
            DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/CommandPanel/CommandButton12");
            libCOTF_gv_aF_TopbarButton[0][lv_vPlayer] = DialogControlLastCreated();
            DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/CommandPanel/CommandButton13");
            libCOTF_gv_aF_TopbarButton[1][lv_vPlayer] = DialogControlLastCreated();
        }
        else {
            lv_vButton = 0;
            for ( ; ( (auto4C197DED_ai >= 0 && lv_vButton <= auto4C197DED_ae) || (auto4C197DED_ai < 0 && lv_vButton >= auto4C197DED_ae) ) ; lv_vButton += auto4C197DED_ai ) {
                DialogControlHookup(libCOUI_gv_cU_GPCmdPanel[lv_vPlayer], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_vButton));
                libCOTF_gv_aF_TopbarButton[lv_vButton][lv_vPlayer] = DialogControlLastCreated();
            }
            if ((libCOOC_gf_ActiveCommanderForPlayer(lv_vPlayer) == "TerranNova")) {
                DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/CommandPanel/CommandButton13");
                libCOTF_gv_aF_TopbarButton[4][lv_vPlayer] = DialogControlLastCreated();
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_AF_TopBarNotificationsInitialization_Init () {
    libCOTF_gt_AF_TopBarNotificationsInitialization = TriggerCreate("libCOTF_gt_AF_TopBarNotificationsInitialization_Func");
    libCOUI_gf_CU_CommanderClosed(libCOTF_gt_AF_TopBarNotificationsInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_TopBar Clicked
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_AF_TopBarClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vButtonIndex;
    soundlink lv_vSound;
    text lv_vColor;
    text lv_vColorReady;

    // Automatic Variable Declarations
    int auto96915692_val;

    // Variable Initialization
    lv_vSound = SoundLink("UI_CampaignHintNotify", -1);
    lv_vColor = StringExternal("Param/Value/lib_COTF_DA4D880F");
    lv_vColorReady = StringExternal("Param/Value/lib_COTF_180D58C1");

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((EventDialogControl() == libCOTF_gv_aF_TopbarButton[0][EventPlayer()]) || (EventDialogControl() == libCOTF_gv_aF_TopbarButton[1][EventPlayer()]) || (EventDialogControl() == libCOTF_gv_aF_TopbarButton[2][EventPlayer()]) || (EventDialogControl() == libCOTF_gv_aF_TopbarButton[3][EventPlayer()]) || (EventDialogControl() == libCOTF_gv_aF_TopbarButton[4][EventPlayer()])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto96915692_val = EventDialogControl();
    if (auto96915692_val == libCOTF_gv_aF_TopbarButton[0][EventPlayer()]) {
        lv_vButtonIndex = 0;
    }
    else if (auto96915692_val == libCOTF_gv_aF_TopbarButton[1][EventPlayer()]) {
        lv_vButtonIndex = 1;
    }
    else if (auto96915692_val == libCOTF_gv_aF_TopbarButton[2][EventPlayer()]) {
        lv_vButtonIndex = 2;
    }
    else if (auto96915692_val == libCOTF_gv_aF_TopbarButton[3][EventPlayer()]) {
        lv_vButtonIndex = 3;
    }
    else if (auto96915692_val == libCOTF_gv_aF_TopbarButton[4][EventPlayer()]) {
        lv_vButtonIndex = 4;
    }
    else {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    if (((libCOTF_gf_AF_GetButtonText(EventPlayer(), lv_vButtonIndex) == "") || (((libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()) == "ZergZagara") || (libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()) == "ZergKerrigan")) && (UnitGroupUnit(UnitSubgroupSelected(EventPlayer()), 1) != libCOTF_gf_AF_GetHeroUnit(EventPlayer()))) || ((libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()) == "TerranNova") && (EventDialogControl() == libCOTF_gv_aF_TopbarButton[4][EventPlayer()]) && ((UnitGroupUnit(UnitSubgroupSelected(EventPlayer()), 1) != libCOTF_gf_AF_GetHeroUnit(EventPlayer())) || (UnitHasBehavior2(libCOTF_gf_AF_GetHeroUnit(EventPlayer()), "NovaCombatSuit") == true))))) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }

    if ((libCOTF_gf_AF_GetAbility(EventPlayer(), lv_vButtonIndex) == null)) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    else if ((libCOTF_gf_AF_AbilityIsAvailable(EventPlayer(), lv_vButtonIndex) == false)) {
        SoundPlayForPlayer(lv_vSound, c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
        TextExpressionSetToken("Param/Expression/lib_COTF_ADD9F5A3", "C", lv_vColor);
        TextExpressionSetToken("Param/Expression/lib_COTF_ADD9F5A3", "B", StringExternal(libCOTF_gf_AF_GetButtonText(EventPlayer(), lv_vButtonIndex)));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_ADD9F5A3"));
    }
    else if ((libCOTF_gf_AF_GetCharges(EventPlayer(), lv_vButtonIndex) > 0.0)) {
        SoundPlayForPlayer(lv_vSound, c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
        TextExpressionSetToken("Param/Expression/lib_COTF_992BDF1C", "C", lv_vColorReady);
        TextExpressionSetToken("Param/Expression/lib_COTF_992BDF1C", "B", StringExternal(libCOTF_gf_AF_GetButtonText(EventPlayer(), lv_vButtonIndex)));
        TextExpressionSetToken("Param/Expression/lib_COTF_992BDF1C", "C", lv_vColorReady);
        TextExpressionSetToken("Param/Expression/lib_COTF_992BDF1C", "A", FixedToText(libCOTF_gf_AF_GetCharges(EventPlayer(), lv_vButtonIndex), 0));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_992BDF1C"));
    }
    else if ((((libCOTF_gf_AF_AbilityHasCooldownAndEnergyCost(EventPlayer(), lv_vButtonIndex) == false) && (libCOTF_gf_AF_GetCooldown(EventPlayer(), lv_vButtonIndex) == 0.0)) || ((libCOTF_gf_AF_AbilityHasCooldownAndEnergyCost(EventPlayer(), lv_vButtonIndex) == true) && (libCOTF_gf_AF_GetCooldown(EventPlayer(), lv_vButtonIndex) == 0.0) && (libCOTF_gf_AF_EnergyCostofAbility(libCOTF_gf_AF_GetAbility(EventPlayer(), lv_vButtonIndex)) <= UnitGetPropertyFixed(libCOTF_gf_CM_PlayerGetGlobalCaster(EventPlayer()), c_unitPropEnergy, c_unitPropCurrent))))) {
        SoundPlayForPlayer(lv_vSound, c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
        TextExpressionSetToken("Param/Expression/lib_COTF_9ED7E1B9", "C", lv_vColorReady);
        TextExpressionSetToken("Param/Expression/lib_COTF_9ED7E1B9", "B", StringExternal(libCOTF_gf_AF_GetButtonText(EventPlayer(), lv_vButtonIndex)));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_9ED7E1B9"));
    }
    else if ((libCOTF_gf_AF_GetCooldown(EventPlayer(), lv_vButtonIndex) > 0.0)) {
        SoundPlayForPlayer(lv_vSound, c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
        TextExpressionSetToken("Param/Expression/lib_COTF_83D36222", "C", lv_vColor);
        TextExpressionSetToken("Param/Expression/lib_COTF_83D36222", "B", StringExternal(libCOTF_gf_AF_GetButtonText(EventPlayer(), lv_vButtonIndex)));
        TextExpressionSetToken("Param/Expression/lib_COTF_83D36222", "C", lv_vColor);
        TextExpressionSetToken("Param/Expression/lib_COTF_83D36222", "A", FixedToText(libCOTF_gf_AF_GetCooldown(EventPlayer(), lv_vButtonIndex), 0));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_83D36222"));
    }
    else if (true) {
        if ((libCOTF_gf_AF_EnergyCostofAbility(libCOTF_gf_AF_GetAbility(EventPlayer(), lv_vButtonIndex)) <= UnitGetPropertyFixed(libCOTF_gf_CM_PlayerGetGlobalCaster(EventPlayer()), c_unitPropEnergy, c_unitPropCurrent))) {
            SoundPlayForPlayer(lv_vSound, c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
            TextExpressionSetToken("Param/Expression/lib_COTF_87ACC62D", "B", lv_vColorReady);
            TextExpressionSetToken("Param/Expression/lib_COTF_87ACC62D", "C", StringExternal(libCOTF_gf_AF_GetButtonText(EventPlayer(), lv_vButtonIndex)));
            TextExpressionSetToken("Param/Expression/lib_COTF_87ACC62D", "B", lv_vColorReady);
            TextExpressionSetToken("Param/Expression/lib_COTF_87ACC62D", "A", FixedToText(UnitGetPropertyFixed(libCOTF_gf_CM_PlayerGetGlobalCaster(EventPlayer()), c_unitPropEnergy, c_unitPropCurrent), 0));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_87ACC62D"));
        }
        else {
            SoundPlayForPlayer(lv_vSound, c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
            TextExpressionSetToken("Param/Expression/lib_COTF_E04685D1", "B", lv_vColor);
            TextExpressionSetToken("Param/Expression/lib_COTF_E04685D1", "C", StringExternal(libCOTF_gf_AF_GetButtonText(EventPlayer(), lv_vButtonIndex)));
            TextExpressionSetToken("Param/Expression/lib_COTF_E04685D1", "B", lv_vColor);
            TextExpressionSetToken("Param/Expression/lib_COTF_E04685D1", "A", FixedToText(UnitGetPropertyFixed(libCOTF_gf_CM_PlayerGetGlobalCaster(EventPlayer()), c_unitPropEnergy, c_unitPropCurrent), 0));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COTF_E04685D1"));
        }
    }
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_AF_TopBarClicked_Init () {
    libCOTF_gt_AF_TopBarClicked = TriggerCreate("libCOTF_gt_AF_TopBarClicked_Func");
    TriggerEnable(libCOTF_gt_AF_TopBarClicked, false);
    TriggerAddEventDialogControl(libCOTF_gt_AF_TopBarClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeHotkeyPressed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_MouseEntersTopBar
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_AF_MouseEntersTopBar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libCOTF_gv_aF_TopbarButton[0][EventPlayer()]) || (EventDialogControl() == libCOTF_gv_aF_TopbarButton[1][EventPlayer()]) || (EventDialogControl() == libCOTF_gv_aF_TopbarButton[2][EventPlayer()]) || (EventDialogControl() == libCOTF_gv_aF_TopbarButton[3][EventPlayer()]) || (EventDialogControl() == libCOTF_gv_aF_TopbarButton[4][EventPlayer()])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetCommandAllowed(PlayerGroupSingle(EventPlayer()), c_uiCommandAllowSmartClick, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_AF_MouseEntersTopBar_Init () {
    libCOTF_gt_AF_MouseEntersTopBar = TriggerCreate("libCOTF_gt_AF_MouseEntersTopBar_Func");
    TriggerEnable(libCOTF_gt_AF_MouseEntersTopBar, false);
    TriggerAddEventDialogControl(libCOTF_gt_AF_MouseEntersTopBar, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_MouseExitsTopBar
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_AF_MouseExitsTopBar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libCOTF_gv_aF_TopbarButton[0][EventPlayer()]) || (EventDialogControl() == libCOTF_gv_aF_TopbarButton[1][EventPlayer()]) || (EventDialogControl() == libCOTF_gv_aF_TopbarButton[2][EventPlayer()]) || (EventDialogControl() == libCOTF_gv_aF_TopbarButton[3][EventPlayer()]) || (EventDialogControl() == libCOTF_gv_aF_TopbarButton[4][EventPlayer()])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetCommandAllowed(PlayerGroupSingle(EventPlayer()), c_uiCommandAllowSmartClick, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_AF_MouseExitsTopBar_Init () {
    libCOTF_gt_AF_MouseExitsTopBar = TriggerCreate("libCOTF_gt_AF_MouseExitsTopBar_Func");
    TriggerEnable(libCOTF_gt_AF_MouseExitsTopBar, false);
    TriggerAddEventDialogControl(libCOTF_gt_AF_MouseExitsTopBar, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Nikara
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_AF_Nikara_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vNikaraUG;

    // Automatic Variable Declarations
    unitgroup auto04F45A85_g;
    int auto04F45A85_u;
    unit auto04F45A85_var;
    unitgroup auto4DFD7D2F_g;
    int auto4DFD7D2F_u;
    unit auto4DFD7D2F_var;

    // Variable Initialization
    lv_vNikaraUG = UnitGroup("TychusMedic", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libCOTF_gt_AF_GiveNikaraWeaponRevived) == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_5DB689D9"));
        CatalogFieldValueSet(c_gameCatalogAbil, "TychusMedivacHealPlusMech", "AutoCastRange", 1, "8");
        CatalogFieldValueSet(c_gameCatalogAbil, "TychusMedivacHealPlusMech", "AutoCastRange", 2, "8");
        CatalogFieldValueSet(c_gameCatalogAbil, "TychusMedivacDoubleHealPlusMech", "AutoCastRange", 1, "8");
        CatalogFieldValueSet(c_gameCatalogAbil, "TychusMedivacDoubleHealPlusMech", "AutoCastRange", 2, "8");
        TriggerEnable(libCOTF_gt_AF_GiveNikaraWeaponRevived, true);
        TriggerEnable(libCOTF_gt_AF_GiveNikaraWeaponCreated, true);
        auto4DFD7D2F_g = lv_vNikaraUG;
        auto4DFD7D2F_u = UnitGroupCount(auto4DFD7D2F_g, c_unitCountAll);
        for (;; auto4DFD7D2F_u -= 1) {
            auto4DFD7D2F_var = UnitGroupUnitFromEnd(auto4DFD7D2F_g, auto4DFD7D2F_u);
            if (auto4DFD7D2F_var == null) { break; }
            if ((UnitHasBehavior2(auto4DFD7D2F_var, "NikaraFakeWeaponControl") == false) && ((UnitGetOwner(auto4DFD7D2F_var) == 1) || (UnitGetOwner(auto4DFD7D2F_var) == 2))) {
                UnitBehaviorAddPlayer(auto4DFD7D2F_var, "NikaraFakeWeaponControl", 1, 1);
                UnitWeaponAdd(auto4DFD7D2F_var, "NikaraFakeWeapon", null);
            }

        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_89E5DE74"));
        CatalogFieldValueSet(c_gameCatalogAbil, "TychusMedivacHealPlusMech", "AutoCastRange", 1, "6");
        CatalogFieldValueSet(c_gameCatalogAbil, "TychusMedivacHealPlusMech", "AutoCastRange", 2, "6");
        CatalogFieldValueSet(c_gameCatalogAbil, "TychusMedivacDoubleHealPlusMech", "AutoCastRange", 1, "6");
        CatalogFieldValueSet(c_gameCatalogAbil, "TychusMedivacDoubleHealPlusMech", "AutoCastRange", 2, "6");
        TriggerEnable(libCOTF_gt_AF_GiveNikaraWeaponRevived, false);
        TriggerEnable(libCOTF_gt_AF_GiveNikaraWeaponCreated, false);
        auto04F45A85_g = lv_vNikaraUG;
        auto04F45A85_u = UnitGroupCount(auto04F45A85_g, c_unitCountAll);
        for (;; auto04F45A85_u -= 1) {
            auto04F45A85_var = UnitGroupUnitFromEnd(auto04F45A85_g, auto04F45A85_u);
            if (auto04F45A85_var == null) { break; }
            if ((UnitHasBehavior2(auto04F45A85_var, "NikaraFakeWeaponControl") == true) && ((UnitGetOwner(auto04F45A85_var) == 1) || (UnitGetOwner(auto04F45A85_var) == 2))) {
                UnitBehaviorRemovePlayer(auto04F45A85_var, "NikaraFakeWeaponControl", 1, 1);
                UnitWeaponRemove(auto04F45A85_var, "NikaraFakeWeapon");
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_AF_Nikara_Init () {
    libCOTF_gt_AF_Nikara = TriggerCreate("libCOTF_gt_AF_Nikara_Func");
    TriggerAddEventChatMessage(libCOTF_gt_AF_Nikara, c_playerAny, "-nikara", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_GiveNikaraWeaponRevived
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_AF_GiveNikaraWeaponRevived_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "TychusMedic"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "NikaraFakeWeaponControl") == false))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnit(), "NikaraFakeWeaponControl", 1, 1);
    UnitWeaponAdd(EventUnit(), "NikaraFakeWeapon", null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_AF_GiveNikaraWeaponRevived_Init () {
    libCOTF_gt_AF_GiveNikaraWeaponRevived = TriggerCreate("libCOTF_gt_AF_GiveNikaraWeaponRevived_Func");
    TriggerEnable(libCOTF_gt_AF_GiveNikaraWeaponRevived, false);
    TriggerAddEventUnitRevive(libCOTF_gt_AF_GiveNikaraWeaponRevived, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_GiveNikaraWeaponCreated
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_AF_GiveNikaraWeaponCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "TychusMedic"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnitCreatedUnit(), "NikaraFakeWeaponControl") == false))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnitCreatedUnit()) == 1) || (UnitGetOwner(EventUnitCreatedUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnitCreatedUnit(), "NikaraFakeWeaponControl", 1, 1);
    UnitWeaponAdd(EventUnitCreatedUnit(), "NikaraFakeWeapon", null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_AF_GiveNikaraWeaponCreated_Init () {
    libCOTF_gt_AF_GiveNikaraWeaponCreated = TriggerCreate("libCOTF_gt_AF_GiveNikaraWeaponCreated_Func");
    TriggerEnable(libCOTF_gt_AF_GiveNikaraWeaponCreated, false);
    TriggerAddEventUnitCreated(libCOTF_gt_AF_GiveNikaraWeaponCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_Karax 2.0
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_K2_Karax20_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vKaraxPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameGetMissionTime() < 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_D4169A3F"));
        CatalogFieldValueSet(c_gameCatalogButton, "MasteryKaraxSoAChronoRegen", "Name", 1, "Button/Name/MasteryKaraxSoAChronoDefense");
        CatalogFieldValueSet(c_gameCatalogButton, "MasteryKaraxSoAChronoRegen", "Tooltip", 1, "Button/Tooltip/MasteryKaraxSoAChronoDefense");
        CatalogFieldValueSet(c_gameCatalogButton, "MasteryKaraxChronoBoostSpeed", "Tooltip", 1, "Button/Tooltip/MasteryKaraxChronoBoostSpeed2");
        TriggerEnable(libCOTF_gt_K2_CommanderMasteryClicked, true);
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_44900147"));
        return true;
    }
    while (!((GameGetMissionTime() > 0.0))) {
        Wait(1.0, c_timeGame);
    }
    lv_vKaraxPlayer = libCOTF_gf_K2_GetKaraxPlayer();
    if ((lv_vKaraxPlayer == 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_22051942"));
        return true;
    }

    TechTreeUpgradeAddLevel(lv_vKaraxPlayer, "Karax20Base", 1);
    TechTreeUpgradeAddLevel(libCOTF_gf_UT_OtherPlayer(lv_vKaraxPlayer), "Karax20Ally", 1);
    TechTreeAbilityAllow(lv_vKaraxPlayer, AbilityCommand("SolarForgeResearch", 6), true);
    TechTreeAbilityAllow(lv_vKaraxPlayer, AbilityCommand("SolarForgeResearch", 7), true);
    TriggerEnable(libCOTF_gt_K2_CarrierUpgrade, true);
    TriggerEnable(libCOTF_gt_K2_RepairDroneCreated, true);
    TechTreeAbilityAllow(lv_vKaraxPlayer, AbilityCommand("CarrierRepairDroneHanger", 1), true);
    TechTreeAbilityAllow(lv_vKaraxPlayer, AbilityCommand("CarrierRepairDroneHanger", 0), false);
    TechTreeUpgradeAddLevel(lv_vKaraxPlayer, "MasteryKaraxRepairBeamHeal2", TechTreeUpgradeCount(lv_vKaraxPlayer, "MasteryKaraxRepairBeamHeal", c_techCountCompleteOnly));
    libNtve_gf_SetUpgradeLevelForPlayer(lv_vKaraxPlayer, "MasteryKaraxRepairBeamHeal", 0);
    TechTreeUpgradeAddLevel(1, "ChronoMastery", TechTreeUpgradeCount(lv_vKaraxPlayer, "MasteryKaraxSoAChronoRegen", c_techCountCompleteOnly));
    TechTreeUpgradeAddLevel(2, "ChronoMastery", TechTreeUpgradeCount(lv_vKaraxPlayer, "MasteryKaraxSoAChronoRegen", c_techCountCompleteOnly));
    CatalogFieldValueSet(c_gameCatalogButton, "TimeWarp", "Tooltip", libCOTF_gf_UT_OtherPlayer(lv_vKaraxPlayer), "Button/Tooltip/TimeWarp2");
    libNtve_gf_SetUpgradeLevelForPlayer(lv_vKaraxPlayer, "MasteryKaraxSoAChronoRegen", 0);
    TriggerEnable(libCOTF_gt_K2_NexusCreated, true);
    TechTreeAbilityAllow(lv_vKaraxPlayer, AbilityCommand("PhaseStructure", 0), true);
    TechTreeAbilityAllow(lv_vKaraxPlayer, AbilityCommand("PhaseStructure", 2), true);
    TechTreeAbilityAllow(lv_vKaraxPlayer, AbilityCommand("PhaseStructure", 1), true);
    TriggerEnable(libCOTF_gt_K2_CannonPhased, true);
    TriggerEnable(libCOTF_gt_K2_PylonCreated, true);
    TriggerEnable(libCOTF_gt_K2_EnhancedTargetingImp, true);
    TriggerEnable(libCOTF_gt_K2_ImprovedReconstruction, true);
    TriggerEnable(libCOTF_gt_K2_GatewayTrainStart, true);
    TriggerEnable(libCOTF_gt_K2_GatewayTrainStop, true);
    TriggerExecute(libCOTF_gt_K2_RepairDroneUpdatePosition, true, false);
    TechTreeAbilityAllow(lv_vKaraxPlayer, AbilityCommand("PowerDischarge", 0), true);
    CatalogFieldValueSet(c_gameCatalogUnit, "SentryPurifier", "ShieldsStart", lv_vKaraxPlayer, FixedToString((140*(1+0.01*IntToFixed(TechTreeUpgradeCount(lv_vKaraxPlayer, "MasteryKaraxUnitVital", c_techCountCompleteOnly)))), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "SentryPurifier", "ShieldsMax", lv_vKaraxPlayer, FixedToString((140*(1+0.01*IntToFixed(TechTreeUpgradeCount(lv_vKaraxPlayer, "MasteryKaraxUnitVital", c_techCountCompleteOnly)))), 0));
    TriggerEnable(libCOTF_gt_K2_ImprovedShadowCannon, true);
    TriggerEnable(libCOTF_gt_K2_ImprovedReclamation, true);
    TriggerEnable(libCOTF_gt_K2_StructureAttackUpgrade, true);
    TriggerEnable(libCOTF_gt_K2_StructureArmorUpgrade, true);
    TriggerEnable(libCOTF_gt_K2_ChronoWaveSwitch, true);
    libCOTF_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_K2_Karax20_Init () {
    libCOTF_gt_K2_Karax20 = TriggerCreate("libCOTF_gt_K2_Karax20_Func");
    TriggerAddEventChatMessage(libCOTF_gt_K2_Karax20, c_playerAny, "-karax2", true);
    TriggerAddEventChatMessage(libCOTF_gt_K2_Karax20, c_playerAny, "-karax 2", true);
    TriggerAddEventChatMessage(libCOTF_gt_K2_Karax20, c_playerAny, "-karax 2.0", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_Init
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_K2_Init_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto6DA578D9_ae = 15;
    int auto6DA578D9_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto6DA578D9_var = 1;
    for ( ; auto6DA578D9_var <= auto6DA578D9_ae; auto6DA578D9_var += 1 ) {
        TechTreeAbilityAllow(auto6DA578D9_var, AbilityCommand("PhaseStructure", 1), false);
        TechTreeAbilityAllow(auto6DA578D9_var, AbilityCommand("PhaseStructure", 2), false);
        TechTreeAbilityAllow(auto6DA578D9_var, AbilityCommand("PhaseStructure", 0), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_K2_Init_Init () {
    libCOTF_gt_K2_Init = TriggerCreate("libCOTF_gt_K2_Init_Func");
    TriggerAddEventMapInit(libCOTF_gt_K2_Init);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_Carrier Upgrade
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_K2_CarrierUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "CarrierRepairDrones"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(EventPlayer(), "CarrierUpgrade", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_K2_CarrierUpgrade_Init () {
    libCOTF_gt_K2_CarrierUpgrade = TriggerCreate("libCOTF_gt_K2_CarrierUpgrade_Func");
    TriggerEnable(libCOTF_gt_K2_CarrierUpgrade, false);
    TriggerAddEventUpgradeLevelChanged(libCOTF_gt_K2_CarrierUpgrade, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_Nexus Created
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_K2_NexusCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vNexus;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vNexus = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((libCOOC_gf_ActiveCommanderForPlayer(UnitGetOwner(lv_vNexus)) == "ProtossKarax"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lv_vNexus, OrderTargetingUnit(AbilityCommand("TimeWarp", 0), lv_vNexus), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_K2_NexusCreated_Init () {
    libCOTF_gt_K2_NexusCreated = TriggerCreate("libCOTF_gt_K2_NexusCreated_Func");
    TriggerEnable(libCOTF_gt_K2_NexusCreated, false);
    TriggerAddEventPlayerEffectUsed(libCOTF_gt_K2_NexusCreated, c_playerAny, "NexusBirthSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_CannonPhased
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_K2_CannonPhased_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetFacing(EventUnitCreatedUnit(), UnitGetFacing(EventUnit()), 0.0);
    UnitBehaviorAddPlayer(EventUnitCreatedUnit(), "Phasing", 1, 1);
    UnitBehaviorAddPlayer(EventUnit(), "Phasing", 1, 1);
    Wait(5.0, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(EventUnit(), "SetOpacity 0.000000 0.500000");
    Wait(0.5, c_timeGame);
    UnitSetPosition(EventUnit(), UnitGetPosition(EventUnitCreatedUnit()), false);
    UnitSetFacing(EventUnit(), UnitGetFacing(EventUnitCreatedUnit()), 0.0);
    libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), "SetOpacity 0.000000 2.000000");
    libNtve_gf_SendActorMessageToUnit(EventUnit(), "SetOpacity 1.000000 2.000000");
    Wait(2.0, c_timeGame);
    UnitRemove(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_K2_CannonPhased_Init () {
    libCOTF_gt_K2_CannonPhased = TriggerCreate("libCOTF_gt_K2_CannonPhased_Func");
    TriggerEnable(libCOTF_gt_K2_CannonPhased, false);
    TriggerAddEventUnitCreated(libCOTF_gt_K2_CannonPhased, null, "PhaseStructure", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_PylonCreated
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_K2_PylonCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOOC_gf_ActiveCommanderForPlayer(UnitGetOwner(EventUnitCreatedUnit())) == "ProtossKarax"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCreatedUnit()) == "Pylon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnitCreatedUnit(), "VoidPylonPowerSource", 1, 1);
    UnitBehaviorRemovePlayer(EventUnitCreatedUnit(), "PowerSource", 1, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_K2_PylonCreated_Init () {
    libCOTF_gt_K2_PylonCreated = TriggerCreate("libCOTF_gt_K2_PylonCreated_Func");
    TriggerEnable(libCOTF_gt_K2_PylonCreated, false);
    TriggerAddEventUnitCreated(libCOTF_gt_K2_PylonCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_EnhancedTargetingImp
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_K2_EnhancedTargetingImp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "KaraxTurretRange"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(EventPlayer(), "EnhancedTargetingImp", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_K2_EnhancedTargetingImp_Init () {
    libCOTF_gt_K2_EnhancedTargetingImp = TriggerCreate("libCOTF_gt_K2_EnhancedTargetingImp_Func");
    TriggerEnable(libCOTF_gt_K2_EnhancedTargetingImp, false);
    TriggerAddEventUpgradeLevelChanged(libCOTF_gt_K2_EnhancedTargetingImp, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_ImprovedReconstruction
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_K2_ImprovedReconstruction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "ZealotResearchReconstruction"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(EventPlayer(), "ImprovedReconstruction", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_K2_ImprovedReconstruction_Init () {
    libCOTF_gt_K2_ImprovedReconstruction = TriggerCreate("libCOTF_gt_K2_ImprovedReconstruction_Func");
    TriggerEnable(libCOTF_gt_K2_ImprovedReconstruction, false);
    TriggerAddEventUpgradeLevelChanged(libCOTF_gt_K2_ImprovedReconstruction, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_GatewayTrain Start
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_K2_GatewayTrainStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()) == "ProtossKarax"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityEnable(EventUnit(), "UpgradeToWarpGate", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_K2_GatewayTrainStart_Init () {
    libCOTF_gt_K2_GatewayTrainStart = TriggerCreate("libCOTF_gt_K2_GatewayTrainStart_Func");
    TriggerEnable(libCOTF_gt_K2_GatewayTrainStart, false);
    TriggerAddEventUnitAbility(libCOTF_gt_K2_GatewayTrainStart, null, AbilityCommand("GatewayTrain", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOTF_gt_K2_GatewayTrainStart, null, AbilityCommand("GatewayTrain", 5), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_GatewayTrain Stop
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_K2_GatewayTrainStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()) == "ProtossKarax"))) {
            return false;
        }

        if (!((UnitQueueGetProperty(EventUnit(), c_unitQueuePropertyUsed) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityEnable(EventUnit(), "UpgradeToWarpGate", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_K2_GatewayTrainStop_Init () {
    libCOTF_gt_K2_GatewayTrainStop = TriggerCreate("libCOTF_gt_K2_GatewayTrainStop_Func");
    TriggerEnable(libCOTF_gt_K2_GatewayTrainStop, false);
    TriggerAddEventUnitAbility(libCOTF_gt_K2_GatewayTrainStop, null, AbilityCommand("GatewayTrain", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libCOTF_gt_K2_GatewayTrainStop, null, AbilityCommand("GatewayTrain", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libCOTF_gt_K2_GatewayTrainStop, null, AbilityCommand("GatewayTrain", 5), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libCOTF_gt_K2_GatewayTrainStop, null, AbilityCommand("GatewayTrain", 5), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_RepairDroneCreated
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_K2_RepairDroneCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "RepairDrone"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnitCreatedUnit(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.3, (120*IntToFixed(UnitMagazineCount(EventUnit(), "CarrierRepairDroneHanger")))), false);
    UnitCreateEffectUnit(EventUnit(), "RepairDroneApplyRotateKinetic", EventUnitCreatedUnit());
    UnitCreateEffectUnit(EventUnit(), "RepairDroneApplyFollowKinetic", EventUnitCreatedUnit());
    UnitSetFacing(EventUnitCreatedUnit(), UnitGetFacing(EventUnit()), 0.0);
    libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), "SetScale 0.600000");
    UnitBehaviorAdd(EventUnitCreatedUnit(), "RepairdDroneMarker", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_K2_RepairDroneCreated_Init () {
    libCOTF_gt_K2_RepairDroneCreated = TriggerCreate("libCOTF_gt_K2_RepairDroneCreated_Func");
    TriggerEnable(libCOTF_gt_K2_RepairDroneCreated, false);
    TriggerAddEventUnitCreated(libCOTF_gt_K2_RepairDroneCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_RepairDroneUpdatePosition
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_K2_RepairDroneUpdatePosition_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vCarrier;

    // Automatic Variable Declarations
    unitgroup autoA9BEC608_g;
    int autoA9BEC608_u;
    unit autoA9BEC608_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(5.0, c_timeGame);
        autoA9BEC608_g = UnitGroup("RepairDrone", libCOTF_gf_K2_GetKaraxPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA9BEC608_u = UnitGroupCount(autoA9BEC608_g, c_unitCountAll);
        for (;; autoA9BEC608_u -= 1) {
            autoA9BEC608_var = UnitGroupUnitFromEnd(autoA9BEC608_g, autoA9BEC608_u);
            if (autoA9BEC608_var == null) { break; }
            lv_vCarrier = UnitBehaviorEffectUnit(autoA9BEC608_var, "RepairdDroneMarker", c_effectUnitSource, 0);
            if (((DistanceBetweenPoints(UnitGetPosition(autoA9BEC608_var), UnitGetPosition(lv_vCarrier)) < 1.25) || (DistanceBetweenPoints(UnitGetPosition(autoA9BEC608_var), UnitGetPosition(lv_vCarrier)) > 1.35))) {
                UnitSetPosition(autoA9BEC608_var, libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_vCarrier), 1.3, UnitGetPosition(autoA9BEC608_var)), false);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_K2_RepairDroneUpdatePosition_Init () {
    libCOTF_gt_K2_RepairDroneUpdatePosition = TriggerCreate("libCOTF_gt_K2_RepairDroneUpdatePosition_Func");
    TriggerEnable(libCOTF_gt_K2_RepairDroneUpdatePosition, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_ImprovedShadowCannon
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_K2_ImprovedShadowCannon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "ImmortalResearchShadowCannon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(EventPlayer(), "ImprovedShadowCannon", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_K2_ImprovedShadowCannon_Init () {
    libCOTF_gt_K2_ImprovedShadowCannon = TriggerCreate("libCOTF_gt_K2_ImprovedShadowCannon_Func");
    TriggerEnable(libCOTF_gt_K2_ImprovedShadowCannon, false);
    TriggerAddEventUpgradeLevelChanged(libCOTF_gt_K2_ImprovedShadowCannon, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_ImprovedReclamation
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_K2_ImprovedReclamation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "EnergizerReclamation"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(EventPlayer(), "ImprovedReclamation", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_K2_ImprovedReclamation_Init () {
    libCOTF_gt_K2_ImprovedReclamation = TriggerCreate("libCOTF_gt_K2_ImprovedReclamation_Func");
    TriggerEnable(libCOTF_gt_K2_ImprovedReclamation, false);
    TriggerAddEventUpgradeLevelChanged(libCOTF_gt_K2_ImprovedReclamation, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_StructureAttackUpgrade
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_K2_StructureAttackUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventPlayer(), "Karax20Base", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayer(), "StructureAttackUpgrade", c_techCountCompleteOnly) == 0) && ((EventUpgradeName() == "ProtossGroundWeaponsLevel1") || (EventUpgradeName() == "ProtossAirWeaponsLevel1") || (EventUpgradeName() == "HiddenProtossAirWeaponsLevel1"))) {
        TechTreeUpgradeAddLevel(EventPlayer(), "StructureAttackUpgrade", 1);
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayer(), "StructureAttackUpgrade", c_techCountCompleteOnly) == 1) && ((EventUpgradeName() == "ProtossGroundWeaponsLevel2") || (EventUpgradeName() == "HiddenProtossAirWeaponsLevel2") || (EventUpgradeName() == "ProtossAirWeaponsLevel2"))) {
        TechTreeUpgradeAddLevel(EventPlayer(), "StructureAttackUpgrade", 1);
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayer(), "StructureAttackUpgrade", c_techCountCompleteOnly) == 2) && ((EventUpgradeName() == "ProtossGroundWeaponsLevel3") || (EventUpgradeName() == "HiddenProtossAirWeaponsLevel3") || (EventUpgradeName() == "ProtossAirWeaponsLevel3"))) {
        TechTreeUpgradeAddLevel(EventPlayer(), "StructureAttackUpgrade", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_K2_StructureAttackUpgrade_Init () {
    libCOTF_gt_K2_StructureAttackUpgrade = TriggerCreate("libCOTF_gt_K2_StructureAttackUpgrade_Func");
    TriggerEnable(libCOTF_gt_K2_StructureAttackUpgrade, false);
    TriggerAddEventUpgradeLevelChanged(libCOTF_gt_K2_StructureAttackUpgrade, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_StructureArmorUpgrade
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_K2_StructureArmorUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventPlayer(), "Karax20Base", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayer(), "StructureArmorUpgrade", c_techCountCompleteOnly) == 0) && ((EventUpgradeName() == "ZeratulArmorsLevel1") || (EventUpgradeName() == "ProtossGroundArmorsLevel1") || (EventUpgradeName() == "ProtossAirArmorsLevel1") || (EventUpgradeName() == "HiddenProtossAirArmorsLevel1"))) {
        TechTreeUpgradeAddLevel(EventPlayer(), "StructureArmorUpgrade", 1);
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayer(), "StructureArmorUpgrade", c_techCountCompleteOnly) == 1) && ((EventUpgradeName() == "ZeratulArmorsLevel2") || (EventUpgradeName() == "ProtossGroundArmorsLevel2") || (EventUpgradeName() == "HiddenProtossAirArmorsLevel2") || (EventUpgradeName() == "ProtossAirArmorsLevel2"))) {
        TechTreeUpgradeAddLevel(EventPlayer(), "StructureArmorUpgrade", 1);
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayer(), "StructureArmorUpgrade", c_techCountCompleteOnly) == 2) && ((EventUpgradeName() == "ZeratulArmorsLevel3") || (EventUpgradeName() == "ProtossGroundArmorsLevel3") || (EventUpgradeName() == "HiddenProtossAirArmorsLevel3") || (EventUpgradeName() == "ProtossAirArmorsLevel3"))) {
        TechTreeUpgradeAddLevel(EventPlayer(), "StructureArmorUpgrade", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_K2_StructureArmorUpgrade_Init () {
    libCOTF_gt_K2_StructureArmorUpgrade = TriggerCreate("libCOTF_gt_K2_StructureArmorUpgrade_Func");
    TriggerEnable(libCOTF_gt_K2_StructureArmorUpgrade, false);
    TriggerAddEventUpgradeLevelChanged(libCOTF_gt_K2_StructureArmorUpgrade, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_ChronoWaveSwitch
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_K2_ChronoWaveSwitch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vCombatCW_CD;
    fixed lv_vBasicCW_CD;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventUpgradeName() == "BasicChronoWave") || (EventUpgradeName() == "CombatChronoWave")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vBasicCW_CD = UnitAbilityGetCooldown(libCOTF_gf_CM_PlayerGetGlobalCaster(EventPlayer()), "SOAMapWideChrono", "Abil/SOAMapWideChrono");
    lv_vCombatCW_CD = UnitAbilityGetCooldown(libCOTF_gf_CM_PlayerGetGlobalCaster(EventPlayer()), "CombatChronoWave", "Abil/SOAMapWideCombatChrono");
    if ((lv_vCombatCW_CD > lv_vBasicCW_CD)) {
        UnitAbilityAddCooldown(libCOTF_gf_CM_PlayerGetGlobalCaster(EventPlayer()), "SOAMapWideChrono", "Abil/SOAMapWideChrono", (lv_vCombatCW_CD - lv_vBasicCW_CD));
    }
    else {
        UnitAbilityAddCooldown(libCOTF_gf_CM_PlayerGetGlobalCaster(EventPlayer()), "CombatChronoWave", "Abil/SOAMapWideCombatChrono", (lv_vBasicCW_CD - lv_vCombatCW_CD));
    }
    if ((EventUpgradeName() == "BasicChronoWave") && (EventUpgradeLevelDelta() > 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "BasicChronoWave", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "CombatChronoWave", 0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_K2_ChronoWaveSwitch_Init () {
    libCOTF_gt_K2_ChronoWaveSwitch = TriggerCreate("libCOTF_gt_K2_ChronoWaveSwitch_Func");
    TriggerEnable(libCOTF_gt_K2_ChronoWaveSwitch, false);
    TriggerAddEventUpgradeLevelChanged(libCOTF_gt_K2_ChronoWaveSwitch, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_CommanderMasteryClicked
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_K2_CommanderMasteryClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()) == "ProtossKarax"))) {
            return false;
        }

        if (!(((EventDialogControl() == libCOUI_gv_cU_CommanderMasteryButtonSelf) || (EventDialogControl() == libCOUI_gv_cU_MasteryPlusButtons[1]) || (EventDialogControl() == libCOUI_gv_cU_MasteryMinusButtons[1]) || (EventDialogControl() == libCOUI_gv_cU_MasteryPlusButtons[2]) || (EventDialogControl() == libCOUI_gv_cU_MasteryMinusButtons[2]) || (EventDialogControl() == libCOUI_gv_cU_MasteryPlusButtons[3]) || (EventDialogControl() == libCOUI_gv_cU_MasteryMinusButtons[3]) || (EventDialogControl() == libCOUI_gv_cU_MasteryPlusButtons[4]) || (EventDialogControl() == libCOUI_gv_cU_MasteryMinusButtons[4]) || (EventDialogControl() == libCOUI_gv_cU_MasteryPlusButtons[5]) || (EventDialogControl() == libCOUI_gv_cU_MasteryMinusButtons[5]) || (EventDialogControl() == libCOUI_gv_cU_MasteryPlusButtons[6]) || (EventDialogControl() == libCOUI_gv_cU_MasteryMinusButtons[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0, c_timeGame);
    TextExpressionSetToken("Param/Expression/lib_COTF_79CF0BFC", "A", IntToText((libCOUI_gv_cU_MasteryUpgradePointsSpent[3][EventPlayer()] * 3)));
    libNtve_gf_SetDialogItemText(libCOUI_gv_cU_MasteryValueLabels[3], TextExpressionAssemble("Param/Expression/lib_COTF_79CF0BFC"), PlayerGroupSingle(EventPlayer()));
    TextExpressionSetToken("Param/Expression/lib_COTF_639A7E9B", "A", IntToText((libCOUI_gv_cU_MasteryUpgradePointsSpent[4][EventPlayer()] * 2)));
    libNtve_gf_SetDialogItemText(libCOUI_gv_cU_MasteryValueLabels[4], TextExpressionAssemble("Param/Expression/lib_COTF_639A7E9B"), PlayerGroupSingle(EventPlayer()));
    if ((EventDialogControl() != libCOUI_gv_cU_MasteryLevelDownButton) && (EventDialogControl() != libCOUI_gv_cU_MasteryLevelUpButton)) {
        libCOTF_gf_K2_MasteryNameFix(EventPlayer());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_K2_CommanderMasteryClicked_Init () {
    libCOTF_gt_K2_CommanderMasteryClicked = TriggerCreate("libCOTF_gt_K2_CommanderMasteryClicked_Func");
    TriggerEnable(libCOTF_gt_K2_CommanderMasteryClicked, false);
    TriggerAddEventDialogControl(libCOTF_gt_K2_CommanderMasteryClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_BileLauncherBombardment
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_AF_BileLauncherBombardment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOTF_gf_UT_DevCommandsActive(libCOTF_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeAbilityIsAllowed(1, AbilityCommand("AdvancedBombardment", 0)) == false)) {
        TechTreeAbilityAllow(1, AbilityCommand("AdvancedBombardment", 0), true);
        TechTreeAbilityAllow(2, AbilityCommand("AdvancedBombardment", 0), true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_97BD3310"));
    }
    else {
        TechTreeAbilityAllow(1, AbilityCommand("AdvancedBombardment", 0), false);
        TechTreeAbilityAllow(2, AbilityCommand("AdvancedBombardment", 0), false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COTF_47CE0163"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_AF_BileLauncherBombardment_Init () {
    libCOTF_gt_AF_BileLauncherBombardment = TriggerCreate("libCOTF_gt_AF_BileLauncherBombardment_Func");
    TriggerAddEventChatMessage(libCOTF_gt_AF_BileLauncherBombardment, c_playerAny, "-bile", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PingUsed
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_PingUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pingUnit;
    int lv_pingType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOTF_gv_pingValidPlayers, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pingType = (EventPingOption());
    if ((lv_pingType != 4)) {
        libCOTF_gf_PingPlay(lv_pingType, EventPlayer(), EventPingPoint(), EventGameUser(), EventPingUnitType(), EventPingUnitPosition(), EventPingUnitControlPlayer());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_PingUsed_Init () {
    libCOTF_gt_PingUsed = TriggerCreate("libCOTF_gt_PingUsed_Func");
    TriggerEnable(libCOTF_gt_PingUsed, false);
    TriggerAddEventPing(libCOTF_gt_PingUsed, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PingResetTimerExprires
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_PingResetTimerExprires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_timerIndex;

    // Automatic Variable Declarations
    const int auto0296F541_ae = 16;
    const int auto0296F541_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_timerIndex = 1;
    for ( ; ( (auto0296F541_ai >= 0 && lv_timerIndex <= auto0296F541_ae) || (auto0296F541_ai < 0 && lv_timerIndex >= auto0296F541_ae) ) ; lv_timerIndex += auto0296F541_ai ) {
        if ((EventTimer() == libCOTF_gv_pingResetTimer[lv_timerIndex])) {
            libCOTF_gv_pingRecentCount[lv_timerIndex] = 0;
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_PingResetTimerExprires_Init () {
    libCOTF_gt_PingResetTimerExprires = TriggerCreate("libCOTF_gt_PingResetTimerExprires_Func");
    TriggerAddEventTimer(libCOTF_gt_PingResetTimerExprires, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PingPanelAutoDisable
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_PingPanelAutoDisable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupCount(libCOTF_gv_pingValidPlayers) == 0)) {
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePingPanel, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_PingPanelAutoDisable_Init () {
    libCOTF_gt_PingPanelAutoDisable = TriggerCreate("libCOTF_gt_PingPanelAutoDisable_Func");
    TriggerAddEventMapInit(libCOTF_gt_PingPanelAutoDisable);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MeleeSurrender_FlashDialog
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_MeleeSurrender_FlashDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int auto41337519_n = 5;
    int auto41337519_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = libCOTF_gv_meleeSurrender_FlashingPlayer;
    for (auto41337519_i = 1; auto41337519_i <= auto41337519_n; auto41337519_i += 1) {
        if ((PlayerGroupHasPlayer(libCOTF_gv_meleeSurrender_PlayersSurrendering, lv_player) == false)) {
            return true;
        }

        libNtve_gf_SetDialogItemStyle(libCOTF_gv_meleeSurrender_Title[lv_player], "AISurrenderTitle", PlayerGroupAll());
        Wait(0.6, c_timeReal);
        if ((PlayerGroupHasPlayer(libCOTF_gv_meleeSurrender_PlayersSurrendering, lv_player) == false)) {
            return true;
        }

        libNtve_gf_SetDialogItemStyle(libCOTF_gv_meleeSurrender_Title[lv_player], "AISurrenderTitleAlt", PlayerGroupAll());
        Wait(0.6, c_timeReal);
    }
    if ((PlayerGroupHasPlayer(libCOTF_gv_meleeSurrender_PlayersSurrendering, lv_player) == true)) {
        libNtve_gf_SetDialogItemStyle(libCOTF_gv_meleeSurrender_Title[lv_player], "AISurrenderTitle", PlayerGroupAll());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_MeleeSurrender_FlashDialog_Init () {
    libCOTF_gt_MeleeSurrender_FlashDialog = TriggerCreate("libCOTF_gt_MeleeSurrender_FlashDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transport Controller
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_TransportController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_transportUnit;
    point lv_transportTargetPoint;
    point lv_transportDespawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_transportUnit = libCOTF_gv_transportUnit_Param;
    lv_transportTargetPoint = libCOTF_gf_ValidatedPoint(libCOTF_gv_transportTargetPoint_Param);
    lv_transportDespawnPoint = libCOTF_gf_ValidatedPoint(libCOTF_gv_transportDespawnPoint_Param);
    if ((UnitCargoValue(lv_transportUnit, c_unitCargoSpaceTotal) == 0)) {
        return true;
    }

    while (true) {
        if ((UnitIsAlive(lv_transportUnit) == false)) {
            return true;
        }

        if ((UnitCargoValue(lv_transportUnit, c_unitCargoUnitCount) > 0)) {
            UnitIssueOrder(lv_transportUnit, OrderTargetingPoint(AbilityCommand("MedivacTransport", 2), lv_transportTargetPoint), c_orderQueueReplace);
        }
        else {
            if ((RegionContainsPoint(RegionCircle(lv_transportDespawnPoint, 1.0), UnitGetPosition(lv_transportUnit)) == true)) {
                UnitRemove(lv_transportUnit);
                return true;
            }
            else {
                UnitIssueOrder(lv_transportUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_transportDespawnPoint), c_orderQueueReplace);
            }
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_TransportController_Init () {
    libCOTF_gt_TransportController = TriggerCreate("libCOTF_gt_TransportController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto-Reveal Region Controller
//--------------------------------------------------------------------------------------------------
bool libCOTF_gt_AutoRevealRegionController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto754EED34_ae;
    const int auto754EED34_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        auto754EED34_ae = (libCOTF_gv_autoRevealers.lv_count - 1);
        lv_i = 0;
        for ( ; ( (auto754EED34_ai >= 0 && lv_i <= auto754EED34_ae) || (auto754EED34_ai < 0 && lv_i >= auto754EED34_ae) ) ; lv_i += auto754EED34_ai ) {
            if ((UnitGroupCount(UnitGroup(null, libCOTF_gv_autoRevealers.lv_triggeringPlayers[lv_i], libCOTF_gv_autoRevealers.lv_triggeringRegions[lv_i], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
                VisRevealerEnable(libCOTF_gv_autoRevealers.lv_revealers[lv_i], true);
            }
            else {
                VisRevealerEnable(libCOTF_gv_autoRevealers.lv_revealers[lv_i], false);
            }
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOTF_gt_AutoRevealRegionController_Init () {
    libCOTF_gt_AutoRevealRegionController = TriggerCreate("libCOTF_gt_AutoRevealRegionController_Func");
}

void libCOTF_InitTriggers () {
    libCOTF_gt_UT_Debug_Init();
    libCOTF_gt_UT_EnableDevCommands_Init();
    libCOTF_gt_UT_DisableDevCommandsforally_Init();
    libCOTF_gt_UT_NukeTest_Init();
    libCOTF_gt_AbilityUsed_Init();
    libCOTF_gt_UnitCreated_Init();
    libCOTF_gt_UnitDied_Init();
    libCOTF_gt_UnitRevived_Init();
    libCOTF_gt_EffectUsed_Init();
    libCOTF_gt_BehaviorChanged_Init();
    libCOTF_gt_UpgradeChanged_Init();
    libCOTF_gt_EffectDealingDamage_Init();
    libCOTF_gt_UT_Init_Init();
    libCOTF_gt_UT_AfterStart_Init();
    libCOTF_gt_clbmsupggxqynpsn_Init();
    libCOTF_gt_UT_InfoSave_Init();
    libCOTF_gt_UT_Info_Init();
    libCOTF_gt_UT_InfoButton_Init();
    libCOTF_gt_UT_InfoCreate_Init();
    libCOTF_gt_UT_Mengsk_ContaminatedStrikeDmgScore_Init();
    libCOTF_gt_UT_ShowCommandsInit_Init();
    libCOTF_gt_UT_ShowCommands_Init();
    libCOTF_gt_UT_SelInfo_Init_Init();
    libCOTF_gt_UT_SelInfo_Selected_Init();
    libCOTF_gt_UT_SelInfo_Periodic_Init();
    libCOTF_gt_UT_OldMengsk_Init();
    libCOTF_gt_UT_PrestigeAlly_Init();
    libCOTF_gt_UT_CommanderClicked_Init();
    libCOTF_gt_UT_DebugMutatorSelect_Init();
    libCOTF_gt_UT_Rad_Init();
    libCOTF_gt_UT_ShareControl_Init();
    libCOTF_gt_UT_XP_Init();
    libCOTF_gt_UT_ListDead_Init();
    libCOTF_gt_UT_ListHidden_Init();
    libCOTF_gt_UT_ListMissile_Init();
    libCOTF_gt_UT_ListAll_Init();
    libCOTF_gt_UT_skin_Init();
    libCOTF_gt_UT_TesseractCannonTEST_Init();
    libCOTF_gt_UT_Resource_Init();
    libCOTF_gt_UT_AllySupply_Init();
    libCOTF_gt_UT_SpawnArtifacts_Init();
    libCOTF_gt_UT_Pause_Init();
    libCOTF_gt_UT_TechReset_Init();
    libCOTF_gt_UT_Money_Init();
    libCOTF_gt_UT_Look_Init();
    libCOTF_gt_UT_sight_Init();
    libCOTF_gt_UT_KillUnits_Init();
    libCOTF_gt_UT_Remove_Init();
    libCOTF_gt_UT_clearscreen_Init();
    libCOTF_gt_UT_PauseAI_Init();
    libCOTF_gt_UT_Speed_Init();
    libCOTF_gt_UT_Supply_Init();
    libCOTF_gt_UT_Give_Init();
    libCOTF_gt_UT_SwitchOwner_Init();
    libCOTF_gt_UT_Cost_Init();
    libCOTF_gt_UT_Unlock_Init();
    libCOTF_gt_UT_Trigdebug_Init();
    libCOTF_gt_UT_GetID_Init();
    libCOTF_gt_UT_Restore_Init();
    libCOTF_gt_UT_ClearEnemy_Init();
    libCOTF_gt_UT_SpawnUnits_Init();
    libCOTF_gt_UT_Teleport_Init();
    libCOTF_gt_UT_Restart_Init();
    libCOTF_gt_UT_Caster_Init();
    libCOTF_gt_UT_Control_Init();
    libCOTF_gt_UT_Ally_Init();
    libCOTF_gt_UT_PvP_Init();
    libCOTF_gt_UT_MuleHeaven_Init();
    libCOTF_gt_UT_Solo_Init();
    libCOTF_gt_UT_Solo_LnL_CoA_Fix_Init();
    libCOTF_gt_UT_ToggleEco_Init();
    libCOTF_gt_UT_EconomyValue_Init();
    libCOTF_gt_UT_WorkerSaturation_Init();
    libCOTF_gt_UT_FastConstruction_Init();
    libCOTF_gt_UT_FastTrain_Init();
    libCOTF_gt_UT_FastResearch_Init();
    libCOTF_gt_UT_FastArrm_Init();
    libCOTF_gt_UT_FastRevive_Init();
    libCOTF_gt_UT_FastBuild_Init();
    libCOTF_gt_UT_encomps_Init();
    libCOTF_gt_UT_Replace_Init();
    libCOTF_gt_UT_VoidRiftDebug_Init();
    libCOTF_gt_UT_UnitInfo_Init();
    libCOTF_gt_UT_UnitInfoUpdate_Init();
    libCOTF_gt_Startswitch_Init();
    libCOTF_gt_StartswitchMoveTownHall_Init();
    libCOTF_gt_UT_UI_Init();
    libCOTF_gt_UT_UI_CtrlH_Init();
    libCOTF_gt_UT_ButtonMonitor_Init();
    libCOTF_gt_UT_ButtonUsage_Init();
    libCOTF_gt_UT_HotkeyChange_Init();
    libCOTF_gt_UT_Godmode_Init();
    libCOTF_gt_UT_Godmode_unit_created_Init();
    libCOTF_gt_UT_DifficultySet_Init();
    libCOTF_gt_UT_AlarakCDR_Init();
    libCOTF_gt_UT_AlarakCDREffectUsed_Init();
    libCOTF_gt_UT_TopRefresh_Init();
    libCOTF_gt_UT_Trace_Init();
    libCOTF_gt_UT_Tracing_Init();
    libCOTF_gt_UT_DeTracing_Init();
    libCOTF_gt_UT_CopyPaste_Init();
    libCOTF_gt_UT_CTRLC_Init();
    libCOTF_gt_UT_CTRLV_Init();
    libCOTF_gt_UT_PathCheck_Init();
    libCOTF_gt_UT_PathCheckTAB_Init();
    libCOTF_gt_UT_ArtSpawn_Init();
    libCOTF_gt_UT_Pie_Init();
    libCOTF_gt_UT_Light_Init();
    libCOTF_gt_UT_Plus_Init();
    libCOTF_gt_UT_Minus_Init();
    libCOTF_gt_UT_Graph_Initialization_Init();
    libCOTF_gt_UT_Graph_Timer_Init();
    libCOTF_gt_UT_Graph_ShowIncome_Init();
    libCOTF_gt_UT_Graph_ShowArmyValue_Init();
    libCOTF_gt_UT_Graph_ShowAPM_Init();
    libCOTF_gt_UT_Graph_ShowKills_Init();
    libCOTF_gt_UT_Graph_ShowValueLost_Init();
    libCOTF_gt_UT_Graph_ButtonCreate_Init();
    libCOTF_gt_UT_Clicked_Init();
    libCOTF_gt_UT_MissileMovers_Init();
    libCOTF_gt_UT_MissileCreated_Init();
    libCOTF_gt_UT_Height_Init();
    libCOTF_gt_UT_AttackSpeed_Init();
    libCOTF_gt_UT_Damage_Init();
    libCOTF_gt_UT_Life_Init();
    libCOTF_gt_UT_Energy_Init();
    libCOTF_gt_UT_MovementSpeed_Init();
    libCOTF_gt_UT_Acceleration_Init();
    libCOTF_gt_UT_Range_Init();
    libCOTF_gt_UT_ARange_Init();
    libCOTF_gt_UT_Armor_Init();
    libCOTF_gt_UT_TintColor_Init();
    libCOTF_gt_UT_Behavior_Init();
    libCOTF_gt_UT_Scale_Init();
    libCOTF_gt_UT_TimeScale_Init();
    libCOTF_gt_UT_ActorMsg_Init();
    libCOTF_gt_UT_AirGround_Init();
    libCOTF_gt_UT_EmpowerInit_Init();
    libCOTF_gt_UT_EmpowerUnitCreated_Init();
    libCOTF_gt_UT_Horde_Init_Init();
    libCOTF_gt_UT_Horde_Remove_Init();
    libCOTF_gt_UT_Horde_UnitCreated_Init();
    libCOTF_gt_UT_Horde_SendWave_Init();
    libCOTF_gt_UT_Mastery_Init();
    libCOTF_gt_UT_MasteryButtonClicked_Init();
    libCOTF_gt_UT_CommanderSwitched_Init();
    libCOTF_gt_UT_SpawnAttackWave_Init();
    libCOTF_gt_UT_AttackWaveAttack_Init();
    libCOTF_gt_UT_RemoveWave_Init();
    libCOTF_gt_UT_Camera_TurnOnOff_Init();
    libCOTF_gt_UT_Camera_Reset_Init();
    libCOTF_gt_UT_Camera_Top_Init();
    libCOTF_gt_UT_Camera_KeyUp_Init();
    libCOTF_gt_UT_Camera_KeyDown_Init();
    libCOTF_gt_UT_Camera_PeriodicUpdate_Init();
    libCOTF_gt_UT_DoF_Init();
    libCOTF_gt_UT_FoV_Init();
    libCOTF_gt_UT_Dummy_Init();
    libCOTF_gt_UT_DummyTakesDamage_Init();
    libCOTF_gt_UT_DummyUpdate_Init();
    libCOTF_gt_UT_DummyDestroyed_Init();
    libCOTF_gt_UT_DPS_Init();
    libCOTF_gt_UT_DPS_Stop_Init();
    libCOTF_gt_UT_DPS_DealsDamage_Init();
    libCOTF_gt_UT_DPS_Summon_Init();
    libCOTF_gt_UT_DPS_Dies_Init();
    libCOTF_gt_UT_DPS_PauseGlobal_Init();
    libCOTF_gt_UT_Vision_Init();
    libCOTF_gt_UT_Cooldown_Init();
    libCOTF_gt_UT_Numberstoggle_Init();
    libCOTF_gt_UT_NumbersDamage_Init();
    libCOTF_gt_UT_NumbersHeal_Init();
    libCOTF_gt_UT_DL_LogDisplay_Init();
    libCOTF_gt_UT_DL_PeriodicUpdate_Init();
    libCOTF_gt_UT_DL_DamageLogging_Init();
    libCOTF_gt_UT_DL_HealLogging_Init();
    libCOTF_gt_AF_Init_Init();
    libCOTF_gt_AF_ButtonClicked_Init();
    libCOTF_gt_AF_HeroPurchased_Init();
    libCOTF_gt_AF_EnableHeroicUnload_Init();
    libCOTF_gt_AF_UnloadHeroic_Init();
    libCOTF_gt_AF_Score_Init();
    libCOTF_gt_AF_Score_GraphsandCharts_Init();
    libCOTF_gt_AF_Score_SwitchButtonCreate_Init();
    libCOTF_gt_AF_Score_QuitButtonCreate_Init();
    libCOTF_gt_AF_Score_FinalButtonClicked_Init();
    libCOTF_gt_AF_MissionEnds_Init();
    libCOTF_gt_AF_BlizzconChallengeExecute_Init();
    libCOTF_gt_AF_SlimUI_Init();
    libCOTF_gt_AF_SlimUI_Delayed_Init();
    libCOTF_gt_AF_TopBarNotificationsEnableDisable_Init();
    libCOTF_gt_AF_TopBarNotificationsInitialization_Init();
    libCOTF_gt_AF_TopBarClicked_Init();
    libCOTF_gt_AF_MouseEntersTopBar_Init();
    libCOTF_gt_AF_MouseExitsTopBar_Init();
    libCOTF_gt_AF_Nikara_Init();
    libCOTF_gt_AF_GiveNikaraWeaponRevived_Init();
    libCOTF_gt_AF_GiveNikaraWeaponCreated_Init();
    libCOTF_gt_K2_Karax20_Init();
    libCOTF_gt_K2_Init_Init();
    libCOTF_gt_K2_CarrierUpgrade_Init();
    libCOTF_gt_K2_NexusCreated_Init();
    libCOTF_gt_K2_CannonPhased_Init();
    libCOTF_gt_K2_PylonCreated_Init();
    libCOTF_gt_K2_EnhancedTargetingImp_Init();
    libCOTF_gt_K2_ImprovedReconstruction_Init();
    libCOTF_gt_K2_GatewayTrainStart_Init();
    libCOTF_gt_K2_GatewayTrainStop_Init();
    libCOTF_gt_K2_RepairDroneCreated_Init();
    libCOTF_gt_K2_RepairDroneUpdatePosition_Init();
    libCOTF_gt_K2_ImprovedShadowCannon_Init();
    libCOTF_gt_K2_ImprovedReclamation_Init();
    libCOTF_gt_K2_StructureAttackUpgrade_Init();
    libCOTF_gt_K2_StructureArmorUpgrade_Init();
    libCOTF_gt_K2_ChronoWaveSwitch_Init();
    libCOTF_gt_K2_CommanderMasteryClicked_Init();
    libCOTF_gt_AF_BileLauncherBombardment_Init();
    libCOTF_gt_PingUsed_Init();
    libCOTF_gt_PingResetTimerExprires_Init();
    libCOTF_gt_PingPanelAutoDisable_Init();
    libCOTF_gt_MeleeSurrender_FlashDialog_Init();
    libCOTF_gt_TransportController_Init();
    libCOTF_gt_AutoRevealRegionController_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libCOTF_InitLib_completed = false;

void libCOTF_InitLib () {
    if (libCOTF_InitLib_completed) {
        return;
    }

    libCOTF_InitLib_completed = true;

    libCOTF_InitLibraries();
    libCOTF_InitVariables();
    libCOTF_InitTriggers();
}

include "LibCOOC"
include "LibCOMI"
include "LibCOUI"
include "LibCOMU"

